module STD

//@A type for exchanging data between workers.
export primitive Pipeline

//@The type for the worker to receive the data.
export primitive PipelineOut

//@The type for sending data to workers.
export primitive PipelineIn

export group Push
    push(This, $Any)

export group Pop
    pop(This) $Any

#alwaysinline
export def Pipeline() Pipeline
    IR
        %##nreg##pipeline i64## = call i64 @pipeline__create()
        %##nreg##pipeline## = insertvalue {i64, i32} {i64 0, i32 ##tnum##STD::Pipeline##}, i64 %##reg##pipeline i64##, 0
        ret {i64, i32} %##reg##pipeline##

#alwaysinline
export def PipelineOut(pipeline Pipeline) PipelineOut
    IR
        %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
        call void @pipeline__use(i64 %##reg##pipeline##)
        %##nreg##result## = insertvalue {i64, i32} {i64 0, i32 ##tnum##STD::PipelineOut##}, i64 %##reg##pipeline##, 0
        ret {i64, i32} %##reg##result##

#alwaysinline
export def PipelineIn(pipeline Pipeline) PipelineIn
    IR
        %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
        call void @pipeline__use(i64 %##reg##pipeline##)
        %##nreg##result## = insertvalue {i64, i32} {i64 0, i32 ##tnum##STD::PipelineIn##}, i64 %##reg##pipeline##, 0
        ret {i64, i32} %##reg##result##

#override(STD) alwaysinline
def shar__rc_free(pipeline Pipeline)
    IR
        %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
        call void @pipeline__free(i64 %##reg##pipeline##, i8* %1)
        ret {i64, i32} zeroinitializer

#override(STD) alwaysinline
def shar__rc_free(pipeline PipelineOut)
    IR
        %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
        call void @pipeline__free(i64 %##reg##pipeline##, i8* %1)
        ret {i64, i32} zeroinitializer

#override(STD) alwaysinline
def shar__rc_free(pipeline PipelineIn)
    IR
        %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
        call void @pipeline__free(i64 %##reg##pipeline##, i8* %1)
        ret {i64, i32} zeroinitializer

#override(STD) alwaysinline
def shar__rc_use(pipeline Pipeline)
    IR
        %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
        call void @pipeline__use(i64 %##reg##pipeline##)
        ret {i64, i32} zeroinitializer

#override(STD) alwaysinline
def shar__rc_use(pipeline PipelineOut)
    IR
        %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
        call void @pipeline__use(i64 %##reg##pipeline##)
        ret {i64, i32} zeroinitializer

#override(STD) alwaysinline
def shar__rc_use(pipeline PipelineIn)
    IR
        %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
        call void @pipeline__use(i64 %##reg##pipeline##)
        ret {i64, i32} zeroinitializer

#override(STD) alwaysinline
def shar__to_const(pipeline Pipeline)
    IR
        %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
        call void @pipeline__to_const(i64 %##reg##pipeline##)
        ret {i64, i32} zeroinitializer

#override(STD) alwaysinline
def shar__to_const(pipeline PipelineOut)
    IR
        %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
        call void @pipeline__to_const(i64 %##reg##pipeline##)
        ret {i64, i32} zeroinitializer

#override(STD) alwaysinline
def shar__to_const(pipeline PipelineIn)
    IR
        %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
        call void @pipeline__to_const(i64 %##reg##pipeline##)
        ret {i64, i32} zeroinitializer

#override(STD) alwaysinline nothrow
def clone(pipeline Pipeline) Pipeline
    throw(const::eid_clone, "Pipeline cannot be cloned.", nothing)

#override(STD) alwaysinline nothrow
def clone(pipeline PipelineOut) PipelineOut
    throw(const::eid_clone, "Pipeline cannot be cloned.", nothing)

#override(STD) alwaysinline nothrow
def clone(pipeline PipelineIn) PipelineIn
    throw(const::eid_clone, "Pipeline cannot be cloned.", nothing)

#override(STD) nothrow
def dump(pipeline Pipeline, level Int) String
    return "  ".repeatPart(level) + "Type: STD::Pipeline\n"

#override(STD) nothrow
def dump(pipeline PipelineIn, level Int) String
    return "  ".repeatPart(level) + "Type: STD::PipelineIn\n"

#override(STD) nothrow
def dump(pipeline PipelineOut, level Int) String
    return "  ".repeatPart(level) + "Type: STD::PipelineOut\n"

attach Pipeline to Push
    #alwaysinline
    def push(pipeline Pipeline, object $Multithreaded)
        unsafe_pipeline_push(pipeline, object)

attach PipelineIn to Push
    #alwaysinline
    def push(pipeline PipelineIn, object $Multithreaded)
        unsafe_pipeline_push(pipeline, object)

#alwaysinline
def unsafe_pipeline_push(pipeline, object $Any)
    IR
        %##nreg##object for worker## = call {i64, i32} ##func##STD::prepareForThreads##({i64, i32} %1, i8* %2, i1 %3)
        %##nreg##object type## = extractvalue {i64, i32} %##reg##object for worker##, 1
        %##nreg##error?## = icmp eq i32 %##reg##object type##, 1
        %##nreg##unlikely error?## = call i1 @llvm.expect.i1(i1 %##reg##error?##, i1 0)
        br i1 %##reg##unlikely error?##, label %##reg##error label##, label %##reg##no error label##
        ##nreg##error label##:
        ret {i64, i32} %##reg##object for worker##
        ##nreg##no error label##:
        %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
        call void @pipeline__push(i64 %##reg##pipeline##, {i64, i32} %##reg##object for worker##)
        ret {i64, i32} zeroinitializer

attach Pipeline to Pop
    #alwaysinline
    def pop(pipeline Pipeline) <>$Multithreaded
        IR
            %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
            %##nreg##result## = call {i64, i32} @pipeline__pop(i64 %##reg##pipeline##)
            ret {i64, i32} %##reg##result##

attach PipelineOut to Pop
    #alwaysinline
    def pop(pipeline PipelineOut) <>$Multithreaded
        IR
            %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
            %##nreg##result## = call {i64, i32} @pipeline__pop(i64 %##reg##pipeline##)
            ret {i64, i32} %##reg##result##

//@The function periodically tries to get a object from the pipeline, pausing between attempts.
//@The second argument to the function is the approximate maximum number of milliseconds between attempts.
//@If the second argument of the function is less than one, then the function returns an error with the code "const::STD::eid_outOfRange".
#this(Pop) alwaysinline
export def wait(pipeline This, maximumTimeBetweenAttempts Int) $Multithreaded
    inthrow
        if maximumTimeBetweenAttempts < 1
            throw(const::eid_outOfRange, "Out of range.", nothing)
    var counter Int = 0
    for
        const result <>$Multithreaded = pipeline.pop()
        if !result.nothing?()
            return result
        sleep(min(1 + (counter >> 5), maximumTimeBetweenAttempts))
        counter++

//@The function periodically tries to get a object from the pipeline.
#this(Pop) alwaysinline
export def activeWait(pipeline This) $Multithreaded
    for
        const result <>$Multithreaded = pipeline.pop()
        if !result.nothing?()
            return result
        yield()

#alwaysinline nothrow
def unsafe_pipeline_get_items_count(pipeline $Any) Int
    IR
        %##nreg##pipeline## = extractvalue {i64, i32} %0, 0
        %##nreg##result## = call {i64, i32} @pipeline__items_count(i64 %##reg##pipeline##)
        ret {i64, i32} %##reg##result##

attach Pipeline to Long
    //@The function returns the number of items waiting to be transferred from one thread to another.
    #alwaysinline nothrow
    def length(pipeline Pipeline) Int
        return unsafe_pipeline_get_items_count(pipeline)

attach PipelineIn to Long
    //@The function returns the number of items waiting to be transferred from one thread to another.
    #alwaysinline nothrow
    def length(pipeline PipelineIn) Int
        return unsafe_pipeline_get_items_count(pipeline)

attach PipelineOut to Long
    //@The function returns the number of items waiting to be transferred from one thread to another.
    #alwaysinline nothrow
    def length(pipeline PipelineOut) Int
        return unsafe_pipeline_get_items_count(pipeline)
