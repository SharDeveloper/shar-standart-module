module STD

//@A type for working with real numbers.
//@The type is implemented as a double precision floating point number.
//@If the exponent is 2047 and the mantissa is not 0, then the value is "NaN".
//@Any comparison with "NaN" causes an error with the code "enum::STD::error_compareWithNaN".
export primitive Real

attach Real to Independent

#override(STD) alwaysinline
def shar__rc_free(real Real)
    return nothing

#override(STD) alwaysinline
def shar__rc_use(real Real)
    return nothing

#override(STD) alwaysinline
def shar__to_const(real Real)
    return nothing

#override(STD) alwaysinline nothrow
def use?(real Real) Bool
    return false

#override(STD) alwaysinline nothrow
def constant?(real Real) Bool
    return false

#override(STD) alwaysinline nothrow
def clone(real Real) Real
    return real

#override(STD) nothrow
def dump(real Real, level Int) String
    return "  ".repeatPart(level) + "Type: STD::Real = " + real.toString() + "\n"

attach Real to Equal

attach Real to Shar__sugar__equal
    #alwaysinline
    def shar__sugar__equal(real1, real2 Real) Bool
        inthrow
            if real1.nan?() || real2.nan?()
                throw(enum::error_compareWithNaN, "Comparison with \qNaN\q.", nothing)
        return unsafe_real_equal(real1, real2)

#alwaysinline nothrow
def unsafe_real_equal(real1, real2 $Any) Bool
    llvm
        %##nreg##real1 i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real2 i64## = extractvalue [2 x i64] %1, 1
        %##nreg##real1## = bitcast i64 %##reg##real1 i64## to double
        %##nreg##real2## = bitcast i64 %##reg##real2 i64## to double
        %##nreg##result i1## = fcmp oeq double %##reg##real1##, %##reg##real2##
        %##nreg##result i64## = zext i1 %##reg##result i1## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Bool##, i64 0], i64 %##reg##result i64##, 1
        ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__notEqual
    #alwaysinline
    def shar__sugar__notEqual(real1, real2 Real) Bool
        inthrow
            if real1.nan?() || real2.nan?()
                throw(enum::error_compareWithNaN, "Comparison with \qNaN\q.", nothing)
        return unsafe_real_notEqual(real1, real2)

#alwaysinline nothrow
def unsafe_real_notEqual(real1, real2 $Any) Bool
    llvm
        %##nreg##real1 i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real2 i64## = extractvalue [2 x i64] %1, 1
        %##nreg##real1## = bitcast i64 %##reg##real1 i64## to double
        %##nreg##real2## = bitcast i64 %##reg##real2 i64## to double
        %##nreg##result i1## = fcmp one double %##reg##real1##, %##reg##real2##
        %##nreg##result i64## = zext i1 %##reg##result i1## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Bool##, i64 0], i64 %##reg##result i64##, 1
        ret [2 x i64] %##reg##result##

attach Real to Ordered
    #alwaysinline
    def compare(real1, real2 Real) Int
        inthrow
            if real1.nan?() || real2.nan?()
                throw(enum::error_compareWithNaN, "Comparison with \qNaN\q.", nothing)
        return unsafe_real_compare(real1, real2)

#alwaysinline nothrow
def unsafe_real_compare(real1, real2 $Any) Int
    llvm
        %##nreg##real1 i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real2 i64## = extractvalue [2 x i64] %1, 1
        %##nreg##real1## = bitcast i64 %##reg##real1 i64## to double
        %##nreg##real2## = bitcast i64 %##reg##real2 i64## to double
        %##nreg##less## = fcmp olt double %##reg##real1##, %##reg##real2##
        %##nreg##equal## = fcmp oeq double %##reg##real1##, %##reg##real2##
        %##nreg##less or great## = select i1 %##reg##less##, i64 ##enum##STD::ord_less##, i64 ##enum##STD::ord_great##
        %##nreg##result i64## = select i1 %##reg##equal##, i64 ##enum##STD::ord_equal##, i64 %##reg##less or great##
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Int##, i64 0], i64 %##reg##result i64##, 1
        ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__great
    #alwaysinline
    def shar__sugar__great(real1, real2 Real) Bool
        inthrow
            if real1.nan?() || real2.nan?()
                throw(enum::error_compareWithNaN, "Comparison with \qNaN\q.", nothing)
        return unsafe_real_great(real1, real2)

#alwaysinline nothrow
def unsafe_real_great(real1, real2 $Any) Bool
    llvm
        %##nreg##real1 i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real2 i64## = extractvalue [2 x i64] %1, 1
        %##nreg##real1## = bitcast i64 %##reg##real1 i64## to double
        %##nreg##real2## = bitcast i64 %##reg##real2 i64## to double
        %##nreg##result i1## = fcmp ogt double %##reg##real1##, %##reg##real2##
        %##nreg##result i64## = zext i1 %##reg##result i1## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Bool##, i64 0], i64 %##reg##result i64##, 1
        ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__greatOrEqual
    #alwaysinline
    def shar__sugar__greatOrEqual(real1, real2 Real) Bool
        inthrow
            if real1.nan?() || real2.nan?()
                throw(enum::error_compareWithNaN, "Comparison with \qNaN\q.", nothing)
        return unsafe_real_greatOrEqual(real1, real2)

#alwaysinline nothrow
def unsafe_real_greatOrEqual(real1, real2 $Any) Bool
    llvm
        %##nreg##real1 i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real2 i64## = extractvalue [2 x i64] %1, 1
        %##nreg##real1## = bitcast i64 %##reg##real1 i64## to double
        %##nreg##real2## = bitcast i64 %##reg##real2 i64## to double
        %##nreg##result i1## = fcmp oge double %##reg##real1##, %##reg##real2##
        %##nreg##result i64## = zext i1 %##reg##result i1## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Bool##, i64 0], i64 %##reg##result i64##, 1
        ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__less
    #alwaysinline
    def shar__sugar__less(real1, real2 Real) Bool
        inthrow
            if real1.nan?() || real2.nan?()
                throw(enum::error_compareWithNaN, "Comparison with \qNaN\q.", nothing)
        return unsafe_real_less(real1, real2)

#alwaysinline nothrow
def unsafe_real_less(real1, real2 $Any) Bool
    llvm
        %##nreg##real1 i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real2 i64## = extractvalue [2 x i64] %1, 1
        %##nreg##real1## = bitcast i64 %##reg##real1 i64## to double
        %##nreg##real2## = bitcast i64 %##reg##real2 i64## to double
        %##nreg##result i1## = fcmp olt double %##reg##real1##, %##reg##real2##
        %##nreg##result i64## = zext i1 %##reg##result i1## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Bool##, i64 0], i64 %##reg##result i64##, 1
        ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__lessOrEqual
    #alwaysinline
    def shar__sugar__lessOrEqual(real1, real2 Real) Bool
        inthrow
            if real1.nan?() || real2.nan?()
                throw(enum::error_compareWithNaN, "Comparison with \qNaN\q.", nothing)
        return unsafe_real_lessOrEqual(real1, real2)

#alwaysinline nothrow
def unsafe_real_lessOrEqual(real1, real2 $Any) Bool
    llvm
        %##nreg##real1 i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real2 i64## = extractvalue [2 x i64] %1, 1
        %##nreg##real1## = bitcast i64 %##reg##real1 i64## to double
        %##nreg##real2## = bitcast i64 %##reg##real2 i64## to double
        %##nreg##result i1## = fcmp ole double %##reg##real1##, %##reg##real2##
        %##nreg##result i64## = zext i1 %##reg##result i1## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Bool##, i64 0], i64 %##reg##result i64##, 1
        ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__inc
    #alwaysinline nothrow
    def shar__sugar__inc(write real Real)
        real = real + 1.0

attach Real to Shar__sugar__dec
    #alwaysinline nothrow
    def shar__sugar__dec(write real Real)
        real = real - 1.0

attach Real to Shar__sugar__neg
    #alwaysinline nothrow
    def shar__sugar__neg(real Real) Real
        llvm
            %##nreg##real i64## = extractvalue [2 x i64] %0, 1
            %##nreg##real## = bitcast i64 %##reg##real i64## to double
            %##nreg##result value double## = fneg double %##reg##real##
            %##nreg##result value## = bitcast double %##reg##result value double## to i64
            %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
            ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__mul
    #alwaysinline nothrow
    def shar__sugar__mul(real1, real2 Real) Real
        llvm
            %##nreg##real1 i64## = extractvalue [2 x i64] %0, 1
            %##nreg##real2 i64## = extractvalue [2 x i64] %1, 1
            %##nreg##real1## = bitcast i64 %##reg##real1 i64## to double
            %##nreg##real2## = bitcast i64 %##reg##real2 i64## to double
            %##nreg##result value double## = fmul double %##reg##real1##, %##reg##real2##
            %##nreg##result value## = bitcast double %##reg##result value double## to i64
            %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
            ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__div
    #alwaysinline nothrow
    def shar__sugar__div(real1, real2 Real) Real
        llvm
            %##nreg##real1 i64## = extractvalue [2 x i64] %0, 1
            %##nreg##real2 i64## = extractvalue [2 x i64] %1, 1
            %##nreg##real1## = bitcast i64 %##reg##real1 i64## to double
            %##nreg##real2## = bitcast i64 %##reg##real2 i64## to double
            %##nreg##result value double## = fdiv double %##reg##real1##, %##reg##real2##
            %##nreg##result value## = bitcast double %##reg##result value double## to i64
            %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
            ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__mod
    #alwaysinline nothrow
    def shar__sugar__mod(real1, real2 Real) Real
        llvm
            %##nreg##real1 i64## = extractvalue [2 x i64] %0, 1
            %##nreg##real2 i64## = extractvalue [2 x i64] %1, 1
            %##nreg##real1## = bitcast i64 %##reg##real1 i64## to double
            %##nreg##real2## = bitcast i64 %##reg##real2 i64## to double
            %##nreg##result value double## = frem double %##reg##real1##, %##reg##real2##
            %##nreg##result value## = bitcast double %##reg##result value double## to i64
            %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
            ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__add
    #alwaysinline nothrow
    def shar__sugar__add(real1, real2 Real) Real
        llvm
            %##nreg##real1 i64## = extractvalue [2 x i64] %0, 1
            %##nreg##real2 i64## = extractvalue [2 x i64] %1, 1
            %##nreg##real1## = bitcast i64 %##reg##real1 i64## to double
            %##nreg##real2## = bitcast i64 %##reg##real2 i64## to double
            %##nreg##result value double## = fadd double %##reg##real1##, %##reg##real2##
            %##nreg##result value## = bitcast double %##reg##result value double## to i64
            %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
            ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__sub
    #alwaysinline nothrow
    def shar__sugar__sub(real1, real2 Real) Real
        llvm
            %##nreg##real1 i64## = extractvalue [2 x i64] %0, 1
            %##nreg##real2 i64## = extractvalue [2 x i64] %1, 1
            %##nreg##real1## = bitcast i64 %##reg##real1 i64## to double
            %##nreg##real2## = bitcast i64 %##reg##real2 i64## to double
            %##nreg##result value double## = fsub double %##reg##real1##, %##reg##real2##
            %##nreg##result value## = bitcast double %##reg##result value double## to i64
            %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
            ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__addSet
    #alwaysinline nothrow
    def shar__sugar__addSet(write real1, real2 Real)
        real1 = real1 + real2

attach Real to Shar__sugar__subSet
    #alwaysinline nothrow
    def shar__sugar__subSet(write real1, real2 Real)
        real1 = real1 - real2

attach Real to Shar__sugar__mulSet
    #alwaysinline nothrow
    def shar__sugar__mulSet(write real1, real2 Real)
        real1 = real1 * real2

attach Real to Shar__sugar__divSet
    #alwaysinline nothrow
    def shar__sugar__divSet(write real1, real2 Real)
        real1 = real1 / real2

attach Real to Shar__sugar__modSet
    #alwaysinline nothrow
    def shar__sugar__modSet(write real1, real2 Real)
        real1 = real1 % real2

attach Real to StringWriter
    #nothrow
    def toString(real Real) String
        llvm
            br label %##reg##start##
            ##nreg##start##:
            %##nreg##real i64## = extractvalue [2 x i64] %0, 1
            %##nreg##real## = bitcast i64 %##reg##real i64## to double
            %##nreg##buffer## = alloca i8, i32 313, align 1
            ##llvmdeclare##sprintf##declare i32 @sprintf(i8* noalias nocapture, i8* nocapture readonly, ...) local_unnamed_addr nofree nounwind##
            %##nreg##length i32## = call i32 (i8*, i8*, ...) @sprintf(i8* %##reg##buffer##, i8* getelementptr ([3 x i8], [3 x i8]* ##llvmconst##>private unnamed_addr constant [3 x i8] c"%g\00", align 1<##, i64 0, i64 0), double %##reg##real##)
            %##nreg##length i64## = zext i32 %##reg##length i32## to i64
            %##nreg##length## = insertvalue [2 x i64] [i64 ##tnum##STD::Int##, i64 0], i64 %##reg##length i64##, 1
            %##nreg##dummy string## = call [2 x i64] ##ancntfunc##STD::unsafe_string_createDummy##([2 x i64] %##reg##length##)
            %##nreg##string pointer i64## = extractvalue [2 x i64] %##reg##dummy string##, 1
            %##nreg##string pointer## = inttoptr i64 %##reg##string pointer i64## to i16*
            %##nreg##chars## = getelementptr i16, i16* %##reg##string pointer##, i64 8
            br label %##reg##loop##
            ##nreg##loop##:
            %##nreg##index## = phi i64 [0, %##reg##start##], [%##reg##new index##, %##reg##loop##]
            %##nreg##c char pointer## = getelementptr i8, i8* %##reg##buffer##, i64 %##reg##index##
            %##nreg##c char## = load i8, i8* %##reg##c char pointer##, align 1
            %##nreg##char pointer## = getelementptr i16, i16* %##reg##chars##, i64 %##reg##index##
            %##nreg##char## = zext i8 %##reg##c char## to i16
            store i16 %##reg##char##, i16* %##reg##char pointer##, align 2
            %##nreg##new index## = add i64 %##reg##index##, 1
            %##nreg##continue## = icmp ne i64 %##reg##new index##, %##reg##length i64##
            br i1 %##reg##continue##, label %##reg##loop##, label %##reg##end loop##
            ##nreg##end loop##:
            ret [2 x i64] %##reg##dummy string##

attach Real to StringReader
    def fromString(noread type Real, string String) Real
        var result Real = 0.0
        inthrow
            if !stringCorrectForReal?(string)
                throw(enum::error_readFromString, "Reading from the string caused an error.", nothing)
        const allOk Bool = unsafe_real_fromString(result, string)
        inthrow
            if !allOk
                throw(enum::error_readFromString, "Reading from the string caused an error.", nothing)
        return result

#alwaysinline nothrow
def stringCorrectForReal?(string String) Bool
    var result Bool = string.length~().inRange?(1, 313)
    parse :(parse) _, char = string
        switch char
        case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E', '+', '-', '.'
            nothing
        default
            result = false
            end parse
    return result

#alwaysinline unsafewrite nothrow
def unsafe_real_fromString(write real, string $Any) Bool
    llvm
        br label %##reg##start##
        ##nreg##start##:
        %##nreg##string i64## = extractvalue [2 x i64] %1, 1
        %##nreg##string pointer## = inttoptr i64 %##reg##string i64## to i64*
        %##nreg##chars i64## = getelementptr i64, i64* %##reg##string pointer##, i64 2
        %##nreg##chars## = bitcast i64* %##reg##chars i64## to i16*
        %##nreg##length pointer## = getelementptr i64, i64* %##reg##string pointer##, i64 1
        %##nreg##length## = load i64, i64* %##reg##length pointer##, align 8
        %##nreg##length + 1## = add i64 %##reg##length##, 1
        %##nreg##buffer## = alloca i8, i64 %##reg##length + 1##, align 1
        br label %##reg##loop##
        ##nreg##loop##:
        %##nreg##index## = phi i64 [0, %##reg##start##], [%##reg##new index##, %##reg##loop##]
        %##nreg##string char pointer## = getelementptr i16, i16* %##reg##chars##, i64 %##reg##index##
        %##nreg##buffer char pointer## = getelementptr i8, i8* %##reg##buffer##, i64 %##reg##index##
        %##nreg##string char## = load i16, i16* %##reg##string char pointer##, align 2
        %##nreg##buffer char## = trunc i16 %##reg##string char## to i8
        store i8 %##reg##buffer char##, i8* %##reg##buffer char pointer##, align 1
        %##nreg##new index## = add i64 %##reg##index##, 1
        %##nreg##continue## = icmp ult i64 %##reg##new index##, %##reg##length##
        br i1 %##reg##continue##, label %##reg##loop##, label %##reg##loop end##
        ##nreg##loop end##:
        %##nreg##buffer end char pointer## = getelementptr i8, i8* %##reg##buffer##, i64 %##reg##length##
        store i8 0, i8* %##reg##buffer end char pointer##, align 1
        %##nreg##strtod result ptr## = alloca i8*, align 8
        store i8* null, i8** %##reg##strtod result ptr##, align 8
        ##llvmdeclare##strtod##declare double @strtod(i8* readonly, i8** nocapture) local_unnamed_addr nofree nounwind##
        %##nreg##result double## = call double @strtod(i8* %##reg##buffer##, i8** %##reg##strtod result ptr##)
        %##nreg##index of last readed char + 1 result## = load i8*, i8** %##reg##strtod result ptr##
        %##nreg##index of last readed char + 1 buffer## = getelementptr i8, i8* %##reg##buffer##, i64 %##reg##length##
        %##nreg##all ok## = icmp eq i8* %##reg##index of last readed char + 1 result##, %##reg##index of last readed char + 1 buffer##
        br i1 %##reg##all ok##, label %##reg##true label##, label %##reg##false label##
        ##nreg##true label##:
        %##nreg##result i64## = bitcast double %##reg##result double## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result i64##, 1
        store [2 x i64] %##reg##result##, [2 x i64]* %0, align 8
        ret [2 x i64] [i64 ##tnum##STD::Bool##, i64 1]
        ##nreg##false label##:
        ret [2 x i64] [i64 ##tnum##STD::Bool##, i64 0]

attach Real to Number
    #alwaysinline nothrow
    def abs(real Real) Real
        llvm
            %##nreg##real i64## = extractvalue [2 x i64] %0, 1
            %##nreg##real## = bitcast i64 %##reg##real i64## to double
            ##llvmdeclare##llvm.fabs.f64##declare double @llvm.fabs.f64(double)##
            %##nreg##result value double## = call double @llvm.fabs.f64(double %##reg##real##)
            %##nreg##result value## = bitcast double %##reg##result value double## to i64
            %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
            ret [2 x i64] %##reg##result##

    #alwaysinline nothrow
    def power(real, power Real) Real
        llvm
            %##nreg##real i64## = extractvalue [2 x i64] %0, 1
            %##nreg##power i64## = extractvalue [2 x i64] %1, 1
            %##nreg##real## = bitcast i64 %##reg##real i64## to double
            %##nreg##power## = bitcast i64 %##reg##power i64## to double
            ##llvmdeclare##llvm.pow.f64##declare double @llvm.pow.f64(double, double)##
            %##nreg##result value double## = call double @llvm.pow.f64(double %##reg##real##, double %##reg##power##)
            %##nreg##result value## = bitcast double %##reg##result value double## to i64
            %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
            ret [2 x i64] %##reg##result##

    #alwaysinline nothrow
    def getRandom(noread real Real) Real
        var resultAsInt Int = Int.getRandom()
        if (resultAsInt & 9218868437227405312) == 9218868437227405312
            resultAsInt.setBit(52, false)
        return intAsReal(resultAsInt)

    #alwaysinline nothrow
    def getCryptographicRandom(noread real Real) Real
        return Int.getCryptographicRandom().setBit$(52, false).intAsReal()

//@Function of the square root of a number.
#alwaysinline nothrow
export def sqrt(real Real) Real
    llvm
        %##nreg##real i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real## = bitcast i64 %##reg##real i64## to double
        ##llvmdeclare##llvm.sqrt.f64##declare double @llvm.sqrt.f64(double)##
        %##nreg##result value double## = call double @llvm.sqrt.f64(double %##reg##real##)
        %##nreg##result value## = bitcast double %##reg##result value double## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
        ret [2 x i64] %##reg##result##

//@The function calculates the sine.
//@Angle degrees are in radians.
#alwaysinline nothrow
export def sin(angle Real) Real
    llvm
        %##nreg##real i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real## = bitcast i64 %##reg##real i64## to double
        ##llvmdeclare##llvm.sin.f64##declare double @llvm.sin.f64(double)##
        %##nreg##result value double## = call double @llvm.sin.f64(double %##reg##real##)
        %##nreg##result value## = bitcast double %##reg##result value double## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
        ret [2 x i64] %##reg##result##

//@The function calculates the cosine.
//@Angle degrees are in radians.
#alwaysinline nothrow
export def cos(angle Real) Real
    llvm
        %##nreg##real i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real## = bitcast i64 %##reg##real i64## to double
        ##llvmdeclare##llvm.cos.f64##declare double @llvm.cos.f64(double)##
        %##nreg##result value double## = call double @llvm.cos.f64(double %##reg##real##)
        %##nreg##result value## = bitcast double %##reg##result value double## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
        ret [2 x i64] %##reg##result##

//@The function evaluates the expression "power(e, power)" ("e" is a mathematical constant)
#alwaysinline nothrow
export def exp(power Real) Real
    llvm
        %##nreg##real i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real## = bitcast i64 %##reg##real i64## to double
        ##llvmdeclare##llvm.exp.f64##declare double @llvm.exp.f64(double)##
        %##nreg##result value double## = call double @llvm.exp.f64(double %##reg##real##)
        %##nreg##result value## = bitcast double %##reg##result value double## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
        ret [2 x i64] %##reg##result##

//@The function evaluates the expression "power(2, power)"
#alwaysinline nothrow
export def exp2(power Real) Real
    llvm
        %##nreg##real i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real## = bitcast i64 %##reg##real i64## to double
        ##llvmdeclare##llvm.exp2.f64##declare double @llvm.exp2.f64(double)##
        %##nreg##result value double## = call double @llvm.exp2.f64(double %##reg##real##)
        %##nreg##result value## = bitcast double %##reg##result value double## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
        ret [2 x i64] %##reg##result##

//@The function calculates the natural logarithm.
#alwaysinline nothrow
export def log(real Real) Real
    llvm
        %##nreg##real i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real## = bitcast i64 %##reg##real i64## to double
        ##llvmdeclare##llvm.log.f64##declare double @llvm.log.f64(double)##
        %##nreg##result value double## = call double @llvm.log.f64(double %##reg##real##)
        %##nreg##result value## = bitcast double %##reg##result value double## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
        ret [2 x i64] %##reg##result##

//@The function calculates the logarithm to base 2.
#alwaysinline nothrow
export def log2(real Real) Real
    llvm
        %##nreg##real i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real## = bitcast i64 %##reg##real i64## to double
        ##llvmdeclare##llvm.log2.f64##declare double @llvm.log2.f64(double)##
        %##nreg##result value double## = call double @llvm.log2.f64(double %##reg##real##)
        %##nreg##result value## = bitcast double %##reg##result value double## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
        ret [2 x i64] %##reg##result##

//@The function calculates the logarithm to base 10.
#alwaysinline nothrow
export def log10(real Real) Real
    llvm
        %##nreg##real i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real## = bitcast i64 %##reg##real i64## to double
        ##llvmdeclare##llvm.log10.f64##declare double @llvm.log10.f64(double)##
        %##nreg##result value double## = call double @llvm.log10.f64(double %##reg##real##)
        %##nreg##result value## = bitcast double %##reg##result value double## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
        ret [2 x i64] %##reg##result##

//@Functions return the largest integer not exceeding the given number.
#alwaysinline nothrow
export def floor(real Real) Real
    llvm
        %##nreg##real i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real## = bitcast i64 %##reg##real i64## to double
        ##llvmdeclare##llvm.floor.f64##declare double @llvm.floor.f64(double)##
        %##nreg##result value double## = call double @llvm.floor.f64(double %##reg##real##)
        %##nreg##result value## = bitcast double %##reg##result value double## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
        ret [2 x i64] %##reg##result##

//@The function returns the smallest integer that is not less than the given number.
#alwaysinline nothrow
export def ceil(real Real) Real
    llvm
        %##nreg##real i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real## = bitcast i64 %##reg##real i64## to double
        ##llvmdeclare##llvm.ceil.f64##declare double @llvm.ceil.f64(double)##
        %##nreg##result value double## = call double @llvm.ceil.f64(double %##reg##real##)
        %##nreg##result value## = bitcast double %##reg##result value double## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
        ret [2 x i64] %##reg##result##

//@The function returns the given number without the fractional part.
#alwaysinline nothrow
export def trunc(real Real) Real
    llvm
        %##nreg##real i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real## = bitcast i64 %##reg##real i64## to double
        ##llvmdeclare##llvm.trunc.f64##declare double @llvm.trunc.f64(double)##
        %##nreg##result value double## = call double @llvm.trunc.f64(double %##reg##real##)
        %##nreg##result value## = bitcast double %##reg##result value double## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
        ret [2 x i64] %##reg##result##

//@The function rounds a number to the nearest integer.
//@If there are two integers that are equidistant from the given number, then rounding is performed to the number whose absolute value is greater.
#alwaysinline nothrow
export def round(real Real) Real
    llvm
        %##nreg##real i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real## = bitcast i64 %##reg##real i64## to double
        ##llvmdeclare##llvm.round.f64##declare double @llvm.round.f64(double)##
        %##nreg##result value double## = call double @llvm.round.f64(double %##reg##real##)
        %##nreg##result value## = bitcast double %##reg##result value double## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result value##, 1
        ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__and
    #alwaysinline nothrow
    def shar__sugar__and(real1, real2 Real) Real
        llvm
            %##nreg##real1## = extractvalue [2 x i64] %0, 1
            %##nreg##real2## = extractvalue [2 x i64] %1, 1
            %##nreg##result i64## = and i64 %##reg##real1##, %##reg##real2##
            %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result i64##, 1
            ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__xor
    #alwaysinline nothrow
    def shar__sugar__xor(real1, real2 Real) Real
        llvm
            %##nreg##real1## = extractvalue [2 x i64] %0, 1
            %##nreg##real2## = extractvalue [2 x i64] %1, 1
            %##nreg##result i64## = xor i64 %##reg##real1##, %##reg##real2##
            %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result i64##, 1
            ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__or
    #alwaysinline nothrow
    def shar__sugar__or(real1, real2 Real) Real
        llvm
            %##nreg##real1## = extractvalue [2 x i64] %0, 1
            %##nreg##real2## = extractvalue [2 x i64] %1, 1
            %##nreg##result i64## = or i64 %##reg##real1##, %##reg##real2##
            %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result i64##, 1
            ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__shl
    #alwaysinline
    def shar__sugar__shl(real Real, shifts Int) Real
        inthrow
            if !shifts.inRange?(0, 64)
                throw(enum::error_invalidShiftsNumber, "Invalid number of shifts.", nothing)
        return real.unsafe_real_shl(shifts)

#alwaysinline nothrow
def unsafe_real_shl(real, shifts $Any) Real
    llvm
        %##nreg##real## = extractvalue [2 x i64] %0, 1
        %##nreg##shifts## = extractvalue [2 x i64] %1, 1
        %##nreg##result i64## = shl i64 %##reg##real##, %##reg##shifts##
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result i64##, 1
        ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__shr
    #alwaysinline
    def shar__sugar__shr(real Real, shifts Int) Real
        inthrow
            if !shifts.inRange?(0, 64)
                throw(enum::error_invalidShiftsNumber, "Invalid number of shifts.", nothing)
        return real.unsafe_real_shr(shifts)

#alwaysinline nothrow
def unsafe_real_shr(real, shifts $Any) Real
    llvm
        %##nreg##real## = extractvalue [2 x i64] %0, 1
        %##nreg##shifts## = extractvalue [2 x i64] %1, 1
        %##nreg##result i64## = lshr i64 %##reg##real##, %##reg##shifts##
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result i64##, 1
        ret [2 x i64] %##reg##result##

attach Real to Shar__sugar__andSet
    #alwaysinline nothrow
    def shar__sugar__andSet(write real1, real2 Real)
        real1 = real1 & real2

attach Real to Shar__sugar__xorSet
    #alwaysinline nothrow
    def shar__sugar__xorSet(write real1, real2 Real)
        real1 = real1 ^ real2

attach Real to Shar__sugar__orSet
    #alwaysinline nothrow
    def shar__sugar__orSet(write real1, real2 Real)
        real1 = real1 | real2

attach Real to Shar__sugar__shlSet
    #alwaysinline
    def shar__sugar__shlSet(write real Real, shifts Int)
        real = real << shifts

attach Real to Shar__sugar__shrSet
    #alwaysinline
    def shar__sugar__shrSet(write real Real, shifts Int)
        real = real >> shifts

//@An object of type "STD::Real", when represented as an array of bits, is always 64 bits.
attach Real to BitArray
    #alwaysinline
    def getBit(real Real, index Int) Bool
        return unsafe_getValue(real).getBit(index)

    #alwaysinline
    def setBit$(real Real, index Int, newBit Bool) Real
        inthrow
            if !index.inRange?(0, 64)
                throw(enum::error_outOfRange, "Out of range.", nothing)
        const realWithBit Real = intAsReal(1) << index
        if newBit
            return real | realWithBit
        else
            return real & (intAsReal(-1) ^ realWithBit)

    #alwaysinline
    def setBit(write real Real, index Int, newBit Bool)
        real = real.setBit$(index, newBit)

    #alwaysinline nothrow
    def bitsCount~(real Real) Int
        return 64

    #alwaysinline nothrow
    def not(real Real) Real
        llvm
            %##nreg##real## = extractvalue [2 x i64] %0, 1
            %##nreg##result i64## = xor i64 %##reg##real##, -1
            %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Real##, i64 0], i64 %##reg##result i64##, 1
            ret [2 x i64] %##reg##result##

//@The function converts a real number to an integer.
//@If a real number is not within the range of valid values of type "STD::Int", then an error with code "enum::STD::error_outOfRange" is returned.
#alwaysinline
export def realToInt(real Real) Int
    inthrow
        if real.nan?() || !real.inRange?(-9223372036854775808.0, 9223372036854775808.0)
            throw(enum::error_outOfRange, "Out of range.", nothing)
    return unsafe_real_realToInt(real)

#alwaysinline nothrow
def unsafe_real_realToInt(real $Any) Int
    llvm
        %##nreg##real i64## = extractvalue [2 x i64] %0, 1
        %##nreg##real## = bitcast i64 %##reg##real i64## to double
        %##nreg##int## = fptosi double %##reg##real## to i64
        %##nreg##result## = insertvalue [2 x i64] [i64 ##tnum##STD::Int##, i64 0], i64 %##reg##int##, 1
        ret [2 x i64] %##reg##result##

//@The function finds out if the number is positive infinity.
#alwaysinline nothrow
export def positiveInf?(real Real) Bool
    return real.unsafe_getValue() == 9218868437227405312

//@The function finds out if the number is negative infinity.
#alwaysinline nothrow
export def negativeInf?(real Real) Bool
    return real.unsafe_getValue() == -4503599627370496

//@The function finds out if a number has the value "NaN"(not a number).
#alwaysinline nothrow
export def nan?(real Real) Bool
    return (unsafe_getValue(real) & 9223372036854775807) > 9218868437227405312

attach Real to BinarySerializable
    #alwaysinline nothrow
    def serialize(real Real, write bytes Bytes)
        const newLength Int = bytes.length~() + 8
        if bytes.use?()
            const newBytes Bytes = unsafe_bytes_createDummy(newLength)
            unsafe_memcpyI8(newBytes.unsafe_offsetI64(2), bytes.unsafe_offsetI64(2), bytes.length~())
            bytes = newBytes
        else
            bytes.unsafe_realloc(newLength + 16)
            bytes.unsafe_setI64(1, newLength)
        bytes.unsafe_offsetI8(newLength + 8).unsafe_setI64(0, real)

    #alwaysinline
    def deserialize(noread type Real, bytes Bytes, write position Int) Real
        inthrow
            if bytes.length~() - position < 8 || position < 0
                throw(enum::error_outOfRange, "Out of range.", nothing)
        const resultAsInt Int = bytes.unsafe_offsetI8(position + 16).unsafe_getI64(0)
        position += 8
        return resultAsInt.intAsReal()

attach Real to Multithreaded
    #alwaysinline nothrow
    def prepareForThreads(real Real) Real
        return real
