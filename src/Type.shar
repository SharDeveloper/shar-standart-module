module STD

//@All types that were created using the "type" keyword are automatically placed in the "STD::Type" group.
export group Type

#alwaysinline nothrow
def type_rc_free(type $Any)
    const counter Int = type.unsafe_getI64(0) & 0xffffffffff
    const fieldsCount Int = type.unsafe_getI64(0) >> 40
    if counter > 1
        type.unsafe_setI64(0, (fieldsCount << 40) | (counter - 1))
    elif counter == 1
        const fieldsDatas Int = type.unsafe_offsetI64(1)
        const fieldsTypes Int = fieldsDatas.unsafe_offsetI64(fieldsCount)
        for :(index Int = 0) index < fieldsCount; index++
            unsafe_object(fieldsTypes.unsafe_getI32(index), fieldsDatas.unsafe_getI64(index))
        type.unsafe_free()

#alwaysinline nothrow
def type_rc_use(type $Any)
    const counter Int = type.unsafe_getI64(0) & 0xffffffffff
    if counter != 0
        type.unsafe_setI64(0, (type.unsafe_getI64(0) & 0xffffff0000000000) | (counter + 1))

#alwaysinline nothrow
def type_to_const(type $Any)
    const counter Int = type.unsafe_getI64(0) & 0xffffffffff
    if counter != 0
        const fieldsCount Int = type.unsafe_getI64(0) >> 40
        const fieldsDatas Int = type.unsafe_offsetI64(1)
        const fieldsTypes Int = fieldsDatas.unsafe_offsetI64(fieldsCount)
        for :(index Int = 0) index < fieldsCount; index++
            unsafe_object(fieldsTypes.unsafe_getI32(index), fieldsDatas.unsafe_getI64(index)).shar__to_const()
        type.unsafe_setI64(0, fieldsCount << 40)

#alwaysinline nothrow
def type_use?(type $Any) Bool
    return (type.unsafe_getI64(0) & 0xffffffffff) != 1

#alwaysinline nothrow
def type_constant?(type $Any) Bool
    return (type.unsafe_getI64(0) & 0xffffffffff) == 0

#alwaysinline nothrow
def type_clone(type $Any) $Any
    const fieldsCount Int = type.unsafe_getI64(0) >> 40
    const result Int = unsafe_malloc(fieldsCount * 12 + 8)
    unsafe_memcpyI32(result, type, fieldsCount * 3 + 2)
    result.unsafe_setI64(0, (fieldsCount << 40) | 1)
    const fieldsDatas Int = result.unsafe_offsetI64(1)
    const fieldsTypes Int = fieldsDatas.unsafe_offsetI64(fieldsCount)
    for :(index Int = 0) index < fieldsCount; index++
        unsafe_use_object(fieldsTypes.unsafe_getI32(index), fieldsDatas.unsafe_getI64(index))
    return unsafe_object(type.typeNumber(), result)

#alwaysinline nothrow
def type_getField(type $Any, fieldNumber Int) $Any
    const fieldsDatas Int = type.unsafe_offsetI64(1)
    const fieldsTypes Int = fieldsDatas.unsafe_offsetI64(type.unsafe_getI64(0) >> 40)
    const result $Any = unsafe_object(fieldsTypes.unsafe_getI32(fieldNumber), fieldsDatas.unsafe_getI64(fieldNumber))
    result.shar__rc_use()
    return result

#alwaysinline nothrow unsafewrite
def type_putField(write type $Any, fieldNumber Int, newValue $Any) $Any
    if type.type_use?()
        type = type.type_clone()
    const fieldsDatas Int = type.unsafe_offsetI64(1)
    const fieldsTypes Int = fieldsDatas.unsafe_offsetI64(type.unsafe_getI64(0) >> 40)
    const result $Any = unsafe_object(fieldsTypes.unsafe_getI32(fieldNumber), fieldsDatas.unsafe_getI64(fieldNumber))
    newValue.shar__rc_use()
    fieldsTypes.unsafe_setI32(fieldNumber, newValue.typeNumber())
    fieldsDatas.unsafe_setI64(fieldNumber, newValue.unsafe_getValue())
    return result

#alwaysinline
def type_dump(type $Any, level Int) String
    const fieldsCount Int = type.unsafe_getI64(0) >> 40
    const fieldsDatas Int = type.unsafe_offsetI64(1)
    const fieldsTypes Int = fieldsDatas.unsafe_offsetI64(fieldsCount)
    const spaces String = "  ".repeatPart(level)
    var result String = spaces + "Type: " + type.typeNumber().getTypeName() + "\n"
    for :(fieldIndex Int = 0) fieldIndex < fieldsCount; fieldIndex++
        const field $Any = unsafe_object(fieldsTypes.unsafe_getI32(fieldIndex), fieldsDatas.unsafe_getI64(fieldIndex))
        field.shar__rc_use()
        result += spaces + "  " + unsafe_field_getName(type, fieldIndex) + ":" + field.dump(level + 1)[level * 2 + 1:]
    return result

#alwaysinline nothrow
def unsafe_field_getName(type, fieldIndex $Any) String
    IR
        %##nreg##type number## = extractvalue {i64, i32} %0, 1
        %##nreg##field index i64## = extractvalue {i64, i32} %1, 0
        %##nreg##field index## = trunc i64 %##reg##field index i64## to i32
        %##nreg##result## = call {i64, i32} @shar.get.field.name(i32 %##reg##type number##, i32 %##reg##field index##)
        ret {i64, i32} %##reg##result##
