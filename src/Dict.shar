module STD

//@Members of the "STD::Dict" group are types whose objects are associative arrays, in which all keys and values can be of different types.
export group Dict: AArray

//@A type that is a member of the "STD::Dict" group.
export primitive Dict

//@The function creates an empty associative array of the "STD::Dict" type.
//@The function returns a constant.
#alwaysinline nothrow
export def Dict() Dict
    return Dict.createEmpty()

#override(STD)
def shar__rc_free(dict Dict)
    const counter Int = dict.unsafe_dict_getCounter()
    if counter > 1
        dict.unsafe_dict_setCounter(counter - 1)
    elif counter == 1
        const slotsCount Int = dict.unsafe_dict_slotsCount()
        for :(slotIndex Int = 0) slotIndex < slotsCount; slotIndex++
            const slotAddress Int = dict.unsafe_dict_slotAddress(slotIndex)
            const slotLength Int = slotAddress.unsafe_getI64(0)
            if slotLength != 0
                unsafe_object(slotAddress.unsafe_getI32(6), slotAddress.unsafe_getI64(1))
                unsafe_object(slotAddress.unsafe_getI32(7), slotAddress.unsafe_getI64(2))
                if slotLength != 1
                    const otherKeysAndValues Int = slotAddress.unsafe_getI64(4)
                    for :(keyIndex Int = 0) keyIndex < (slotLength - 1) * 3; keyIndex += 3
                        unsafe_object(otherKeysAndValues.unsafe_offsetI64(keyIndex).unsafe_getI32(4), otherKeysAndValues.unsafe_getI64(keyIndex))
                        unsafe_object(otherKeysAndValues.unsafe_offsetI64(keyIndex).unsafe_getI32(5), otherKeysAndValues.unsafe_getI64(keyIndex + 1))
                    otherKeysAndValues.unsafe_free()
        dict.unsafe_free()

#override(STD) alwaysinline
def shar__rc_use(dict Dict)
    const counter Int = dict.unsafe_dict_getCounter()
    if counter != 0
        dict.unsafe_dict_setCounter(counter + 1)

#override(STD)
def shar__to_const(dict Dict)
    if dict.unsafe_dict_getCounter() != 0
        dict.unsafe_dict_setCounter(0)
        const slotsCount Int = dict.unsafe_dict_slotsCount()
        for :(slotIndex Int = 0) slotIndex < slotsCount; slotIndex++
            const slotAddress Int = dict.unsafe_dict_slotAddress(slotIndex)
            const slotLength Int = slotAddress.unsafe_getI64(0)
            if slotLength != 0
                unsafe_object(slotAddress.unsafe_getI32(6), slotAddress.unsafe_getI64(1)).shar__to_const()
                unsafe_object(slotAddress.unsafe_getI32(7), slotAddress.unsafe_getI64(2)).shar__to_const()
                const otherKeysAndValues Int = slotAddress.unsafe_getI64(4)
                for :(keyIndex Int = 0) keyIndex < (slotLength - 1) * 3; keyIndex += 3
                    unsafe_object(otherKeysAndValues.unsafe_offsetI64(keyIndex).unsafe_getI32(4), otherKeysAndValues.unsafe_getI64(keyIndex)).shar__to_const()
                    unsafe_object(otherKeysAndValues.unsafe_offsetI64(keyIndex).unsafe_getI32(5), otherKeysAndValues.unsafe_getI64(keyIndex + 1)).shar__to_const()

#override(STD) alwaysinline nothrow
def use?(dict Dict) Bool
    return dict.unsafe_dict_getCounter() != 1

#override(STD) alwaysinline nothrow
def constant?(dict Dict) Bool
    return dict.unsafe_dict_getCounter() == 0

#alwaysinline nothrow
def unsafe_dict_slotsCount(dict $Any) Int
    return dict.unsafe_getI64(2)

#alwaysinline nothrow
def unsafe_dict_slotAddress(dict, index $Any) Int
    return dict.unsafe_offsetI64(5 * index + 3)

#override(STD) nothrow
def clone(dict Dict) Dict
    const slotsCount Int = dict.unsafe_dict_slotsCount()
    const memSizeI64 Int = 5 * slotsCount + 3
    const result Dict = unsafe_object(Dict.typeNumber~(), unsafe_malloc(memSizeI64 * 8))
    unsafe_memcpyI64(result, dict, memSizeI64)
    result.unsafe_dict_setCounter(1)
    for :(slotIndex Int = 0) slotIndex < slotsCount; slotIndex++
        const resultSlotAddress Int = result.unsafe_dict_slotAddress(slotIndex)
        const slotLength Int = resultSlotAddress.unsafe_getI64(0)
        if slotLength != 0
            unsafe_use_object(resultSlotAddress.unsafe_getI32(6), resultSlotAddress.unsafe_getI64(1))
            unsafe_use_object(resultSlotAddress.unsafe_getI32(7), resultSlotAddress.unsafe_getI64(2))
            if slotLength != 1
                const otherKeysAndValues Int = resultSlotAddress.unsafe_getI64(4)
                const otherKVMemSizeI64 Int = (slotLength - 1) * 3
                for :(keyIndex Int = 0) keyIndex < otherKVMemSizeI64; keyIndex += 3
                    unsafe_object(otherKeysAndValues.unsafe_offsetI64(keyIndex).unsafe_getI32(4), otherKeysAndValues.unsafe_getI64(keyIndex))
                    unsafe_object(otherKeysAndValues.unsafe_offsetI64(keyIndex).unsafe_getI32(5), otherKeysAndValues.unsafe_getI64(keyIndex + 1))
                const newOtherKV Int = unsafe_malloc(otherKVMemSizeI64 * 8)
                unsafe_memcpyI64(newOtherKV, otherKeysAndValues, otherKVMemSizeI64)
                resultSlotAddress.unsafe_setI64(4, newOtherKV)
    return result

#override(STD)
def dump(dict Dict, level Int) String
    const levelSpaces String = "  ".repeatPart(level)
    var result String = levelSpaces + "Type: STD::Dict = ["
    if !dict.empty?()
        result += "\n"
        parse key, value = dict
            result += levelSpaces + "  key:\n" + key.dump(level + 2) + levelSpaces + "  value:\n" + value.dump(level + 2)
        result += levelSpaces
    result += "]\n"
    return result

attach Dict to Empty
    //@The function returns a constant.
    #alwaysinline nothrow
    def createEmpty(noread type Dict) Dict
        llvm
            ret {i64, i32} {i64 ptrtoint ([3 x i64]* ##llvmconst##>private unnamed_addr constant [3 x i64] zeroinitializer, align 8<## to i64), i32 ##tnum##STD::Dict##}

attach Dict to Long
    #alwaysinline nothrow
    def length~(dict Dict) Int
        return dict.unsafe_getI64(1)

attach Dict to Shar__sugar__getItem
    def shar__sugar__getItem(dict Dict, key ${Equal, Hashable}) $Any
        if dict.empty?()
            return nothing
        const slotAddress Int = dict.unsafe_dict_slotAddress(key.getShortRandomizedHash() & (dict.unsafe_dict_slotsCount() - 1))
        const slotLength Int = slotAddress.unsafe_getI64(0)
        var result $Any = nothing
        if slotLength != 0
            if key.typeNumber~() == slotAddress.unsafe_getI32(6) && unsafe_equal(key.typeNumber~(), slotAddress.unsafe_getI64(1), key.typeNumber~(), key)
                result = unsafe_object(slotAddress.unsafe_getI32(7), slotAddress.unsafe_getI64(2))
                result.shar__rc_use()
            else
                const otherKeysAndValues Int = slotAddress.unsafe_getI64(4)
                for :(keyIndex Int = 0) keyIndex < (slotLength - 1) * 3; keyIndex += 3
                    if {
                        key.typeNumber~() == otherKeysAndValues.unsafe_offsetI64(keyIndex).unsafe_getI32(4) &&
                        unsafe_equal(key.typeNumber~(), otherKeysAndValues.unsafe_getI64(keyIndex), key.typeNumber~(), key)
                    }
                        result = unsafe_object(otherKeysAndValues.unsafe_offsetI64(keyIndex).unsafe_getI32(5), otherKeysAndValues.unsafe_getI64(keyIndex + 1))
                        result.shar__rc_use()
                        end keyIndex
        return result

attach Dict to Put
    def put(write dict Dict, key ${Equal, Hashable}, newValue $Any) $Any
        if newValue.nothing?()
            return deleteKVFromDict(dict, key)
        const slotsCount Int = dict.unsafe_dict_slotsCount()
        const needToEnlarge Bool = dict.length~() == slotsCount && slotsCount != 0x100000000
        var result $Any = nothing
        if needToEnlarge || dict.use?()
            const newSlotsCount Int = dict.empty?().select(16, needToEnlarge.select(slotsCount * 2, slotsCount))
            const newDict Dict = unsafe_dict_create(newSlotsCount)
            parse keyInDict, valueInDict = dict
                if key.type?(keyInDict) && key == keyInDict
                    result = valueInDict
                else
                    newDict.unsafe_dict_addNotExistedKV(keyInDict, valueInDict)
            newDict.unsafe_dict_addNotExistedKV(key, newValue)
            dict = newDict
        else
            key.shar__rc_use()
            newValue.shar__rc_use()
            const slotAddress Int = dict.unsafe_dict_slotAddress(key.getShortRandomizedHash() & (dict.unsafe_dict_slotsCount() - 1))
            const slotLength Int = slotAddress.unsafe_getI64(0)
            if slotLength == 0
                slotAddress.unsafe_setI64(0, 1)
                slotAddress.unsafe_setI64(1, key)
                slotAddress.unsafe_setI64(2, newValue)
                slotAddress.unsafe_setI32(6, key.typeNumber~())
                slotAddress.unsafe_setI32(7, newValue.typeNumber~())
            else
                var isEqual Bool = false
                try
                    isEqual = key.typeNumber~() == slotAddress.unsafe_getI32(6) && unsafe_equal(key.typeNumber~(), slotAddress.unsafe_getI64(1), key.typeNumber~(), key)
                catch id, message, errorData
                    key.shar__rc_free()
                    newValue.shar__rc_free()
                    throw(id, message, errorData)
                if isEqual
                    unsafe_object(key.typeNumber~(), slotAddress.unsafe_getI64(1))
                    result = unsafe_object(slotAddress.unsafe_getI32(7), slotAddress.unsafe_getI64(2))
                    slotAddress.unsafe_setI64(1, key)
                    slotAddress.unsafe_setI64(2, newValue)
                    slotAddress.unsafe_setI32(6, key.typeNumber~())
                    slotAddress.unsafe_setI32(7, newValue.typeNumber~())
                elif slotLength > 1
                    const otherKeysAndValues Int = slotAddress.unsafe_getI64(4)
                    for :(keyIndex Int = 0) keyIndex < (slotLength - 1) * 3; keyIndex += 3
                        try
                            isEqual = {
                                key.typeNumber~() == otherKeysAndValues.unsafe_offsetI64(keyIndex).unsafe_getI32(4) &&
                                unsafe_equal(key.typeNumber~(), otherKeysAndValues.unsafe_getI64(keyIndex), key.typeNumber~(), key)
                            }
                        catch id, message, errorData
                            key.shar__rc_free()
                            newValue.shar__rc_free()
                            throw(id, message, errorData)
                        if isEqual
                            unsafe_object(key.typeNumber~(), otherKeysAndValues.unsafe_getI64(keyIndex))
                            result = unsafe_object(otherKeysAndValues.unsafe_offsetI64(keyIndex).unsafe_getI32(5), otherKeysAndValues.unsafe_getI64(keyIndex + 1))
                            otherKeysAndValues.unsafe_setI64(keyIndex, key)
                            otherKeysAndValues.unsafe_setI64(keyIndex + 1, newValue)
                            otherKeysAndValues.unsafe_offsetI64(keyIndex).unsafe_setI32(4, key.typeNumber~())
                            otherKeysAndValues.unsafe_offsetI64(keyIndex).unsafe_setI32(5, newValue.typeNumber~())
                            end keyIndex
                if result.nothing?()
                    slotAddress.unsafe_setI64(0, slotLength + 1)
                    if slotLength == 1
                        slotAddress.unsafe_setI64(4, unsafe_malloc(24))
                    else
                        var otherKeysAndValues Int = slotAddress.unsafe_getI64(4)
                        otherKeysAndValues.unsafe_realloc(slotLength * 24)
                        slotAddress.unsafe_setI64(4, otherKeysAndValues)
                    const otherKeysAndValues Int = slotAddress.unsafe_getI64(4)
                    const lastKeyIndex Int = (slotLength - 1) * 3
                    otherKeysAndValues.unsafe_setI64(lastKeyIndex, key)
                    otherKeysAndValues.unsafe_setI64(lastKeyIndex + 1, newValue)
                    otherKeysAndValues.unsafe_offsetI64(lastKeyIndex).unsafe_setI32(4, key.typeNumber~())
                    otherKeysAndValues.unsafe_offsetI64(lastKeyIndex).unsafe_setI32(5, newValue.typeNumber~())
            if result.nothing?()
                dict.unsafe_setI64(1, dict.unsafe_getI64(1) + 1)
        return result

#alwaysinline nothrow
def unsafe_dict_create(slotsCount Int) Dict
    const result Dict = unsafe_object(Dict.typeNumber~(), unsafe_malloc(slotsCount * 40 + 24))
    result.unsafe_setI64(0, 1)
    result.unsafe_setI64(1, 0)
    result.unsafe_setI64(2, slotsCount)
    result.unsafe_offsetI64(3).unsafe_memsetI64(0, slotsCount * 5)
    return result

#nothrow
def unsafe_dict_addNotExistedKV(dict, key, value $Any)
    key.shar__rc_use()
    value.shar__rc_use()
    const slotAddress Int = dict.unsafe_dict_slotAddress(key.getShortRandomizedHash() & (dict.unsafe_dict_slotsCount() - 1))
    const slotLength Int = slotAddress.unsafe_getI64(0)
    if slotLength == 0
        slotAddress.unsafe_setI64(0, 1)
        slotAddress.unsafe_setI64(1, key)
        slotAddress.unsafe_setI64(2, value)
        slotAddress.unsafe_setI32(6, key.typeNumber~())
        slotAddress.unsafe_setI32(7, value.typeNumber~())
    else
        slotAddress.unsafe_setI64(0, slotLength + 1)
        if slotLength == 1
            slotAddress.unsafe_setI64(4, unsafe_malloc(24))
        else
            var otherKeysAndValues Int = slotAddress.unsafe_getI64(4)
            otherKeysAndValues.unsafe_realloc(slotLength * 24)
            slotAddress.unsafe_setI64(4, otherKeysAndValues)
        const otherKeysAndValues Int = slotAddress.unsafe_getI64(4)
        const lastKeyIndex Int = (slotLength - 1) * 3
        otherKeysAndValues.unsafe_setI64(lastKeyIndex, key)
        otherKeysAndValues.unsafe_setI64(lastKeyIndex + 1, value)
        otherKeysAndValues.unsafe_offsetI64(lastKeyIndex).unsafe_setI32(4, key.typeNumber~())
        otherKeysAndValues.unsafe_offsetI64(lastKeyIndex).unsafe_setI32(5, value.typeNumber~())
    dict.unsafe_setI64(1, dict.unsafe_getI64(1) + 1)

#noinline
def deleteKVFromDict(write dict Dict, key ${Equal, Hashable}) $Any
    if dict.empty?()
        return nothing
    var result $Any = nothing
    const slotsCount Int = dict.unsafe_dict_slotsCount()
    const slotAddress Int = dict.unsafe_dict_slotAddress(key.getShortRandomizedHash() & (slotsCount - 1))
    const slotLength Int = slotAddress.unsafe_getI64(0)
    var resultKeyIndex Int = -1
    if slotLength != 0
        if key.typeNumber~() == slotAddress.unsafe_getI32(6) && unsafe_equal(key.typeNumber~(), slotAddress.unsafe_getI64(1), key.typeNumber~(), key)
            resultKeyIndex = 0
        elif slotLength != 1
            const otherKeysAndValues Int = slotAddress.unsafe_getI64(4)
            for :(keyIndex Int = 0) keyIndex < (slotLength - 1) * 3; keyIndex += 3
                if {
                    key.typeNumber~() == otherKeysAndValues.unsafe_offsetI64(keyIndex).unsafe_getI32(4) &&
                    unsafe_equal(key.typeNumber~(), otherKeysAndValues.unsafe_getI64(keyIndex), key.typeNumber~(), key)
                }
                    resultKeyIndex = keyIndex + 3
                    end keyIndex
    if resultKeyIndex != -1
        if dict.length~() == 1
            result = unsafe_object(slotAddress.unsafe_getI32(7), slotAddress.unsafe_getI64(2))
            result.shar__rc_use()
            dict = Dict()
        elif !dict.use?()
            dict.unsafe_setI64(1, dict.unsafe_getI64(1) - 1)
            slotAddress.unsafe_setI64(0, slotLength - 1)
            if resultKeyIndex == 0
                unsafe_object(key.typeNumber~(), slotAddress.unsafe_getI64(1))
                result = unsafe_object(slotAddress.unsafe_getI32(7), slotAddress.unsafe_getI64(2))
            if slotLength != 1
                var otherKeysAndValues Int = slotAddress.unsafe_getI64(4)
                const lastKeyIndex Int = (slotLength - 2) * 3
                if resultKeyIndex == 0
                    slotAddress.unsafe_setI64(1, otherKeysAndValues.unsafe_getI64(lastKeyIndex))
                    slotAddress.unsafe_setI64(2, otherKeysAndValues.unsafe_getI64(lastKeyIndex + 1))
                    slotAddress.unsafe_setI64(3, otherKeysAndValues.unsafe_getI64(lastKeyIndex + 2))
                else
                    resultKeyIndex -= 3
                    unsafe_object(key.typeNumber~(), otherKeysAndValues.unsafe_getI64(resultKeyIndex))
                    result = unsafe_object(otherKeysAndValues.unsafe_offsetI64(resultKeyIndex).unsafe_getI32(5), otherKeysAndValues.unsafe_getI64(resultKeyIndex + 1))
                    if lastKeyIndex != resultKeyIndex
                        otherKeysAndValues.unsafe_setI64(resultKeyIndex, otherKeysAndValues.unsafe_getI64(lastKeyIndex))
                        otherKeysAndValues.unsafe_setI64(resultKeyIndex + 1, otherKeysAndValues.unsafe_getI64(lastKeyIndex + 1))
                        otherKeysAndValues.unsafe_setI64(resultKeyIndex + 2, otherKeysAndValues.unsafe_getI64(lastKeyIndex + 2))
                if lastKeyIndex == 0
                    otherKeysAndValues.unsafe_free()
                else
                    otherKeysAndValues.unsafe_realloc(lastKeyIndex * 8)
                    slotAddress.unsafe_setI64(4, otherKeysAndValues)
        else
            const newDict Dict = unsafe_dict_create(dict.unsafe_dict_slotsCount())
            parse keyInDict, valueInDict = dict
                if key.type?(keyInDict) && key == keyInDict
                    result = valueInDict
                else
                    newDict.unsafe_dict_addNotExistedKV(keyInDict, valueInDict)
            dict = newDict
    return result

#alwaysinline nothrow
def unsafe_dict_getCounter(dict $Any) Int
    return dict.unsafe_getI64(0)

#alwaysinline nothrow
def unsafe_dict_setCounter(dict, newCounter $Any)
    dict.unsafe_setI64(0, newCounter)

attach Dict to Iterable
    #alwaysinline nothrow
    def parse__init(dict Dict) Array
        var slotIndex Int = 0
        const slotsCount Int = dict.unsafe_dict_slotsCount()
        for :(loop) slotIndex < slotsCount; slotIndex++
            if dict.unsafe_dict_slotAddress(slotIndex).unsafe_getI64(0) != 0
                end loop
        return [slotIndex, 0]

    #alwaysinline nothrow
    def parse__predicate(dict Dict, index Array) Bool
        return index[0] < dict.unsafe_dict_slotsCount()

    #alwaysinline unsafewrite nothrow
    def parse__next(dict Dict, write index Array)
        const slotsCount Int = dict.unsafe_dict_slotsCount()
        const currentSlotIndex Int = index[0]
        const currentSlotLength Int = dict.unsafe_dict_slotAddress(currentSlotIndex).unsafe_getI64(0)
        const keyIndex Int = index[1] + 1
        if keyIndex < currentSlotLength
            index.put(1, keyIndex)
            return
        var slotIndex Int = currentSlotIndex + 1
        for :(loop) slotIndex < slotsCount; slotIndex++
            const slotLength Int = dict.unsafe_dict_slotAddress(slotIndex).unsafe_getI64(0)
            if slotLength != 0
                end loop
        index.put(0, slotIndex)
        index.put(1, 0)

    #alwaysinline nothrow
    def parse__get__key(dict Dict, index Array) $Any
        const slotAddress Int = dict.unsafe_dict_slotAddress(index[0])
        const keyIndex Int = index[1]
        const otherKeysAndValues Int = slotAddress.unsafe_getI64(4)
        const result $Any = (keyIndex == 0).select{
            (
                unsafe_object(slotAddress.unsafe_getI32(6), slotAddress.unsafe_getI64(1)),
                unsafe_object(otherKeysAndValues.unsafe_getI32(keyIndex * 6 - 2), otherKeysAndValues.unsafe_getI64((keyIndex - 1) * 3))
            )
        }
        result.shar__rc_use()
        return result

    #alwaysinline nothrow
    def parse__get__item(dict Dict, index Array) $Any
        const slotAddress Int = dict.unsafe_dict_slotAddress(index[0])
        const keyIndex Int = index[1]
        const otherKeysAndValues Int = slotAddress.unsafe_getI64(4)
        const result $Any = (keyIndex == 0).select{
            (
                unsafe_object(slotAddress.unsafe_getI32(7), slotAddress.unsafe_getI64(2)),
                unsafe_object(otherKeysAndValues.unsafe_getI32(keyIndex * 6 - 1), otherKeysAndValues.unsafe_getI64(keyIndex * 3 - 2))
            )
        }
        result.shar__rc_use()
        return result

attach Dict to AArray

attach Dict to Dict
