module STD

//@The file system object type.
export enum FSOType
    block // block device
    char // character device
    dir // directory
    pipe // named pipe
    link // symbolic link
    file // regular file
    socket // UNIX domain socket
    unknown // unknown

//@Type to store information about file system objects.
export type FSObject
    name       String
    type       FSOType
    subObjects <>Array // <>[FSObject]

#override(STD)
def dump(object FSObject, level Int) String
    const levelSpaces String = "  ".repeatPart(level)
    var result String = levelSpaces + "Type: STD::FSObject = {name: " + object.name~() + ", type: "
    var typeString String = ""
    eSwitch object.type~()
    case block
        typeString = "block device"
    case char
        typeString = "character device"
    case dir
        typeString = "directory"
    case pipe
        typeString = "named pipe"
    case link
        typeString = "symbolic link"
    case file
        typeString = "regular file"
    case socket
        typeString = "UNIX domain socket"
    case unknown
        typeString = "unknown"
    result += typeString + "}"
    if object.type~().enumToInt() == FSOType[dir].enumToInt()
        const subObjects <>Array = object.subObjects~()
        if subObjects.nothing?()
            result += " [!]"
        elif subObjects.empty?()
            result += " []"
        else
            result += " [\n"
            parse _, subObject FSObject = subObjects
                result += subObject.dump(level + 1)
            result += levelSpaces + "]"
    result += "\n"
    return result
