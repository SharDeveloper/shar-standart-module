module STD

//@Members of this group are types whose objects can be represented as an array of bits.
//@The bits form a sequence.
//@Bits form a sequence that has a beginning and an end.
//@Any bit have a sequential number called "index".
//@The index of the bits at the beginning of the container is 0, the index of the remaining bits is calculated by the formula: index of the previous bit + 1.
//@If in one of the functions: "STD::shar__sugar__and", "STD::shar__sugar__or", "STD::shar__sugar__xor", the first argument of the function is an object whose type is a member of the group "STD::BitArray", then these functions are performed accordingly: "bitwise and", "bitwise or", "bitwise exclusive or", over the bits of its two arguments. If the arguments of any of these functions have a different number of bits, then the argument with fewer bits is considered to have the same number of bits as the other argument, but all the missing bits are filled with zeros.
//@If in one of the functions: "STD::shar__sugar__andSet", "STD::shar__sugar__orSet", "STD::shar__sugar__xorSet", the first argument of the function is passed an object whose type is a member of the "STD::BitArray" group, then these functions perform the same as functions without the end of "Set", but the result is written to the first argument, and nothing is returned as the result. If one of the specified functions returns an error, the first argument must remain unchanged.
//@If in one of the functions: "STD::shar__sugar__shr", "STD::shar__sugar__shl", the first argument of the function is an object whose type is a member of the "STD::BitArray" group, then these functions are executed accordingly: "bitwise logical right shift", " bitwise logical left shift", shifting the bits of the first function argument by the number of times equal to the second function argument. If the right shift is performed by the number of bits equal to or greater than the number of bits in the argument, or the left shift is performed by the number of bits equal to the maximum number of bits in the argument type (if the type has a maximum), or the number of shifts is less than 0, then the function returns an error with code "enum::STD::error_outOfRange".
//@If in one of the functions: "STD::shar__sugar__shrSet", "STD::shar__sugar__shlSet", the first argument of the function is passed an object whose type is a member of the "STD::BitArray" group, then these functions perform the same as functions without the end of "Set", but the result is written to the first argument, and nothing is returned as the result. If one of the specified functions returns an error, the first argument must remain unchanged.
export group BitArray: Shar__sugar__and, Shar__sugar__xor, Shar__sugar__or, Shar__sugar__shl, Shar__sugar__shr, Shar__sugar__andSet, Shar__sugar__xorSet, Shar__sugar__orSet, Shar__sugar__shlSet, Shar__sugar__shrSet
    //@The function returns "true" if the bit with the index passed by the second function argument in the array of bits passed by the first function argument is equal to one, otherwise it returns "false".
    //@If there is no bit with the specified index, the function returns an error with the code "enum::STD::error_outOfRange".
    getBit(This, Int) Bool
    //@The function returns an object similar to the first argument to the function, but in which the bit with the index equal to the second argument of the function is 1 - if the third argument is "true", or 0 - if the third argument is "false".
    //@If there is no bit with the specified index, the function returns an error with the code "enum::STD::error_outOfRange".
    setBit$(This, Int, Bool) This
    //@The function changes the bit value from the first argument of the function, with the index equal to the second argument of the function, to 1 - if the third argument is equal to "true", or 0 - if the third argument is equal to "false".
    //@If there is no bit with the specified index, the function returns an error with the code "enum::STD::error_outOfRange" and the arguments remain unchanged.
    setBit(write This, Int, Bool)
    //@The function returns the number of bits in its argument.
    //@The function cannot return any errors.
    bitsCount~(This) Int
    //@The function returns an object similar to its first argument, but in which all ones are replaced with zeros and zeros are replaced with ones.
    not(This) This
