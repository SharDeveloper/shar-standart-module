module STD

//@Members of the "STD::Set" group are types whose objects contain zero or more objects (called "items"), without any order, grouped into one object, and for which operations are available to find, add, and delete an item in the object.
//@If the first argument of the "STD::shar__sugar__getItem" function is an object with a type that is a member of the "STD::Set" group, then this function searches for the item specified by the second function argument in the set and returns "true" if the item is in the set, otherwise the function returns "false".
export group Set: Iterable, Empty, Shar__sugar__getItem
    //@The function adds an item to the set.
    //@If the set already contains an added item, then the existing item is overwritten with a new one, and the function returns "true", otherwise the function returns "false".
    add(write This, ${Equal, Hashable}) Bool
    //@The function removes an item from the set, if the deleted item is in the set, the function returns "true", otherwise the function returns "false".
    remove(write This, ${Equal, Hashable}) Bool

//@A type is a set of items of the same type.
export primitive Set

//@The function creates an empty set.
#alwaysinline nothrow
export def Set() Set
    return Set.createEmpty()

#override(STD)
def shar__rc_free(set Set)
    const counter Int = set.unsafe_set_getCounter()
    if counter > 1
        set.unsafe_set_setCounter(counter - 1)
    elif counter == 1
        const itemTypeNumber Int = set.itemTypeNumber~()
        const slotsCount Int = set.unsafe_set_slotsCount()
        for :(slotIndex Int = 0) slotIndex < slotsCount; slotIndex++
            const slotAddress Int = set.unsafe_set_slotAddress(slotIndex)
            const slotLength Int = slotAddress.unsafe_getI64(0)
            if slotLength != 0
                unsafe_object(itemTypeNumber, slotAddress.unsafe_getI64(1))
                if slotLength != 1
                    const otherItems Int = slotAddress.unsafe_getI64(2)
                    for :(itemIndex Int = 0) itemIndex < slotLength - 1; itemIndex++
                        unsafe_object(itemTypeNumber, otherItems.unsafe_getI64(itemIndex))
                    otherItems.unsafe_free()
        set.unsafe_free()

#override(STD) alwaysinline
def shar__rc_use(set Set)
    const counter Int = set.unsafe_set_getCounter()
    if counter != 0
        set.unsafe_set_setCounter(counter + 1)

#override(STD)
def shar__to_const(set Set)
    if set.unsafe_set_getCounter() != 0
        set.unsafe_set_setCounter(0)
        const itemTypeNumber Int = set.itemTypeNumber~()
        const slotsCount Int = set.unsafe_set_slotsCount()
        for :(slotIndex Int = 0) slotIndex < slotsCount; slotIndex++
            const slotAddress Int = set.unsafe_set_slotAddress(slotIndex)
            const slotLength Int = slotAddress.unsafe_getI64(0)
            if slotLength != 0
                unsafe_object(itemTypeNumber, slotAddress.unsafe_getI64(1)).shar__to_const()
                const otherItems Int = slotAddress.unsafe_getI64(2)
                for :(itemIndex Int = 0) itemIndex < slotLength - 1; itemIndex++
                    unsafe_object(itemTypeNumber, otherItems.unsafe_getI64(itemIndex)).shar__to_const()

#override(STD) alwaysinline nothrow
def use?(set Set) Bool
    return set.unsafe_set_getCounter() != 1

#override(STD) alwaysinline nothrow
def constant?(set Set) Bool
    return set.unsafe_set_getCounter() == 0

#alwaysinline nothrow
def unsafe_set_slotsCount(set $Any) Int
    return set.unsafe_getI64(3)

#alwaysinline nothrow
def unsafe_set_slotAddress(set, index $Any) Int
    return set.unsafe_offsetI64(3 * index + 4)

#override(STD) nothrow
def clone(set Set) Set
    const slotsCount Int = set.unsafe_set_slotsCount()
    const memSizeI64 Int = 3 * slotsCount + 4
    const result Set = unsafe_object(Set.typeNumber~(), unsafe_malloc(memSizeI64 * 8))
    unsafe_memcpyI64(result, set, memSizeI64)
    result.unsafe_set_setCounter(1)
    const itemTypeNumber Int = result.itemTypeNumber~()
    for :(slotIndex Int = 0) slotIndex < slotsCount; slotIndex++
        const resultSlotAddress Int = result.unsafe_set_slotAddress(slotIndex)
        const slotLength Int = resultSlotAddress.unsafe_getI64(0)
        if slotLength != 0
            unsafe_use_object(itemTypeNumber, resultSlotAddress.unsafe_getI64(1))
            if slotLength != 1
                const otherItems Int = resultSlotAddress.unsafe_getI64(2)
                const otherKVMemSizeI64 Int = slotLength - 1
                for :(itemIndex Int = 0) itemIndex < otherKVMemSizeI64; itemIndex++
                    unsafe_use_object(itemTypeNumber, otherItems.unsafe_getI64(itemIndex))
                const newOtherItems Int = unsafe_malloc(otherKVMemSizeI64 * 8)
                unsafe_memcpyI64(newOtherItems, otherItems, otherKVMemSizeI64)
                resultSlotAddress.unsafe_setI64(2, newOtherItems)
    return result

#override(STD)
def dump(set Set, level Int) String
    const levelSpaces String = "  ".repeatPart(level)
    var result String = levelSpaces + "Type: STD::Set = ["
    if !set.empty?()
        result += "\n"
        parse _, item = set
            result += item.dump(level + 1)
        result += levelSpaces
    result += "]\n"
    return result

attach Set to Empty
    #alwaysinline nothrow
    def createEmpty(noread type Set) Set
        llvm
            ret [2 x i64] [i64 ##tnum##STD::Set##, i64 ptrtoint ([4 x i64]* ##llvmconst##>private unnamed_addr constant [4 x i64] zeroinitializer, align 8<## to i64)]

attach Set to Long
    #alwaysinline nothrow
    def length~(set Set) Int
        return set.unsafe_getI64(1)

attach Set to Shar__sugar__getItem
    //@If the search takes place in a non-empty set and the type of the searched item does not match the type of the already existing items, then the function returns an error with the code "enum::STD::error_invalidType".
    def shar__sugar__getItem(set Set, item ${Equal, Hashable}) Bool
        if set.empty?()
            return false
        const itemTypeNumberInSet Int = set.itemTypeNumber~()
        inthrow
            if itemTypeNumberInSet != item.typeNumber~()
                throw(enum::error_invalidType, "Invalid type.")
        const slotAddress Int = set.unsafe_set_slotAddress(item.getShortRandomizedHash() & (set.unsafe_set_slotsCount() - 1))
        const slotLength Int = slotAddress.unsafe_getI64(0)
        var result Bool = false
        if slotLength != 0
            if unsafe_equal(itemTypeNumberInSet, slotAddress.unsafe_getI64(1), itemTypeNumberInSet, item)
                result = true
            else
                const otherItems Int = slotAddress.unsafe_getI64(2)
                for :(itemIndex Int = 0) itemIndex < slotLength - 1; itemIndex++
                    if unsafe_equal(itemTypeNumberInSet, otherItems.unsafe_getI64(itemIndex), itemTypeNumberInSet, item)
                        result = true
                        end itemIndex
        return result

attach Set to Set
    //@If an item is added to a non-empty set and the type of the added item does not match the type of already existing items, the function returns an error with the code "enum::STD::error_invalidType".
    def add(write set Set, item ${Equal, Hashable}) Bool
        const itemTypeNumberInSet Int = set.itemTypeNumber~()
        inthrow
            if !(itemTypeNumberInSet == item.typeNumber~() ||  itemTypeNumberInSet == Nothing.typeNumber~())
                throw(enum::error_invalidType, "Invalid type.")
        const slotsCount Int = set.unsafe_set_slotsCount()
        const needToEnlarge Bool = set.length~() == slotsCount && slotsCount != 0x100000000
        var result Bool = false
        if needToEnlarge || set.use?()
            const newSlotsCount Int = set.empty?().select(16, needToEnlarge.select(slotsCount * 2, slotsCount))
            const newSet Set = unsafe_set_create(newSlotsCount, item.typeNumber~())
            parse _, itemInSet = set
                if itemInSet == item
                    result = true
                else
                    newSet.unsafe_set_addNotExistedItem(itemInSet)
            newSet.unsafe_set_addNotExistedItem(item)
            set = newSet
        else
            item.shar__rc_use()
            const slotAddress Int = set.unsafe_set_slotAddress(item.getShortRandomizedHash() & (set.unsafe_set_slotsCount() - 1))
            const slotLength Int = slotAddress.unsafe_getI64(0)
            if slotLength == 0
                slotAddress.unsafe_setI64(0, 1)
                slotAddress.unsafe_setI64(1, item)
            else
                try
                    result = unsafe_equal(itemTypeNumberInSet, slotAddress.unsafe_getI64(1), itemTypeNumberInSet, item)
                catch id, message
                    item.shar__rc_free()
                    throw(id, message)
                if result
                    unsafe_object(itemTypeNumberInSet, slotAddress.unsafe_getI64(1))
                    slotAddress.unsafe_setI64(1, item)
                elif slotLength > 1
                    const otherItems Int = slotAddress.unsafe_getI64(2)
                    for :(itemIndex Int = 0) itemIndex < slotLength - 1; itemIndex++
                        try
                            result = unsafe_equal(itemTypeNumberInSet, otherItems.unsafe_getI64(itemIndex), itemTypeNumberInSet, item)
                        catch id, message
                            item.shar__rc_free()
                            throw(id, message)
                        if result
                            unsafe_object(itemTypeNumberInSet, otherItems.unsafe_getI64(itemIndex))
                            otherItems.unsafe_setI64(itemIndex, item)
                            end itemIndex
                if !result
                    slotAddress.unsafe_setI64(0, slotLength + 1)
                    if slotLength == 1
                        slotAddress.unsafe_setI64(2, unsafe_malloc(8))
                    else
                        var otherItems Int = slotAddress.unsafe_getI64(2)
                        otherItems.unsafe_realloc(slotLength * 8)
                        slotAddress.unsafe_setI64(2, otherItems)
                    const otherItems Int = slotAddress.unsafe_getI64(2)
                    otherItems.unsafe_setI64(slotLength - 1, item)
            if !result
                set.unsafe_setI64(1, set.unsafe_getI64(1) + 1)
        return result

    //@If an item is deleted in a non-empty set and the type of the deleted item does not match the type of the existing items, the function returns an error with the code "enum::STD::error_invalidType".
    def remove(write set Set, item ${Equal, Hashable}) Bool
        if set.empty?()
            return false
        const itemTypeNumberInSet Int = set.itemTypeNumber~()
        inthrow
            if itemTypeNumberInSet != item.typeNumber~()
                throw(enum::error_invalidType, "Invalid type.")
        const slotsCount Int = set.unsafe_set_slotsCount()
        const slotAddress Int = set.unsafe_set_slotAddress(item.getShortRandomizedHash() & (slotsCount - 1))
        const slotLength Int = slotAddress.unsafe_getI64(0)
        var resultItemIndex Int = -1
        if slotLength != 0
            if unsafe_equal(itemTypeNumberInSet, slotAddress.unsafe_getI64(1), itemTypeNumberInSet, item)
                resultItemIndex = 0
            elif slotLength != 1
                const otherItems Int = slotAddress.unsafe_getI64(2)
                for :(itemIndex Int = 0) itemIndex < slotLength - 1; itemIndex++
                    if unsafe_equal(itemTypeNumberInSet, otherItems.unsafe_getI64(itemIndex), itemTypeNumberInSet, item)
                        resultItemIndex = itemIndex + 1
                        end itemIndex
        if resultItemIndex != -1
            if set.length~() == 1
                set = Set()
            elif !set.use?()
                set.unsafe_setI64(1, set.unsafe_getI64(1) - 1)
                slotAddress.unsafe_setI64(0, slotLength - 1)
                if resultItemIndex == 0
                    unsafe_object(itemTypeNumberInSet, slotAddress.unsafe_getI64(1))
                if slotLength != 1
                    var otherItems Int = slotAddress.unsafe_getI64(2)
                    const lastItemIndex Int = slotLength - 2
                    if resultItemIndex == 0
                        slotAddress.unsafe_setI64(1, otherItems.unsafe_getI64(lastItemIndex))
                    else
                        resultItemIndex--
                        unsafe_object(itemTypeNumberInSet, otherItems.unsafe_getI64(resultItemIndex))
                        if lastItemIndex != resultItemIndex
                            otherItems.unsafe_setI64(resultItemIndex, otherItems.unsafe_getI64(lastItemIndex))
                    if lastItemIndex == 0
                        otherItems.unsafe_free()
                    else
                        otherItems.unsafe_realloc(lastItemIndex * 8)
                        slotAddress.unsafe_setI64(2, otherItems)
            else
                const newSet Set = unsafe_set_create(set.unsafe_set_slotsCount(), itemTypeNumberInSet)
                parse _, itemInSet = set
                    if itemInSet != item
                        newSet.unsafe_set_addNotExistedItem(itemInSet)
                set = newSet
        return resultItemIndex != -1

#alwaysinline nothrow
def unsafe_set_create(slotsCount, itemTypeNumber Int) Set
    const result Set = unsafe_object(Set.typeNumber~(), unsafe_malloc(slotsCount * 24 + 32))
    result.unsafe_setI64(0, 1)
    result.unsafe_setI64(1, 0)
    result.unsafe_setI64(2, itemTypeNumber)
    result.unsafe_setI64(3, slotsCount)
    result.unsafe_offsetI64(4).unsafe_memsetI64(0, slotsCount * 3)
    return result

#nothrow
def unsafe_set_addNotExistedItem(set, item $Any)
    item.shar__rc_use()
    const slotAddress Int = set.unsafe_set_slotAddress(item.getShortRandomizedHash() & (set.unsafe_set_slotsCount() - 1))
    const slotLength Int = slotAddress.unsafe_getI64(0)
    if slotLength == 0
        slotAddress.unsafe_setI64(0, 1)
        slotAddress.unsafe_setI64(1, item)
    else
        slotAddress.unsafe_setI64(0, slotLength + 1)
        if slotLength == 1
            slotAddress.unsafe_setI64(2, unsafe_malloc(8))
        else
            var otherItems Int = slotAddress.unsafe_getI64(2)
            otherItems.unsafe_realloc(slotLength * 8)
            slotAddress.unsafe_setI64(2, otherItems)
        const otherItems Int = slotAddress.unsafe_getI64(2)
        otherItems.unsafe_setI64(slotLength - 1, item)
    set.unsafe_setI64(1, set.unsafe_getI64(1) + 1)

#alwaysinline nothrow
def unsafe_set_getCounter(set $Any) Int
    return set.unsafe_getI64(0)

#alwaysinline nothrow
def unsafe_set_setCounter(set, newCounter $Any)
    set.unsafe_setI64(0, newCounter)

attach Set to Iterable
    #alwaysinline nothrow
    def parse__init(set Set) Array
        var slotIndex Int = 0
        const slotsCount Int = set.unsafe_set_slotsCount()
        for :(loop) slotIndex < slotsCount; slotIndex++
            if set.unsafe_set_slotAddress(slotIndex).unsafe_getI64(0) != 0
                end loop
        return [slotIndex, 0]

    #alwaysinline nothrow
    def parse__predicate(set Set, index Array) Bool
        return index[0] < set.unsafe_set_slotsCount()

    #alwaysinline unsafewrite nothrow
    def parse__next(set Set, write index Array)
        const slotsCount Int = set.unsafe_set_slotsCount()
        const currentSlotIndex Int = index[0]
        const currentSlotLength Int = set.unsafe_set_slotAddress(currentSlotIndex).unsafe_getI64(0)
        const itemIndex Int = index[1] + 1
        if itemIndex < currentSlotLength
            index.put(1, itemIndex)
            return
        var slotIndex Int = currentSlotIndex + 1
        for :(loop) slotIndex < slotsCount; slotIndex++
            const slotLength Int = set.unsafe_set_slotAddress(slotIndex).unsafe_getI64(0)
            if slotLength != 0
                end loop
        index.put(0, slotIndex)
        index.put(1, 0)

    #alwaysinline nothrow
    def parse__get__key(set Set, index Array) $Any
        const slotAddress Int = set.unsafe_set_slotAddress(index[0])
        const itemIndex Int = index[1]
        const otherItems Int = slotAddress.unsafe_getI64(2)
        const result $Any = unsafe_object(set.itemTypeNumber~(), (itemIndex == 0).select(slotAddress.unsafe_getI64(1), otherItems.unsafe_getI64(itemIndex - 1)))
        result.shar__rc_use()
        return result

    #alwaysinline nothrow
    def parse__get__item(set Set, index Array) $Any
        const slotAddress Int = set.unsafe_set_slotAddress(index[0])
        const itemIndex Int = index[1]
        const otherItems Int = slotAddress.unsafe_getI64(2)
        const result $Any = unsafe_object(set.itemTypeNumber~(), (itemIndex == 0).select(slotAddress.unsafe_getI64(1), otherItems.unsafe_getI64(itemIndex - 1)))
        result.shar__rc_use()
        return result

attach Set to ItemTypeNumber
    #alwaysinline nothrow
    def itemTypeNumber~(set Set) Int
        return set.unsafe_getI64(2)
