module STD

export enum FOMode
    read
    write
    append
    readAndWriteFromBegin
    readAndWriteNew
    readAndWriteFromEnd

const fileBlockSize Int
    var result Int = 0
    const environmentBlockSize <>String = getEnvironmentVariable("SHAR_FILE_BLOCK_SIZE")
    if !environmentBlockSize.nothing?()
        result = Int.fromString(environmentBlockSize)
    if result < 4080
        result = 4194288
    return result

export type File
    name   String
    handle Int

export type FileReader
    hide file             <>File
    hide buffer           Bytes
    hide positionInBuffer Int
    hide positionInFile   Int
    hide fileSize         Int

export type FileWriter
    hide file   <>File
    hide buffer Bytes

#alwaysinline
def sharModeToCMode(sharFOMode FOMode) Int
    eSwitch sharFOMode
    case read
        return 25202
    case write
        return 25207
    case append
        return 25185
    case readAndWriteFromBegin
        return 6433650
    case readAndWriteNew
        return 6433655
    case readAndWriteFromEnd
        return 6433633

#override(STD)
def shar__rc_free(writer FileWriter)
    const counter Int = writer.unsafe_getI64(0) & 0xffffffffff
    if counter > 1
        writer.unsafe_setI64(0, (writer.unsafe_getI64(0) & 0xffffff0000000000) | (counter - 1))
    elif counter == 1
        const file File = writer.file~()
        const buffer Bytes = writer.buffer~()
        file.shar__rc_free()
        buffer.shar__rc_free()
        writer.unsafe_free()
        if !buffer.empty?()
            writeDataToFile(file, buffer.length(), buffer)
        flushFile(file)

#override(STD) alwaysinline
def shar__rc_free(file File)
    const counter Int = file.unsafe_getI64(0) & 0xffffffffff
    if counter > 1
        file.unsafe_setI64(0, (file.unsafe_getI64(0) & 0xffffff0000000000) | (counter - 1))
    elif counter == 1
        unsafe_fileHandle_closeFile(file.handle~())
        file.name~().shar__rc_free()
        file.unsafe_free()

#override(STD) cold
def clone(file File) File
    throw(const::eid_clone, "Files cannot be cloned.", nothing)

#override(STD) nothrow
def dump(file File, level Int) String
    return "  ".repeatPart(level) + "Type: STD::File(" + file.name~() + ")\n"

#override(STD) nothrow
def dump(reader FileReader, level Int) String
    return "  ".repeatPart(level) + "Type: STD::FileReader(" + reader.file~().name~() + ")\n"

#override(STD) nothrow
def dump(writer FileWriter, level Int) String
    return "  ".repeatPart(level) + "Type: STD::FileWriter(" + writer.file~().name~() + ")\n"

//@The function flushes the output buffer.
//@If the flushed was successful, then the function returns "true", otherwise "false".
#alwaysinline nothrow
export def flushFile(file File) Bool
    return unsafe_fileHandle_flush(file.handle~())

#alwaysinline nothrow
def unsafe_fileHandle_flush(handle $Any) Bool
    IR
        %##nreg##handle i64## = extractvalue {i64, i32} %0, 0
        %##nreg##handle## = inttoptr i64 %##reg##handle i64## to i8*
        %##nreg##result## = call {i64, i32} @fs__flush_file(i8* %##reg##handle##)
        ret {i64, i32} %##reg##result##

//The function flushes the output buffer and close the file.
#alwaysinline nothrow
def unsafe_fileHandle_closeFile(handle $Any)
    IR
        %##nreg##handle i64## = extractvalue {i64, i32} %0, 0
        %##nreg##handle## = inttoptr i64 %##reg##handle i64## to i8*
        %##nreg##unneeded## = call {i64, i32} @fs__close_file(i8* %##reg##handle##)
        ret {i64, i32} zeroinitializer

//@The function reads the specified number of bytes from the file into the third argument of the function and returns the number of bytes that were actually read.
//@If there is not enough space in the third argument to read the specified number of bytes, then the array of bytes in the third argument is expanded to the required size.
//@If the function has read less data than it needs, then the content of the unused data in the third argument is undefined.
//@If the specified number of bytes is less than zero, the function returns an error with the "const::STD::eid_outOfRange" code.
//@If the first argument is in several places in the program, then the function returns an error with the code "const::STD::eid_notASingleCopy".
#alwaysinline
export def readDataFromFile(file File, countOfBytes Int, write buffer Bytes) Int
    inthrow
        if file.use?()
            throw(const::eid_notASingleCopy, "Not a single copy.", nothing)
        if countOfBytes < 0
            throw(const::eid_outOfRange, "Out of range.", nothing)
    if buffer.use?()
        buffer = intToByte(0).repeat(max(countOfBytes, buffer.length()), Bytes)
    elif buffer.length() < countOfBytes
        buffer.unsafe_realloc(countOfBytes + 16)
    return unsafe_fileHandle_readDataFromFile(file.handle~(), countOfBytes, buffer)

#alwaysinline nothrow
def unsafe_fileHandle_readDataFromFile(handle, countOfBytes, buffer $Any) Int
    IR
        %##nreg##handle i64## = extractvalue {i64, i32} %0, 0
        %##nreg##handle## = inttoptr i64 %##reg##handle i64## to i8*
        %##nreg##buffer with counter and length i64## = extractvalue {i64, i32} %2, 0
        %##nreg##buffer with counter and length## = inttoptr i64 %##reg##buffer with counter and length i64## to i8*
        %##nreg##buffer## = getelementptr i8, i8* %##reg##buffer with counter and length##, i64 16
        %##nreg##result## = call {i64, i32} @fs__read_from_file(i8* %##reg##handle##, {i64, i32} %1, i8* %##reg##buffer##)
        ret {i64, i32} %##reg##result##

//@The function writes the specified number of bytes from the byte array in the third argument to the function to a file and returns the number of bytes that were actually written.
//@If the specified number of bytes is less than zero, the function returns an error with the "const::STD::eid_outOfRange" code.
//@If the first argument is in several places in the program, then the function returns an error with the code "const::STD::eid_notASingleCopy".
#alwaysinline
export def writeDataToFile(file File, countOfBytes Int, buffer Bytes) Int
    inthrow
        if file.use?()
            throw(const::eid_notASingleCopy, "Not a single copy.", nothing)
        if countOfBytes < 0
            throw(const::eid_outOfRange, "Out of range.", nothing)
    return unsafe_fileHandle_writeDataToFile(file.handle~(), countOfBytes, buffer)

#alwaysinline nothrow
def unsafe_fileHandle_writeDataToFile(handle, countOfBytes, buffer $Any) Int
    IR
        %##nreg##handle i64## = extractvalue {i64, i32} %0, 0
        %##nreg##handle## = inttoptr i64 %##reg##handle i64## to i8*
        %##nreg##buffer with counter and length i64## = extractvalue {i64, i32} %2, 0
        %##nreg##buffer with counter and length## = inttoptr i64 %##reg##buffer with counter and length i64## to i8*
        %##nreg##buffer## = getelementptr i8, i8* %##reg##buffer with counter and length##, i64 16
        %##nreg##result## = call {i64, i32} @fs__write_to_file(i8* %##reg##handle##, {i64, i32} %1, i8* %##reg##buffer##)
        ret {i64, i32} %##reg##result##

//@The function returns the current position in the file.
//@If the function was unable to get the current file position, then "Nothing" is returned as a result.
#alwaysinline nothrow
export def getFilePosition(file File) <>Int
    return unsafe_fileHandle_getFilePosition(file.handle~())

#alwaysinline nothrow
def unsafe_fileHandle_getFilePosition(handle $Any) <>Int
    IR
        %##nreg##handle i64## = extractvalue {i64, i32} %0, 0
        %##nreg##handle## = inttoptr i64 %##reg##handle i64## to i8*
        %##nreg##result## = call {i64, i32} @fs__get_position_in_file(i8* %##reg##handle##)
        ret {i64, i32} %##reg##result##

//@The function sets the current position in the file.
//@If the setting was successful, then the function returns "true", otherwise "false".
//@If the position is less than zero, the function returns an error with the "const::STD::eid_outOfRange" code.
//@If the first argument is in several places in the program, then the function returns an error with the code "const::STD::eid_notASingleCopy"
#alwaysinline
export def setFilePosition(file File, position Int) Bool
    inthrow
        if file.use?()
            throw(const::eid_notASingleCopy, "Not a single copy.", nothing)
        if position < 0
            throw(const::eid_outOfRange, "Out of range.", nothing)
    return unsafe_fileHandle_setFilePosition(file.handle~(), position)

#alwaysinline nothrow
def unsafe_fileHandle_setFilePosition(file, position $Any) Bool
    IR
        %##nreg##handle i64## = extractvalue {i64, i32} %0, 0
        %##nreg##handle## = inttoptr i64 %##reg##handle i64## to i8*
        %##nreg##result## = call {i64, i32} @fs__set_position_in_file(i8* %##reg##handle##, {i64, i32} %1)
        ret {i64, i32} %##reg##result##

//@The function opens the file for reading it in parts.
//@If the file can not be opened, the function returns "nothing".
export def FileReader(fileName String) <>FileReader
    const fileSize <>Int = getFileSize(fileName)
    if fileSize.nothing?()
        return nothing
    const file <>File = openFile(fileName, FOMode[read])
    if file.nothing?()
        return nothing
    return FileReader{{
        file             : file,
        buffer           : Bytes(),
        positionInBuffer : 0,
        positionInFile   : 0,
        fileSize         : fileSize
    }}

attach FileReader to Reader
    def readData(write reader FileReader, noread type $BinarySerializable) <>$BinarySerializable
        if reader.use?()
            throw(const::eid_notASingleCopy, "Not a single copy.", nothing)
        const file File = reader.file`(nothing)
        var buffer Bytes = reader.buffer`(Bytes())
        var positionInBuffer Int = reader.positionInBuffer~()
        var positionInFile Int = reader.positionInFile~()
        const fileSize Int = reader.fileSize~()
        if fileSize == positionInFile && positionInBuffer == buffer.length()
            reader.file`(file)
            reader.buffer`(buffer)
            return nothing
        if positionInBuffer == buffer.length()
            const remainDataSize Int = fileSize - positionInFile
            const deltaDataSize Int = buffer.length() - remainDataSize
            if deltaDataSize > 0
                buffer.delete(remainDataSize, deltaDataSize)
            elif deltaDataSize < 0 && positionInBuffer == 0
                buffer = unsafe_bytes_createDummy(min(const::fileBlockSize, remainDataSize))
            if readDataFromFile(file, buffer.length(), buffer) != buffer.length()
                reader = FileReader{{
                    file             : file,
                    buffer           : buffer,
                    positionInBuffer : positionInBuffer,
                    positionInFile   : positionInFile,
                    fileSize         : fileSize
                }}
                throw(const::eid_cantReadFromFile, "Error reading from file.", nothing)
            positionInFile += buffer.length()
            positionInBuffer = 0
        var result $BinarySerializable = 0
        for :(loop)
            try
                result = type.deserialize(buffer, positionInBuffer)
                end loop
            catch id, message, errorData
                if id != const::eid_outOfRange
                    reader = FileReader{{
                        file             : file,
                        buffer           : buffer,
                        positionInBuffer : positionInBuffer,
                        positionInFile   : positionInFile,
                        fileSize         : fileSize
                    }}
                    throw(id, message, errorData)
                const remainDataSize Int = fileSize - positionInFile
                if remainDataSize <= 0
                    throw(id, message, errorData)
                const addedBufferSize Int = min(buffer.length(), remainDataSize)
                var addedBuffer Bytes = unsafe_bytes_createDummy(addedBufferSize)
                if readDataFromFile(file, addedBufferSize, addedBuffer) != addedBufferSize
                    reader = FileReader{{
                        file             : file,
                        buffer           : buffer,
                        positionInBuffer : positionInBuffer,
                        positionInFile   : positionInFile,
                        fileSize         : fileSize
                    }}
                    throw(const::eid_cantReadFromFile, "Error reading from file.", nothing)
                positionInFile += addedBufferSize
                if positionInBuffer != 0
                    buffer.delete(0, positionInBuffer)
                    positionInBuffer = 0
                buffer += addedBuffer
        reader.file`(file)
        reader.buffer`(buffer)
        reader.positionInBuffer`(positionInBuffer)
        reader.positionInFile`(positionInFile)
        return result

    #alwaysinline nothrow
    def end?(reader FileReader) Bool
        const bufferSize Int = reader.buffer~().length()
        const positionInBuffer Int = reader.positionInBuffer~()
        const positionInFile Int = reader.positionInFile~()
        const fileSize Int = reader.fileSize~()
        return fileSize == positionInFile && positionInBuffer == bufferSize

//@The function opens a file for writing data in parts.
//@If the file does not exist, then it will be created.
//@If the file could not be created or opened, the function returns "nothing".
//@If the second argument of the function is "true" and the file exists, then the data will be written to the end of the existing ones.
//@If the second argument of the function is "false" and the file exists, then all existing data from the file will be deleted.
export def FileWriter(fileName String, append Bool) <>FileWriter
    const file <>File = openFile(fileName, append.select(FOMode[append], FOMode[write]))
    if file.nothing?()
        return nothing
    return FileWriter{{
        file  : file,
        buffer : Bytes()
    }}

attach FileWriter to Writer
    def write(write writer FileWriter, data $BinarySerializable)
        if writer.use?()
            throw(const::eid_notASingleCopy, "Not a single copy.", nothing)
        const file File = writer.file`(nothing)
        var buffer Bytes = writer.buffer`(Bytes())
        const oldBufferSize Int = buffer.length()
        data.serialize(buffer)
        if buffer.length() >= const::fileBlockSize
            if writeDataToFile(file, buffer.length(), buffer) != buffer.length()
                buffer.delete(oldBufferSize, buffer.length() - oldBufferSize)
                writer = FileWriter{file : file, buffer : buffer}
                throw(const::eid_cantWriteToFile, "Error writing to file.", nothing)
            buffer.delete(0, buffer.length())
        writer.file`(file)
        writer.buffer`(buffer)

    def flush(write writer FileWriter)
        if writer.use?()
            throw(const::eid_notASingleCopy, "Not a single copy.", nothing)
        const file File = writer.file`(nothing)
        var buffer Bytes = writer.buffer`(Bytes())
        if !buffer.empty?()
            if writeDataToFile(file, buffer.length(), buffer) != buffer.length()
                writer = FileWriter{file : file, buffer : buffer}
                throw(const::eid_cantWriteToFile, "Error writing to file.", nothing)
            buffer.delete(0, buffer.length())
        flushFile(file)
        writer.file`(file)
        writer.buffer`(buffer)
