module STD

//@The function ends the program.
//@A program closed with this function is considered complete without errors.
//@The call to this function can be catch using the "try" operator. (id - eid_noError)
#cold
export def exit()
    throw(const::eid_noError, "", nothing)

//@The function ends the program.
//@A program closed with this function is considered to have ended with an error.
//@The call to this function can be catch using the "try" operator. (id - eid_fail)
#cold
export def fail()
    throw(const::eid_fail, "", nothing)

//@The function gets the command line argument by index.
//@The argument, at index 0, is the name of the program's executable file.
//@If there is no argument with the specified index, then the function returns an error with the code "const::STD::eid_outOfRange".
#alwaysinline
export def getCMDLineArgument(index Int) String
    const result <>String = unsafe_os_getCMDLineArgument(index)
    inthrow
        if result.nothing?()
            throw(const::eid_outOfRange, "Out of range.", nothing)
    return result

#alwaysinline nothrow
def unsafe_os_getCMDLineArgument(index $Any) <>String
    IR
        %##nreg##result## = call {i64, i32} @env__get_cmd_argument({i64, i32} %0)
        ret {i64, i32} %##reg##result##

//@The function returns the number of command line arguments, including the name of the program executable.
#alwaysinline nothrow
export def getCMDLineArgumentsCount() Int
    IR
        %##nreg##result## = call {i64, i32} @env__get_cmd_arguments_count()
        ret {i64, i32} %##reg##result##

//@The function returns the value of the environment variable.
//@If it was not possible to get the value of the variable with the specified name, the function returns "Nothing".
#alwaysinline nothrow
export def getEnvironmentVariable(variableName String) <>String
    IR
        %##nreg##result## = call {i64, i32} @env__get_variable({i64, i32} %0)
        ret {i64, i32} %##reg##result##

//@The function gets a string from the command line.
//@If it was not possible to get the string, the function returns "Nothing".
#alwaysinline nothrow
export def getStringFromCMDLine() <>String
    IR
        %##nreg##result## = call {i64, i32} @env__get_string_from_cmd_line()
        ret {i64, i32} %##reg##result##

//@The function returns the name of the platform on which the program was launched.
#alwaysinline nothrow
export def getPlatformName() String
    IR
        %##nreg##result## = call {i64, i32} @env__get_platform_name()
        ret {i64, i32} %##reg##result##

//@The function executes the command in the host environment.
//@If the execution was successful, then the function returns "true", otherwise "false".
#alwaysinline nothrow
export def execute(command String) Bool
    IR
        %##nreg##result## = call {i64, i32} @env__execute_command({i64, i32} %0)
        ret {i64, i32} %##reg##result##

//@The function deletes the file at the specified path.
//@If the delete was successful, then the function returns "true", otherwise "false".
#alwaysinline nothrow
export def deleteFile(fileName String) Bool
    IR
        %##nreg##result## = call {i64, i32} @fs__delete_file({i64, i32} %0)
        ret {i64, i32} %##reg##result##

//@The function deletes the empty directory at the specified path.
//@If the delete was successful, then the function returns "true", otherwise "false".
#alwaysinline nothrow
export def deleteEmptyDirectory(directoryName String) Bool
    IR
        %##nreg##result## = call {i64, i32} @fs__delete_empty_dir({i64, i32} %0)
        ret {i64, i32} %##reg##result##

//@If the file exists at the specified path, the function returns "true" otherwise "false".
#alwaysinline nothrow
export def fileExist?(fileName String) Bool
    IR
        %##nreg##result## = call {i64, i32} @fs__file_is_exist({i64, i32} %0)
        ret {i64, i32} %##reg##result##

//@If the directory exists at the specified path, the function returns "true" otherwise "false".
#alwaysinline nothrow
export def directoryExist?(directoryName String) Bool
    IR
        %##nreg##result## = call {i64, i32} @fs__dir_is_exist({i64, i32} %0)
        ret {i64, i32} %##reg##result##

//@The function opens the file in the specified mode.
//@If the file can not be opened, the function returns "Nothing".
//@If the mode is different from the below, the function returns an error with the code "const::STD::eid_invalidFileMode".
//@Modes:
//@FOMode[read] - opens a file for reading. The file must exist.
//@FOMode[write] - opens a file for writing. If the file does not exist, then the function will create it, if the file already exists, then its contents will be deleted.
//@FOMode[append] - opens a file for writing. If the file does not exist, then the function will create it, if the file already exists, then writing will be made to the end of the file.
//@FOMode[readAndWriteFromBegin] - opens a file for reading and writing. The file must exist. The read and write position is at the beginning.
//@FOMode[readAndWriteNew] - opens a file for reading and writing. If the file does not exist, then the function will create it, if the file already exists, then its contents will be deleted.
//@FOMode[readAndWriteFromEnd] - opens a file for reading and writing. If the file does not exist, then the function will create it, if the file already exists, the read and write position is at the end.
#alwaysinline
export def openFile(fileName String, mode FOMode) <>File
    const cMode Int = sharModeToCMode(mode)
    const handle <>Int = unsafe_os_openFile(fileName, cMode)
    return handle.nothing?().select(nothing, File{{
        name   : fileName,
        handle : handle
    }})

#alwaysinline nothrow
def unsafe_os_openFile(fileName, mode $Any) <>Int
    IR
        %##nreg##file pointer## = alloca i8*, align 8
        %##nreg##mode i64## = extractvalue {i64, i32} %1, 0
        %##nreg##mode## = trunc i64 %##reg##mode i64## to i32
        %##nreg##allOk## = call i1 @fs__open_file({i64, i32} %0, i32 %##reg##mode##, i8** %##reg##file pointer##)
        br i1 %##reg##allOk##, label %##reg##allOk label##, label %##reg##end label##
        ##nreg##allOk label##:
        %##nreg##file## = load i8*, i8** %##reg##file pointer##, align 8
        %##nreg##file i64## = ptrtoint i8* %##reg##file## to i64
        %##nreg##result## = insertvalue {i64, i32} {i64 0, i32 ##tnum##STD::Int##}, i64 %##reg##file i64##, 0
        ret {i64, i32} %##reg##result##
        ##nreg##end label##:
        ret {i64, i32} zeroinitializer

//@The function gets the size of the file at the specified path.
//@If the function was unable to get the file size, then "Nothing" is returned as a result.
#alwaysinline nothrow
export def getFileSize(fileName String) <>Int
    IR
        %##nreg##result## = call {i64, i32} @fs__get_file_size({i64, i32} %0)
        ret {i64, i32} %##reg##result##

//@The function renames the file.
//@If the renaming was successful, then the function returns "true", otherwise "false".
#alwaysinline nothrow
export def renameFile(oldName, newName String) Bool
    IR
        %##nreg##result## = call {i64, i32} @fs__file_rename({i64, i32} %0, {i64, i32} %1)
        ret {i64, i32} %##reg##result##

//@The function loads the entire file into an array of bytes.
//@If the load was not successful, then the function returns "Nothing".
#alwaysinline nothrow
export def loadFile(fileName String) <>Bytes
    const file <>File = openFile(fileName, FOMode[read])
    if file.nothing?()
        return nothing
    const fileSize <>Int = getFileSize(fileName)
    if fileSize.nothing?()
        return nothing
    var result Bytes = Bytes()
    if readDataFromFile(file, fileSize, result) != fileSize
        return nothing
    return result

//@The function saves an array of bytes to a file.
//@If the save was successful, then the function returns "true", otherwise "false".
#alwaysinline nothrow
export def saveToFile(fileName String, bytes Bytes) Bool
    const file <>File = openFile(fileName, FOMode[write])
    return !file.nothing?() && writeDataToFile(file, bytes.length(), bytes) == bytes.length()

//@The function loads the library from a file and, in case of successful loading, returns a number that can be used to work with the loaded library.
#alwaysinline nothrow
export def unsafe_loadLib(fileName String) <>Int
    IR
        %##nreg##result## = call {i64, i32} @lib__load({i64, i32} %0)
        ret {i64, i32} %##reg##result##

//@The function loads an object from the library and, if the load is successful, returns a number that can be used to work with the loaded object.
#alwaysinline nothrow
export def unsafe_getLibObject(lib <>Int, objectName String) <>Int
    if lib.nothing?()
        return nothing
    return unsafe_getLibObjectIR(lib, objectName)

#alwaysinline nothrow
def unsafe_getLibObjectIR(lib, objectName $Any) <>Int
    IR
        %##nreg##result## = call {i64, i32} @lib__get_object_address({i64, i32} %0, {i64, i32} %1)
        ret {i64, i32} %##reg##result##

//@The function unloads the library. If the unloading was successful, the function returns "true", otherwise "false".
#alwaysinline nothrow
export def unsafe_unloadLib(lib <>Int) Bool
    if lib.nothing?()
        return false
    return unsafe_unloadLibIR(lib)

#alwaysinline nothrow
def unsafe_unloadLibIR(lib $Any) Bool
    IR
        %##nreg##result## = call {i64, i32} @lib__unload_lib({i64, i32} %0)
        ret {i64, i32} %##reg##result##

//@The function returns the contents of the directory as a array of STD::FSObject.
//@Directories "." and ".." are not added to the returned array.
//@If the second argument of the function is "true", then in the directories from the resulting array, information about the contents of these directories will be recursively filled.
//@If it was not possible to find out information about the directory, the function returns "nothing".
export def listDirectory(directoryName String, recursive Bool) <>Array
    const directory <>Int = unsafe_os_openDirectory(directoryName)
    if directory.nothing?()
        return nothing
    var result Array = []
    for :(loop)
        var sexyType Int = 0
        const objectName <>String = unsafe_os_readDirectory(directory, sexyType)
        if objectName.nothing?()
            end loop
        var type FSOType = FSOType[unknown]
        switch sexyType
        case 0
            type = FSOType[block]
        case 1
            type = FSOType[char]
        case 2
            type = FSOType[dir]
        case 3
            type = FSOType[pipe]
        case 4
            type = FSOType[link]
        case 5
            type = FSOType[file]
        case 6
            type = FSOType[socket]
        case 255
            type = FSOType[unknown]
        default
            unreachable()
        var subObjects <>Array = nothing
        eSwitch type
        case dir
            if recursive
                subObjects = listDirectory((directoryName[directoryName.length() - 1] == '/').select(directoryName, directoryName + "/") + objectName, true)
        case block, char, pipe, link, file, socket, unknown
            nothing
        result.addItem({
            FSObject{
                name       : objectName,
                type       : type,
                subObjects : subObjects
            }
        })
    unsafe_os_closeDirectory(directory)
    return result

#alwaysinline nothrow
def unsafe_os_openDirectory(directoryName $Any) <>Int
    IR
        %##nreg##result## = call {i64, i32} @fs__open_dir({i64, i32} %0)
        ret {i64, i32} %##reg##result##

#alwaysinline nothrow unsafewrite
def unsafe_os_readDirectory(directory, write type $Any) <>String
    IR
        %##nreg##result## = call {i64, i32} @fs__read_dir({i64, i32} %0, {i64, i32}* %1)
        ret {i64, i32} %##reg##result##

#alwaysinline nothrow
def unsafe_os_closeDirectory(directory $Any)
    IR
        call void @fs__close_dir({i64, i32} %0)
        ret {i64, i32} zeroinitializer

//@The function creates a directory.
//@If creation was successful, the function returns "true", otherwise "false".
//@If the second argument of the function is equal to "true", then if the created directory already exists, the function will return "true".
#alwaysinline nothrow
export def makeDirectory(directoryName String, ignoreExistedDirectory Bool) Bool
    IR
        %##nreg##result## = call {i64, i32} @fs__make_dir({i64, i32} %0, {i64, i32} %1)
        ret {i64, i32} %##reg##result##

//@The function returns the system language code according to the "ISO 639-1" standard
#alwaysinline nothrow
export def osLanguage() String
    const langCode Int = unsafe_os_getLangCode()
    const result String = unsafe_string_createDummy(2)
    result.unsafe_setI32(4, langCode & 0xff)
    result.unsafe_setI32(5, langCode >> 8)
    return result

#alwaysinline nothrow
def unsafe_os_getLangCode() Int
    IR
        %##nreg##result## = call {i64, i32} @locale__lang_code()
        ret {i64, i32} %##reg##result##

//@The function returns the number of processor cores.
#alwaysinline nothrow
export def getCPUCoresNumber() Int
    IR
        %##nreg##result## = call {i64, i32} @env__get_cpu_cores_number()
        ret {i64, i32} %##reg##result##

//@The function returns the number of running threads.
export def getActiveThreadsNumber() Int
    IR
        %##nreg##result## = call {i64, i32} @get_number_of_threads()
        ret {i64, i32} %##reg##result##

//@The function writes the name of the directory used to store temporary files.
#alwaysinline nothrow
export def getTmpDirName() String
    IR
        %##nreg##result## = call {i64, i32} @fs__get_tmp_dir_name()
        ret {i64, i32} %##reg##result##
