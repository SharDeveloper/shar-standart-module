module STD

//@Boolean data type implementation.
export primitive Bool

attach Bool to Independent

#override(STD) nothrow
def dump(bool Bool, level Int) String
    return "  ".repeatPart(level) + "Type: STD::Bool = " + bool.toString() + "\n"

attach Bool to Equal

attach Bool to Shar__sugar__equal
    #alwaysinline nothrow
    def shar__sugar__equal(boolean1, boolean2 Bool) Bool
        IR
            %##nreg##boolean1 i64## = extractvalue {i64, i32} %0, 0
            %##nreg##boolean2 i64## = extractvalue {i64, i32} %1, 0
            %##nreg##boolean1## = trunc i64 %##reg##boolean1 i64## to i1
            %##nreg##boolean2## = trunc i64 %##reg##boolean2 i64## to i1
            %##nreg##result i1## = icmp eq i1 %##reg##boolean1##, %##reg##boolean2##
            %##nreg##result i64## = zext i1 %##reg##result i1## to i64
            %##nreg##result## = insertvalue {i64, i32} {i64 0, i32 ##tnum##STD::Bool##}, i64 %##reg##result i64##, 0
            ret {i64, i32} %##reg##result##

attach Bool to Shar__sugar__notEqual
    #alwaysinline nothrow
    def shar__sugar__notEqual(boolean1, boolean2 Bool) Bool
        IR
            %##nreg##boolean1 i64## = extractvalue {i64, i32} %0, 0
            %##nreg##boolean2 i64## = extractvalue {i64, i32} %1, 0
            %##nreg##boolean1## = trunc i64 %##reg##boolean1 i64## to i1
            %##nreg##boolean2## = trunc i64 %##reg##boolean2 i64## to i1
            %##nreg##result i1## = icmp ne i1 %##reg##boolean1##, %##reg##boolean2##
            %##nreg##result i64## = zext i1 %##reg##result i1## to i64
            %##nreg##result## = insertvalue {i64, i32} {i64 0, i32 ##tnum##STD::Bool##}, i64 %##reg##result i64##, 0
            ret {i64, i32} %##reg##result##

attach Bool to Shar__sugar__neg
    //@The function changes the value of its argument to the opposite.
    #alwaysinline nothrow
    def shar__sugar__neg(boolean Bool) Bool
        IR
            %##nreg##boolean i64## = extractvalue {i64, i32} %0, 0
            %##nreg##result i64## = xor i64 %##reg##boolean i64##, 1
            %##nreg##result## = insertvalue {i64, i32} {i64 0, i32 ##tnum##STD::Bool##}, i64 %##reg##result i64##, 0
            ret {i64, i32} %##reg##result##

attach Bool to Shar__sugar__and
    //@The function performs a logical "and" on its two arguments.
    #alwaysinline nothrow
    def shar__sugar__and(boolean1, boolean2 Bool) Bool
        IR
            %##nreg##boolean1## = extractvalue {i64, i32} %0, 0
            %##nreg##boolean2## = extractvalue {i64, i32} %1, 0
            %##nreg##result i64## = and i64 %##reg##boolean1##, %##reg##boolean2##
            %##nreg##result## = insertvalue {i64, i32} {i64 0, i32 ##tnum##STD::Bool##}, i64 %##reg##result i64##, 0
            ret {i64, i32} %##reg##result##

attach Bool to Shar__sugar__xor
    //@The function performs a logical "exclusive or" on its two arguments.
    #alwaysinline nothrow
    def shar__sugar__xor(boolean1, boolean2 Bool) Bool
        IR
            %##nreg##boolean1## = extractvalue {i64, i32} %0, 0
            %##nreg##boolean2## = extractvalue {i64, i32} %1, 0
            %##nreg##result i64## = xor i64 %##reg##boolean1##, %##reg##boolean2##
            %##nreg##result## = insertvalue {i64, i32} {i64 0, i32 ##tnum##STD::Bool##}, i64 %##reg##result i64##, 0
            ret {i64, i32} %##reg##result##

attach Bool to Shar__sugar__or
    //@The function performs a logical "or" on its two arguments.
    #alwaysinline nothrow
    def shar__sugar__or(boolean1, boolean2 Bool) Bool
        IR
            %##nreg##boolean1## = extractvalue {i64, i32} %0, 0
            %##nreg##boolean2## = extractvalue {i64, i32} %1, 0
            %##nreg##result i64## = or i64 %##reg##boolean1##, %##reg##boolean2##
            %##nreg##result## = insertvalue {i64, i32} {i64 0, i32 ##tnum##STD::Bool##}, i64 %##reg##result i64##, 0
            ret {i64, i32} %##reg##result##

attach Bool to StringWriter
    #alwaysinline nothrow
    def toString(boolean Bool) String
        return boolean.select("true", "false")

#override(STD) alwaysinline nothrow
def print(boolean Bool)
    boolean.select("true", "false").print()

#override(STD) alwaysinline nothrow
def println(boolean Bool)
    boolean.select("true", "false").println()

#override(STD) nothrow
def printAsError(boolean Bool)
    boolean.select("true", "false").printAsError()

#override(STD) nothrow
def printlnAsError(boolean Bool)
    boolean.select("true", "false").printlnAsError()

attach Bool to StringReader
    #alwaysinline
    def fromString(noread type Bool, string String) Bool
        if string == "true"
            return true
        if string == "false"
            return false
        throw(const::eid_readFromString, "Reading from the string caused an error.", nothing)

attach Bool to Hashable
    #alwaysinline nothrow
    def getHash(boolean Bool) Int
        return boolean.select(1, 0)

    #alwaysinline nothrow
    def getRandomizedHash(boolean Bool) Int
        return boolean.select(1, 0) ^ const::staticRandomNumber

attach Bool to BinarySerializable
    #alwaysinline nothrow
    def serialize(bool Bool, write bytes Bytes)
        bytes.addItem(intToByte(bool.select(1, 0)))

    #alwaysinline
    def deserialize(noread type Bool, bytes Bytes, write position Int) Bool
        const result Bool = bytes[position] != intToByte(0)
        position++
        return result

attach Bool to Multithreaded
    #alwaysinline nothrow
    def prepareForThreads(bool Bool) Bool
        return bool
