module STD

//@Members of the "STD::Ordered" group are types, the objects of which are ordered from smallest to largest and vice versa.
//@If the first argument of the "STD::shar__sugar__less" function is an object with a type that is a member of the "STD::Ordered" group, then this function returns "true" if the first argument is less than the second, otherwise the function returns "false".
//@If the first argument of the "STD::shar__sugar__great" function is an object with a type that is a member of the "STD::Ordered" group, then this function returns "true" if the first argument is greater than the second, otherwise the function returns "false".
//@If the first argument of the "STD::shar__sugar__lessOrEqual" function is an object with a type that is a member of the "STD::Ordered" group, then this function returns "true" if the first argument is less than or equal to the second, otherwise the function returns "false".
//@If the first argument of the "STD::shar__sugar__greatOrEqual" function is an object with a type that is a member of the "STD::Ordered" group, then this function returns "true" if the first argument is greater than or equal to the second, otherwise the function returns "false".
export group Ordered: Equal, Shar__sugar__less, Shar__sugar__great, Shar__sugar__lessOrEqual, Shar__sugar__greatOrEqual

//@If the first argument of the function is not less than the second, but less than the third, then the function returns "true", otherwise the function returns "false".
#this(Ordered) alwaysinline
export def inRange?(a, begin, end This) Bool
    return a >= begin && a < end

//@The function returns the largest of its arguments.
#this(Ordered) alwaysinline
export def max(a, b This) This
    return (a > b).select(a, b)

//@The function returns the smaller of its arguments.
#this(Ordered) alwaysinline
export def min(a, b This) This
    return (a < b).select(a, b)
