module STD

//@Objects of type "STD::Map" are associative arrays, all keys of which are of the same type, as well as values of the same type.
export primitive Map

//@The function creates an empty associative array of the "STD::Map" type.
//@The function returns a constant.
#alwaysinline nothrow
export def Map() Map
    return Map.createEmpty()

#override(STD)
def shar__rc_free(map Map)
    const counter Int = map.unsafe_map_getCounter()
    if counter > 1
        map.unsafe_map_setCounter(counter - 1)
    elif counter == 1
        const keyTypeNumber Int = map.keyTypeNumber()
        const valueTypeNumber Int = map.valueTypeNumber()
        const slotsCount Int = map.unsafe_map_slotsCount()
        for :(slotIndex Int = 0) slotIndex < slotsCount; slotIndex++
            const slotAddress Int = map.unsafe_map_slotAddress(slotIndex)
            const slotLength Int = slotAddress.unsafe_getI64(0)
            if slotLength != 0
                unsafe_object(keyTypeNumber, slotAddress.unsafe_getI64(1))
                unsafe_object(valueTypeNumber, slotAddress.unsafe_getI64(2))
                if slotLength != 1
                    const otherKeysAndValues Int = slotAddress.unsafe_getI64(3)
                    for :(keyIndex Int = 0) keyIndex < (slotLength - 1) * 2; keyIndex += 2
                        unsafe_object(keyTypeNumber, otherKeysAndValues.unsafe_getI64(keyIndex))
                        unsafe_object(valueTypeNumber, otherKeysAndValues.unsafe_getI64(keyIndex + 1))
                    otherKeysAndValues.unsafe_free()
        map.unsafe_free()

#override(STD) alwaysinline
def shar__rc_use(map Map)
    const counter Int = map.unsafe_map_getCounter()
    if counter != 0
        map.unsafe_map_setCounter(counter + 1)

#override(STD)
def shar__to_const(map Map)
    if map.unsafe_map_getCounter() != 0
        map.unsafe_map_setCounter(0)
        const keyTypeNumber Int = map.keyTypeNumber()
        const valueTypeNumber Int = map.valueTypeNumber()
        const slotsCount Int = map.unsafe_map_slotsCount()
        for :(slotIndex Int = 0) slotIndex < slotsCount; slotIndex++
            const slotAddress Int = map.unsafe_map_slotAddress(slotIndex)
            const slotLength Int = slotAddress.unsafe_getI64(0)
            if slotLength != 0
                unsafe_object(keyTypeNumber, slotAddress.unsafe_getI64(1)).shar__to_const()
                unsafe_object(valueTypeNumber, slotAddress.unsafe_getI64(2)).shar__to_const()
                const otherKeysAndValues Int = slotAddress.unsafe_getI64(3)
                for :(keyIndex Int = 0) keyIndex < (slotLength - 1) * 2; keyIndex += 2
                    unsafe_object(keyTypeNumber, otherKeysAndValues.unsafe_getI64(keyIndex)).shar__to_const()
                    unsafe_object(valueTypeNumber, otherKeysAndValues.unsafe_getI64(keyIndex + 1)).shar__to_const()

#override(STD) alwaysinline nothrow
def use?(map Map) Bool
    return map.unsafe_map_getCounter() != 1

#override(STD) alwaysinline nothrow
def constant?(map Map) Bool
    return map.unsafe_map_getCounter() == 0

#alwaysinline nothrow
def unsafe_map_slotsCount(map $Any) Int
    return map.unsafe_getI64(3)

#alwaysinline nothrow
def unsafe_map_slotAddress(map, index $Any) Int
    return map.unsafe_offsetI64(4 * (index + 1))

#override(STD) nothrow
def clone(map Map) Map
    const slotsCount Int = map.unsafe_map_slotsCount()
    const memSizeI64 Int = 4 * (slotsCount + 1)
    const result Map = unsafe_object(Map.typeNumber(), unsafe_malloc(memSizeI64 * 8))
    unsafe_memcpyI64(result, map, memSizeI64)
    result.unsafe_map_setCounter(1)
    const keyTypeNumber Int = result.keyTypeNumber()
    const valueTypeNumber Int = result.valueTypeNumber()
    for :(slotIndex Int = 0) slotIndex < slotsCount; slotIndex++
        const resultSlotAddress Int = result.unsafe_map_slotAddress(slotIndex)
        const slotLength Int = resultSlotAddress.unsafe_getI64(0)
        if slotLength != 0
            unsafe_use_object(keyTypeNumber, resultSlotAddress.unsafe_getI64(1))
            unsafe_use_object(valueTypeNumber, resultSlotAddress.unsafe_getI64(2))
            if slotLength != 1
                const otherKeysAndValues Int = resultSlotAddress.unsafe_getI64(3)
                const otherKVMemSizeI64 Int = (slotLength - 1) * 2
                for :(keyIndex Int = 0) keyIndex < otherKVMemSizeI64; keyIndex += 2
                    unsafe_use_object(keyTypeNumber, otherKeysAndValues.unsafe_getI64(keyIndex))
                    unsafe_use_object(valueTypeNumber, otherKeysAndValues.unsafe_getI64(keyIndex + 1))
                const newOtherKV Int = unsafe_malloc(otherKVMemSizeI64 * 8)
                unsafe_memcpyI64(newOtherKV, otherKeysAndValues, otherKVMemSizeI64)
                resultSlotAddress.unsafe_setI64(3, newOtherKV)
    return result

#override(STD)
def dump(map Map, level Int) String
    const levelSpaces String = "  ".repeatPart(level)
    var result String = levelSpaces + "Type: STD::Map = ["
    if !map.empty?()
        result += "\n"
        parse key, value = map
            result += levelSpaces + "  key:\n" + key.dump(level + 2) + levelSpaces + "  value:\n" + value.dump(level + 2)
        result += levelSpaces
    result += "]\n"
    return result

attach Map to Empty
    //@The function returns a constant.
    #alwaysinline nothrow
    def createEmpty(noread type Map) Map
        IR
            ret {i64, i32} {i64 ptrtoint ([4 x i64]* ##llvmconst##>private unnamed_addr constant [4 x i64] zeroinitializer, align 8<## to i64), i32 ##tnum##STD::Map##}

attach Map to Long
    #alwaysinline nothrow
    def length(map Map) Int
        return map.unsafe_getI64(1)

attach Map to Shar__sugar__getItem
    //@If the search occurs in an array and the type of the key to be found does not match the type of the existing keys, the function returns an error with the code "const::STD::eid_invalidType".
    def shar__sugar__getItem(map Map, key ${Equal, Hashable}) $Any
        if map.empty?()
            return nothing
        const keyTypeNumberInMap Int = map.keyTypeNumber()
        inthrow
            if keyTypeNumberInMap != key.typeNumber()
                throw(const::eid_invalidType, "Invalid type.", nothing)
        const slotAddress Int = map.unsafe_map_slotAddress(key.getShortRandomizedHash() & (map.unsafe_map_slotsCount() - 1))
        const slotLength Int = slotAddress.unsafe_getI64(0)
        var result $Any = nothing
        if slotLength != 0
            if unsafe_equal(keyTypeNumberInMap, slotAddress.unsafe_getI64(1), keyTypeNumberInMap, key)
                result = unsafe_object(map.valueTypeNumber(), slotAddress.unsafe_getI64(2))
                result.shar__rc_use()
            else
                const otherKeysAndValues Int = slotAddress.unsafe_getI64(3)
                for :(keyIndex Int = 0) keyIndex < (slotLength - 1) * 2; keyIndex += 2
                    if unsafe_equal(keyTypeNumberInMap, otherKeysAndValues.unsafe_getI64(keyIndex), keyTypeNumberInMap, key)
                        result = unsafe_object(map.valueTypeNumber(), otherKeysAndValues.unsafe_getI64(keyIndex + 1))
                        result.shar__rc_use()
                        end keyIndex
        return result

attach Map to Put
    //@If the search occurs in an array and the type of the key to be found does not correspond to the type of existing keys, or the type value differs from the type of existing values, the function returns an error with the code “const::STD::eid_invalidType”.
    def put(write map Map, key ${Equal, Hashable}, newValue $Any) $Any
        if newValue.nothing?()
            return deleteKVFromMap(map, key)
        const keyTypeNumberInMap Int = map.keyTypeNumber()
        const valueTypeNumberInMap Int = map.valueTypeNumber()
        inthrow
            if (keyTypeNumberInMap != key.typeNumber() || valueTypeNumberInMap != newValue.typeNumber()) && keyTypeNumberInMap != Nothing.typeNumber()
                throw(const::eid_invalidType, "Invalid type.", nothing)
        const slotsCount Int = map.unsafe_map_slotsCount()
        const needToEnlarge Bool = map.length() == slotsCount && slotsCount != 0x100000000
        var result $Any = nothing
        if needToEnlarge || map.use?()
            const newSlotsCount Int = map.empty?().select(16, needToEnlarge.select(slotsCount * 2, slotsCount))
            const newMap Map = unsafe_map_create(newSlotsCount, key.typeNumber(), newValue.typeNumber())
            parse keyInMap, valueInMap = map
                if keyInMap == key
                    result = valueInMap
                else
                    newMap.unsafe_map_addNotExistedKV(keyInMap, valueInMap)
            newMap.unsafe_map_addNotExistedKV(key, newValue)
            map = newMap
        else
            key.shar__rc_use()
            newValue.shar__rc_use()
            const slotAddress Int = map.unsafe_map_slotAddress(key.getShortRandomizedHash() & (map.unsafe_map_slotsCount() - 1))
            const slotLength Int = slotAddress.unsafe_getI64(0)
            if slotLength == 0
                slotAddress.unsafe_setI64(0, 1)
                slotAddress.unsafe_setI64(1, key)
                slotAddress.unsafe_setI64(2, newValue)
            else
                var isEqual Bool = false
                try
                    isEqual = unsafe_equal(keyTypeNumberInMap, slotAddress.unsafe_getI64(1), keyTypeNumberInMap, key)
                catch id, message, errorData
                    key.shar__rc_free()
                    newValue.shar__rc_free()
                    throw(id, message, errorData)
                if isEqual
                    unsafe_object(keyTypeNumberInMap, slotAddress.unsafe_getI64(1))
                    result = unsafe_object(valueTypeNumberInMap, slotAddress.unsafe_getI64(2))
                    slotAddress.unsafe_setI64(1, key)
                    slotAddress.unsafe_setI64(2, newValue)
                elif slotLength > 1
                    const otherKeysAndValues Int = slotAddress.unsafe_getI64(3)
                    for :(keyIndex Int = 0) keyIndex < (slotLength - 1) * 2; keyIndex += 2
                        try
                            isEqual = unsafe_equal(keyTypeNumberInMap, otherKeysAndValues.unsafe_getI64(keyIndex), keyTypeNumberInMap, key)
                        catch id, message, errorData
                            key.shar__rc_free()
                            newValue.shar__rc_free()
                            throw(id, message, errorData)
                        if isEqual
                            unsafe_object(keyTypeNumberInMap, otherKeysAndValues.unsafe_getI64(keyIndex))
                            result = unsafe_object(valueTypeNumberInMap, otherKeysAndValues.unsafe_getI64(keyIndex + 1))
                            otherKeysAndValues.unsafe_setI64(keyIndex, key)
                            otherKeysAndValues.unsafe_setI64(keyIndex + 1, newValue)
                            end keyIndex
                if result.nothing?()
                    slotAddress.unsafe_setI64(0, slotLength + 1)
                    if slotLength == 1
                        slotAddress.unsafe_setI64(3, unsafe_malloc(16))
                    else
                        var otherKeysAndValues Int = slotAddress.unsafe_getI64(3)
                        otherKeysAndValues.unsafe_realloc(slotLength * 16)
                        slotAddress.unsafe_setI64(3, otherKeysAndValues)
                    const otherKeysAndValues Int = slotAddress.unsafe_getI64(3)
                    const lastKeyIndex Int = (slotLength - 1) * 2
                    otherKeysAndValues.unsafe_setI64(lastKeyIndex, key)
                    otherKeysAndValues.unsafe_setI64(lastKeyIndex + 1, newValue)
            if result.nothing?()
                map.unsafe_setI64(1, map.unsafe_getI64(1) + 1)
        return result

#alwaysinline nothrow
def unsafe_map_create(slotsCount, keyTypeNumber, valueTypeNumber Int) Map
    const result Map = unsafe_object(Map.typeNumber(), unsafe_malloc((slotsCount + 1) * 32))
    result.unsafe_setI64(0, 1)
    result.unsafe_setI64(1, 0)
    result.unsafe_setI32(4, keyTypeNumber)
    result.unsafe_setI32(5, valueTypeNumber)
    result.unsafe_setI64(3, slotsCount)
    result.unsafe_offsetI64(4).unsafe_memsetI64(0, slotsCount * 4)
    return result

#nothrow
def unsafe_map_addNotExistedKV(map, key, value $Any)
    key.shar__rc_use()
    value.shar__rc_use()
    const slotAddress Int = map.unsafe_map_slotAddress(key.getShortRandomizedHash() & (map.unsafe_map_slotsCount() - 1))
    const slotLength Int = slotAddress.unsafe_getI64(0)
    if slotLength == 0
        slotAddress.unsafe_setI64(0, 1)
        slotAddress.unsafe_setI64(1, key)
        slotAddress.unsafe_setI64(2, value)
    else
        slotAddress.unsafe_setI64(0, slotLength + 1)
        if slotLength == 1
            slotAddress.unsafe_setI64(3, unsafe_malloc(16))
        else
            var otherKeysAndValues Int = slotAddress.unsafe_getI64(3)
            otherKeysAndValues.unsafe_realloc(slotLength * 16)
            slotAddress.unsafe_setI64(3, otherKeysAndValues)
        const otherKeysAndValues Int = slotAddress.unsafe_getI64(3)
        const lastKeyIndex Int = (slotLength - 1) * 2
        otherKeysAndValues.unsafe_setI64(lastKeyIndex, key)
        otherKeysAndValues.unsafe_setI64(lastKeyIndex + 1, value)
    map.unsafe_setI64(1, map.unsafe_getI64(1) + 1)

#noinline
def deleteKVFromMap(write map Map, key ${Equal, Hashable}) $Any
    if map.empty?()
        return nothing
    const keyTypeNumberInMap Int = map.keyTypeNumber()
    const valueTypeNumberInMap Int = map.valueTypeNumber()
    inthrow
        if keyTypeNumberInMap != key.typeNumber()
            throw(const::eid_invalidType, "Invalid type.", nothing)
    var result $Any = nothing
    const slotsCount Int = map.unsafe_map_slotsCount()
    const slotAddress Int = map.unsafe_map_slotAddress(key.getShortRandomizedHash() & (slotsCount - 1))
    const slotLength Int = slotAddress.unsafe_getI64(0)
    var resultKeyIndex Int = -1
    if slotLength != 0
        if unsafe_equal(keyTypeNumberInMap, slotAddress.unsafe_getI64(1), keyTypeNumberInMap, key)
            resultKeyIndex = 0
        elif slotLength != 1
            const otherKeysAndValues Int = slotAddress.unsafe_getI64(3)
            for :(keyIndex Int = 0) keyIndex < (slotLength - 1) * 2; keyIndex += 2
                if unsafe_equal(keyTypeNumberInMap, otherKeysAndValues.unsafe_getI64(keyIndex), keyTypeNumberInMap, key)
                    resultKeyIndex = keyIndex + 2
                    end keyIndex
    if resultKeyIndex != -1
        if map.length() == 1
            result = unsafe_object(valueTypeNumberInMap, slotAddress.unsafe_getI64(2))
            result.shar__rc_use()
            map = Map()
        elif !map.use?()
            map.unsafe_setI64(1, map.unsafe_getI64(1) - 1)
            slotAddress.unsafe_setI64(0, slotLength - 1)
            if resultKeyIndex == 0
                unsafe_object(keyTypeNumberInMap, slotAddress.unsafe_getI64(1))
                result = unsafe_object(valueTypeNumberInMap, slotAddress.unsafe_getI64(2))
            if slotLength != 1
                var otherKeysAndValues Int = slotAddress.unsafe_getI64(3)
                const lastKeyIndex Int = (slotLength - 2) * 2
                if resultKeyIndex == 0
                    slotAddress.unsafe_setI64(1, otherKeysAndValues.unsafe_getI64(lastKeyIndex))
                    slotAddress.unsafe_setI64(2, otherKeysAndValues.unsafe_getI64(lastKeyIndex + 1))
                else
                    resultKeyIndex -= 2
                    unsafe_object(keyTypeNumberInMap, otherKeysAndValues.unsafe_getI64(resultKeyIndex))
                    result = unsafe_object(valueTypeNumberInMap, otherKeysAndValues.unsafe_getI64(resultKeyIndex + 1))
                    if lastKeyIndex != resultKeyIndex
                        otherKeysAndValues.unsafe_setI64(resultKeyIndex, otherKeysAndValues.unsafe_getI64(lastKeyIndex))
                        otherKeysAndValues.unsafe_setI64(resultKeyIndex + 1, otherKeysAndValues.unsafe_getI64(lastKeyIndex + 1))
                if lastKeyIndex == 0
                    otherKeysAndValues.unsafe_free()
                else
                    otherKeysAndValues.unsafe_realloc(lastKeyIndex * 8)
                    slotAddress.unsafe_setI64(3, otherKeysAndValues)
        else
            const newMap Map = unsafe_map_create(map.unsafe_map_slotsCount(), keyTypeNumberInMap, valueTypeNumberInMap)
            parse keyInMap, valueInMap = map
                if keyInMap == key
                    result = valueInMap
                else
                    newMap.unsafe_map_addNotExistedKV(keyInMap, valueInMap)
            map = newMap
    return result

#alwaysinline nothrow
def unsafe_map_getCounter(map $Any) Int
    return map.unsafe_getI64(0)

#alwaysinline nothrow
def unsafe_map_setCounter(map, newCounter $Any)
    map.unsafe_setI64(0, newCounter)

attach Map to Iterable
    #alwaysinline nothrow
    def parse__init(map Map) Array
        var slotIndex Int = 0
        const slotsCount Int = map.unsafe_map_slotsCount()
        for :(loop) slotIndex < slotsCount; slotIndex++
            if map.unsafe_map_slotAddress(slotIndex).unsafe_getI64(0) != 0
                end loop
        return [slotIndex, 0]

    #alwaysinline nothrow
    def parse__predicate(map Map, index Array) Bool
        return index[0] < map.unsafe_map_slotsCount()

    #alwaysinline nothrow
    def parse__next(map Map, write index Array)
        const slotsCount Int = map.unsafe_map_slotsCount()
        const currentSlotIndex Int = index[0]
        const currentSlotLength Int = map.unsafe_map_slotAddress(currentSlotIndex).unsafe_getI64(0)
        const keyIndex Int = index[1] + 1
        if keyIndex < currentSlotLength
            index.put(1, keyIndex)
            return
        var slotIndex Int = currentSlotIndex + 1
        for :(loop) slotIndex < slotsCount; slotIndex++
            const slotLength Int = map.unsafe_map_slotAddress(slotIndex).unsafe_getI64(0)
            if slotLength != 0
                end loop
        index.put(0, slotIndex)
        index.put(1, 0)

    #alwaysinline nothrow
    def parse__get__key(map Map, index Array) $Any
        const slotAddress Int = map.unsafe_map_slotAddress(index[0])
        const keyIndex Int = index[1]
        const otherKeysAndValues Int = slotAddress.unsafe_getI64(3)
        const result $Any = unsafe_object(map.keyTypeNumber(), (keyIndex == 0).select(slotAddress.unsafe_getI64(1), otherKeysAndValues.unsafe_getI64((keyIndex - 1) * 2)))
        result.shar__rc_use()
        return result

    #alwaysinline nothrow
    def parse__get__item(map Map, index Array) $Any
        const slotAddress Int = map.unsafe_map_slotAddress(index[0])
        const keyIndex Int = index[1]
        const otherKeysAndValues Int = slotAddress.unsafe_getI64(3)
        const result $Any = unsafe_object(map.valueTypeNumber(), (keyIndex == 0).select(slotAddress.unsafe_getI64(2), otherKeysAndValues.unsafe_getI64(keyIndex * 2 - 1)))
        result.shar__rc_use()
        return result

attach Map to AArray

attach Map to KeyTypeNumber
    #alwaysinline nothrow
    def keyTypeNumber(map Map) Int
        return map.unsafe_getI32(4)

attach Map to ValueTypeNumber
    #alwaysinline nothrow
    def valueTypeNumber(map Map) Int
        return map.unsafe_getI32(5)

attach Map to ItemTypeNumber
    #alwaysinline nothrow
    def itemTypeNumber(map Map) Int
        return map.unsafe_getI32(5)
