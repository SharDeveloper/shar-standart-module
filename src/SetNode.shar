module STD

primitive SetNode

attach SetNode to Independent

#override(STD) alwaysinline
def shar__rc_free(node SetNode)
    return nothing

#override(STD)  alwaysinline
def shar__rc_use(node SetNode)
    return nothing

#override(STD)
def shar__to_const(node SetNode)
    unreachable()

#alwaysinline nothrow
def unsafe_setNode_toConst(node, itemTypeNumber $Any)
    if node.unsafe_setNode_getCounter() != 0
        const hashPartsCount Int = node.unsafe_setNode_getHashPartsCount()
        for :(hashPartIndex Int = 0) hashPartIndex < hashPartsCount; hashPartIndex++
            node.unsafe_setNode_itemsWithSameHashPartToConst(hashPartIndex, itemTypeNumber)
        node.unsafe_setNode_setCounter(0)

#override(STD) alwaysinline nothrow
def use?(node SetNode) Bool
    return node.unsafe_setNode_getCounter() != 1

#override(STD) alwaysinline nothrow
def constant?(node SetNode) Bool
    return node.unsafe_setNode_getCounter() == 0

#override(STD)
def clone(node SetNode) SetNode
    unreachable()

#nothrow
def unsafe_setNode_clone(node, itemTypeNumber $Any) SetNode
    const hashPartsCount Int = node.unsafe_setNode_getHashPartsCount()
    if node.unsafe_setNode_getCounter() != 0
        for :(hashPartIndex Int = 0) hashPartIndex < hashPartsCount; hashPartIndex++
            node.unsafe_setNode_useItemsWithSameHashPart(hashPartIndex, itemTypeNumber)
    const nodeSizeInI16 Int = hashPartsCount * 5 + 4
    const result SetNode = unsafe_object(SetNode.typeNumber~(), unsafe_malloc(nodeSizeInI16 * 2))
    unsafe_memcpyI16(result, node, nodeSizeInI16)
    result.unsafe_setI64(0, (result.unsafe_getI64(0) & -281474976710656) | 1)
    for :(hashPartIndex Int = 0) hashPartIndex < hashPartsCount; hashPartIndex++
        const sourceArray Int = node.unsafe_getI64(hashPartIndex + 1)
        const countOfItems Int = sourceArray.unsafe_getI64(0)
        const destinationArray Int = unsafe_malloc(countOfItems * 8 + 8)
        unsafe_memcpyI64(destinationArray, sourceArray, countOfItems + 1)
        result.unsafe_setI64(hashPartIndex + 1, destinationArray)
    return result

#alwaysinline nothrow
def unsafe_setNode_getCounter(node $Any) Int
    return node.unsafe_getI64(0) & 0xffffffffffff

#alwaysinline nothrow
def unsafe_setNode_setCounter(node, newCounter $Any)
    node.unsafe_setI64(0, (node.unsafe_getI64(0) & -281474976710656) | (newCounter & 0xffffffffffff))

#inline nothrow
def unsafe_setNode_getHashPartsCount(node $Any) Int
    return node.unsafe_getI16(3) + 1

#nothrow
def unsafe_setNode_free(node, itemTypeNumber $Any)
    const hashPartsCount Int = node.unsafe_setNode_getHashPartsCount()
    for :(hashPartIndex Int = 0) hashPartIndex < hashPartsCount; hashPartIndex++
        node.unsafe_setNode_freeItemsWithSameHashPart(hashPartIndex, itemTypeNumber)
        node.unsafe_getI64(hashPartIndex + 1).unsafe_free()
    node.unsafe_free()

#alwaysinline unsafewrite nothrow
def unsafe_setNode_itemExist?(node, hashPart, item, write itemsIndex, write itemsInsertIndex, write itemIndex, write itemsEqualError $Any) Bool
    const hashPartsCount Int = node.unsafe_setNode_getHashPartsCount()
    const items Int = node.unsafe_offsetI64(1)
    const hashParts Int = items.unsafe_offsetI64(hashPartsCount)
    var found Bool = false
    if hashPartsCount != 65536
        var leftIndex Int = 0
        var rightEdge Int = hashPartsCount
        for :(loop)
            const length Int = rightEdge - leftIndex
            if length == 0
                itemsInsertIndex = leftIndex
                return false
            const centerIndex Int = (length >> 1) + leftIndex
            const centerHashPart Int = hashParts.unsafe_getI16(centerIndex)
            if centerHashPart == hashPart
                itemsIndex = centerIndex
                found = true
                end loop
            if centerHashPart < hashPart
                leftIndex = centerIndex + 1
            else
                rightEdge = centerIndex
    else
        itemsIndex = hashPart
        found = true
    if found
        const itemsWithSameHashPart_withCount Int = items.unsafe_getI64(itemsIndex)
        const countOfItemsWithSameHashPart Int = itemsWithSameHashPart_withCount.unsafe_getI64(0)
        const itemsWithSameHashPart Int = itemsWithSameHashPart_withCount.unsafe_offsetI64(1)
        for :(itemInNodeIndex Int = 0) itemInNodeIndex < countOfItemsWithSameHashPart; itemInNodeIndex++
            found = false
            try
                found = unsafe_equal(item.typeNumber~(), itemsWithSameHashPart.unsafe_getI64(itemInNodeIndex), item.typeNumber~(), item)
            catch id, message
                itemsEqualError = {id, message}
                return false
            if found
                itemIndex = itemInNodeIndex
                return true
    return false

#inline nothrow
def unsafe_setNode_createNewNode(hashPart, item $Any) SetNode
    const countAndItem Int = unsafe_malloc(16)
    countAndItem.unsafe_setI64(0, 1)
    countAndItem.unsafe_setI64(1, item)
    const result SetNode = unsafe_object(SetNode.typeNumber~(), unsafe_malloc(18))
    result.unsafe_setI64(0, 1)
    result.unsafe_setI64(1, countAndItem)
    result.unsafe_setI16(8, hashPart)
    return result

#inline unsafewrite nothrow
def unsafe_setNode_deleteItem(write node, itemsIndex, itemIndex, itemTypeNumber $Any)
    const items Int = node.unsafe_offsetI64(1)
    var itemsWithSameHashPart_withCount Int = items.unsafe_getI64(itemsIndex)
    const countOfItemsWithSameHashPart Int = itemsWithSameHashPart_withCount.unsafe_getI64(0)
    const itemAddress Int = itemsWithSameHashPart_withCount.unsafe_offsetI64(itemIndex + 1)
    const freeItemValue Int = itemAddress.unsafe_getI64(0)
    if countOfItemsWithSameHashPart == 1
        itemsWithSameHashPart_withCount.unsafe_free()
        const hashPartsCount Int = node.unsafe_setNode_getHashPartsCount()
        if hashPartsCount == 1
            node.unsafe_free()
            node = nothing
        else
            node.unsafe_setI16(3, hashPartsCount - 2)
            const hashParts Int = items.unsafe_offsetI64(hashPartsCount)
            const countOfMovedHashParts Int = hashPartsCount - 1 - itemsIndex
            const countOfMovedItemsAndMovedHashPartsInI16 Int = countOfMovedHashParts * 4 + hashPartsCount - 1
            unsafe_memmoveI16(hashParts.unsafe_offsetI16(itemsIndex), hashParts.unsafe_offsetI16(itemsIndex + 1), countOfMovedHashParts)
            unsafe_memmoveI16(items.unsafe_offsetI64(itemsIndex), items.unsafe_offsetI64(itemsIndex + 1), countOfMovedItemsAndMovedHashPartsInI16)
            node.unsafe_realloc(hashPartsCount * 10 - 2)
    else
        itemsWithSameHashPart_withCount.unsafe_setI64(0, countOfItemsWithSameHashPart - 1)
        itemAddress.unsafe_setI64(0, itemsWithSameHashPart_withCount.unsafe_getI64(countOfItemsWithSameHashPart))
        itemsWithSameHashPart_withCount.unsafe_realloc(countOfItemsWithSameHashPart * 8)
        items.unsafe_setI64(itemsIndex, itemsWithSameHashPart_withCount)
    unsafe_object(itemTypeNumber, freeItemValue)

#inline unsafewrite nothrow
def unsafe_setNode_addItemWithNewHashCode(write node, hashPart, itemsInsertIndex, item $Any)
    const countAndItem Int = unsafe_malloc(16)
    countAndItem.unsafe_setI64(0, 1)
    countAndItem.unsafe_setI64(1, item)
    const hashPartsCount Int = node.unsafe_setNode_getHashPartsCount()
    node.unsafe_realloc(hashPartsCount * 10 + 18)
    const oldItemsInNewNode Int = node.unsafe_offsetI64(1)
    const oldHashPartsInNewNode Int = oldItemsInNewNode.unsafe_offsetI64(hashPartsCount)
    const countOfMovedHashPartsInEnd Int = hashPartsCount - itemsInsertIndex
    const countOfMovedItemsAndHashPartsInBeginInI16 Int = countOfMovedHashPartsInEnd * 4 + itemsInsertIndex
    unsafe_memmoveI16(oldHashPartsInNewNode.unsafe_offsetI16(itemsInsertIndex + 5), oldHashPartsInNewNode.unsafe_offsetI16(itemsInsertIndex), countOfMovedHashPartsInEnd)
    node.unsafe_setI16(3, hashPartsCount)
    unsafe_memmoveI16(oldItemsInNewNode.unsafe_offsetI64(itemsInsertIndex + 1), oldItemsInNewNode.unsafe_offsetI64(itemsInsertIndex), countOfMovedItemsAndHashPartsInBeginInI16)
    oldItemsInNewNode.unsafe_setI64(itemsInsertIndex, countAndItem)
    oldHashPartsInNewNode.unsafe_setI16(itemsInsertIndex + 4, hashPart)

#alwaysinline nothrow
def unsafe_setNode_addItemWithExistedHashCode(node, itemsIndex, itemIndex, item $Any)
    var itemsWithSameHashPart_withCount Int = node.unsafe_getI64(itemsIndex + 1)
    const countOfItemsWithSameHashPart Int = itemsWithSameHashPart_withCount.unsafe_getI64(0)
    if itemIndex == -1
        const newItemOffset Int = countOfItemsWithSameHashPart + 1
        itemsWithSameHashPart_withCount.unsafe_setI64(0, newItemOffset)
        itemsWithSameHashPart_withCount.unsafe_realloc(newItemOffset * 8 + 8)
        node.unsafe_setI64(itemsIndex + 1, itemsWithSameHashPart_withCount)
        itemsWithSameHashPart_withCount.unsafe_setI64(newItemOffset, item)
    else
        unsafe_object(item.typeNumber~(), itemsWithSameHashPart_withCount.unsafe_getI64(itemIndex + 1))
        itemsWithSameHashPart_withCount.unsafe_setI64(itemIndex + 1, item)

#alwaysinline nothrow
def unsafe_setNode_itemsWithSameHashPartToConst(node, itemsIndex, itemTypeNumber $Any)
    const itemsWithSameHashPart_withCount Int = node.unsafe_getI64(itemsIndex + 1)
    const countOfItemsWithSameHashPart Int = itemsWithSameHashPart_withCount.unsafe_getI64(0)
    for :(itemOffset Int = 1) itemOffset <= countOfItemsWithSameHashPart; itemOffset++
        unsafe_object(itemTypeNumber, itemsWithSameHashPart_withCount.unsafe_getI64(itemOffset)).shar__to_const()

#alwaysinline nothrow
def unsafe_setNode_useItemsWithSameHashPart(node, itemsIndex, itemTypeNumber $Any)
    const itemsWithSameHashPart_withCount Int = node.unsafe_getI64(itemsIndex + 1)
    const countOfItemsWithSameHashPart Int = itemsWithSameHashPart_withCount.unsafe_getI64(0)
    for :(itemOffset Int = 1) itemOffset <= countOfItemsWithSameHashPart; itemOffset++
        unsafe_use_object(itemTypeNumber, itemsWithSameHashPart_withCount.unsafe_getI64(itemOffset))

#alwaysinline nothrow
def unsafe_setNode_freeItemsWithSameHashPart(node, itemsIndex, itemTypeNumber $Any)
    const itemsWithSameHashPart_withCount Int = node.unsafe_getI64(itemsIndex + 1)
    const countOfItemsWithSameHashPart Int = itemsWithSameHashPart_withCount.unsafe_getI64(0)
    for :(itemOffset Int = 1) itemOffset <= countOfItemsWithSameHashPart; itemOffset++
        unsafe_object(itemTypeNumber, itemsWithSameHashPart_withCount.unsafe_getI64(itemOffset))
