module STD

//@Members of the "STD::AArray" group are types whose objects are associative arrays.
//@If the first argument of the "STD::put" function is an object with a type that is a member of the "STD::AArray" group and there is no value with the specified key (details in the description of the "STD::Put" group), then the function returns "Nothing".
//@If the first argument to the "STD::put" function is an object with a type that is a member of the "STD::AArray" group and "Nothing" is specified as a new value, then the function removes the value by key from the array and returns it as a result.
//@If the first argument of the "STD::shar__sugar__getItem" function is an object with a type that is a member of the "STD::AArray" group, then this function searches for the value by the key in the array, if the value is found, the function returns the found value, otherwise "Nothing" is returned.
export group AArray: Iterable, Empty, Put, Shar__sugar__getItem

//@The group contains objects that are associative arrays, all keys of which are of the same type.
export group KeyTypeNumber: AArray
    //@The function returns the key type number.
    //@The function cannot return any errors.
    keyTypeNumber(This) Int

//@The group contains objects that are associative arrays, all values of which are of the same type.
export group ValueTypeNumber: AArray
    //@The function returns the value type number.
    //@The function cannot return any errors.
    valueTypeNumber(This) Int

//@If an error occurs while the function is running, the bytes remain unchanged.
#this(KeyTypeNumber, ValueTypeNumber) alwaysinline
export def serializeAArray(aArray This, write bytes Bytes)
    const startLength Int = bytes.length()
    aArray.length().serialize(bytes)
    parse key, value = aArray
        try
            key.serialize(bytes)
            value.serialize(bytes)
        catch id, message, data
            bytes.delete(startLength, bytes.length() - startLength)
            throw(id, message, data)

//@If an error occurs while the function is running, the position remains unchanged.
#this(KeyTypeNumber, ValueTypeNumber) alwaysinline
export def deserializeAArray(noread type This, bytes Bytes, write position Int, noread keyType, noread valueType $BinarySerializable) This
    var currentPosition Int = position
    var result This = This.createEmpty()
    const length Int = Int.deserialize(bytes, currentPosition)
    for :(counter Int = 0) counter < length; counter++
        result.put(keyType.deserialize(bytes, currentPosition), valueType.deserialize(bytes, currentPosition))
    position = currentPosition
    return result
