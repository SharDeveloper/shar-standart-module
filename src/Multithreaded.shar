module STD

//@The group is designed to transfer data between threads.
export group Multithreaded
    //@The function returns its argument, but redesigned so that it can be passed to another thread.
    prepareForThreads(This) This

//@A call to this function indicates that the current thread does not currently require processor time.
#alwaysinline nothrow
export def yield()
    llvm
        call void @shar__yield()
        ret [2 x i64] zeroinitializer

//@When this function is called, the current thread pauses its work for a time not less than the specified number of milliseconds, but the work is resumed as soon as possible.
#alwaysinline
export def sleep(milliseconds Int)
    inthrow
        if milliseconds < 0
            throw(enum::error_outOfRange, "Out of range.")
    unsafe_sleep(milliseconds)

#alwaysinline nothrow
def unsafe_sleep(milliseconds $Any)
    llvm
        %##nreg##milliseconds## = extractvalue [2 x i64] %0, 1
        call void @shar__sleep(i64 %##reg##milliseconds##)
        ret [2 x i64] zeroinitializer
