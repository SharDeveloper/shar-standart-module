module STD

//@The group is designed to transfer data between threads.
export group Multithreaded
    //@The function returns its argument, but redesigned so that it can be passed to another thread.
    prepareForThreads(This) This

//@A call to this function indicates that the current thread does not currently require processor time.
#alwaysinline nothrow
export def yield()
    IR
        call void @worker__yield()
        ret {i64, i32} zeroinitializer

//@When this function is called, the current thread pauses its work for a time not less than the specified number of milliseconds, but the work is resumed as soon as possible.
#alwaysinline
export def sleep(milliseconds Int)
    inthrow
        if milliseconds < 0
            throw(const::eid_outOfRange, "Out of range.", nothing)
    unsafe_sleep(milliseconds)

#alwaysinline nothrow
def unsafe_sleep(milliseconds $Any)
    IR
        call void @worker__sleep({i64, i32} %0)
        ret {i64, i32} zeroinitializer

//@The function returns a unique worker ID.
#alwaysinline nothrow
export def getWorkerID() Int
    IR
        %##nreg##result## = call {i64, i32} @worker__id(i8* %0)
        ret {i64, i32} %##reg##result##
