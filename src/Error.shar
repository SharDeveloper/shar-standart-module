module STD

primitive Error

attach Error to Independent

export enum
    error_invalidType
    error_noReturnValue
    error_noError
    error_fail
    error_nothingToLook
    error_outOfRange
    error_divisionByZero
    error_invalidShiftsNumber
    error_readFromString
    error_compareWithNaN
    error_unreachable
    error_notASingleCopy
    error_clone
    error_invalidFileMode
    error_invalidCharacter
    error_accessContentsOfNotDirectory
    error_cantReadFromFile
    error_cantWriteToFile

//@The function returns an error with the code specified in the first argument of the function, and contains the message from the second argument of the function and data from the third argument.
#cold
export def throw(id Int, message String, data $Any)
    llvm
        %##nreg##unneeded 1## = call {i64, i32} ##ancntfunc##STD::shar__rc_use.STD::String##({i64, i32} %1)
        %##nreg##unneeded 2## = call {i64, i32} ##ancntfunc##STD::shar__rc_use##({i64, i32} %2)
        %##nreg##id## = extractvalue {i64, i32} %0, 0
        %##nreg##message## = extractvalue {i64, i32} %1, 0
        %##nreg##data type i32## = extractvalue {i64, i32} %2, 1
        %##nreg##data type## = zext i32 %##reg##data type i32## to i64
        %##nreg##data value## = extractvalue {i64, i32} %2, 0
        %##nreg##error memory## = call i64* @shar.malloc(i64 40)
        store i64 %##reg##id##, i64* %##reg##error memory##, align 8
        %##nreg##message data pointer## = getelementptr i64, i64* %##reg##error memory##, i64 1
        store i64 %##reg##message##, i64* %##reg##message data pointer##, align 8
        %##nreg##error not constant## = getelementptr i64, i64* %##reg##error memory##, i64 2
        store i64 1, i64* %##reg##error not constant##, align 8
        %##nreg##error data type## = getelementptr i64, i64* %##reg##error memory##, i64 3
        store i64 %##reg##data type##, i64* %##reg##error data type##, align 8
        %##nreg##error data value## = getelementptr i64, i64* %##reg##error memory##, i64 4
        store i64 %##reg##data value##, i64* %##reg##error data value##, align 8
        %##nreg##error memory i64## = ptrtoint i64* %##reg##error memory## to i64
        %##nreg##result## = insertvalue {i64, i32} {i64 0, i32 ##tnum##STD::Error##}, i64 %##reg##error memory i64##, 0
        ret {i64, i32} %##reg##result##

//@The function is used to find errors.
//@A correctly running program should not call this function.
#cold
export def unreachable()
    throw(enum::error_unreachable, "The program has reached a piece of code that should never have been executed.", nothing)

#override(STD) alwaysinline
def shar__rc_free(error Error)
    return nothing

#override(STD) alwaysinline
def shar__rc_use(error Error)
    return nothing

#override(STD) alwaysinline
def shar__to_const(error Error)
    return nothing
