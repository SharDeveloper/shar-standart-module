module STD

primitive Error

attach Error to Independent

export const eid_invalidType                  Int = 0
export const eid_noReturnValue                Int = 1
export const eid_noError                      Int = 2
export const eid_fail                         Int = 3

export const eid_nothingToLook                Int = 4
export const eid_outOfRange                   Int = 5
export const eid_divisionByZero               Int = 6
export const eid_invalidShiftsNumber          Int = 7
export const eid_readFromString               Int = 8
export const eid_compareWithNaN               Int = 9
export const eid_unreachable                  Int = 10
export const eid_notASingleCopy               Int = 11
export const eid_clone                        Int = 12
export const eid_invalidFileMode              Int = 13
export const eid_invalidCharacter             Int = 14
export const eid_accessContentsOfNotDirectory Int = 15
export const eid_cantReadFromFile             Int = 16
export const eid_cantWriteToFile              Int = 17

//@The function returns an error with the code specified in the first argument of the function, and contains the message from the second argument of the function and data from the third argument.
#cold
export def throw(id Int, message String, data $Any)
    IR
        %##nreg##unneeded 1## = call {i64, i32} ##ntfunc##STD::shar__rc_use.STD::String##({i64, i32} %1, i8* %3, i1 0)
        %##nreg##unneeded 2## = call {i64, i32} ##ntfunc##STD::shar__rc_use##({i64, i32} %2, i8* %3, i1 0)
        %##nreg##error## = call {i64, i32} @error__create({i64, i32} %0, {i64, i32} %1, {i64, i32} %2)
        ret {i64, i32} %##reg##error##

//@The function is used to find errors.
//@A correctly running program should not call this function.
#cold
export def unreachable()
    throw(const::eid_unreachable, "The program has reached a piece of code that should never have been executed.", nothing)
