module Main

def intArrayToBytes_Real(array Array) Bytes
    var result Bytes = Bytes()
    parse _, int Int = array
        result.addItem(intToByte(int))
    return result

def intAsReal_testReal(int Int) Real
    IR
        %##nreg##result## = insertvalue {i64, i32} %0, i32 ##tnum##STD::Real##, 1
        ret {i64, i32} %##reg##result##

#noinline
def testReal(write ok Int, write errorsCoordinates List)
    testReal_Any(ok, errorsCoordinates)
    testReal_Equal(ok, errorsCoordinates)
    testReal_Ordered(ok, errorsCoordinates)
    testReal_Number(ok, errorsCoordinates)
    testReal_StringWriter(ok, errorsCoordinates)
    testReal_StringReader(ok, errorsCoordinates)
    testReal_Math(ok, errorsCoordinates)
    testReal_RealToInt(ok, errorsCoordinates)
    testReal_BinarySerializable(ok, errorsCoordinates)
    testReal_PrepareForThreads(ok, errorsCoordinates)

#noinline
def testReal_Any(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        1.0.use?() == false
        1.0.constant?() == false
        3.1.clone() == 3.1
        3.1.dump(0) == "Type: STD::Real = " + 3.1.toString() + "\n"
        3.1.dump(1) == "  Type: STD::Real = " + 3.1.toString() + "\n"
        (0.1 / 0.0).dump(0) == "Type: STD::Real = " + (0.1 / 0.0).toString() + "\n"
        (0.1 / 0.0).dump(1) == "  Type: STD::Real = " + (0.1 / 0.0).toString() + "\n"

#noinline
def testReal_Equal(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        0.0 == 0.0
        4.2 == 4.2
        0.0 == -0.0
        0.0.unsafe_getValue() != -0.0.unsafe_getValue()
        0.0 == (0.0 / 0.0) : eid_compareWithNaN
        (0.0 / 0.0) == 0.0 : eid_compareWithNaN
        0.0 != 0.1
        4.2 != 3.4
        1.0 != -1.0
        0.0 != (0.0 / 0.0) : eid_compareWithNaN
        (0.0 / 0.0) != 0.0 : eid_compareWithNaN

#noinline
def testReal_Ordered(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        0.0 > -1.0
        -0.0 > -1.0
        1.0 > 0.0
        1.0 > -1.0
        !(-1.0 > 0.0)
        !(-1.0 > -0.0)
        !(0.1 > 0.9)
        !(-1.0 > 1.0)
        !(0.0 > 0.0)
        !(1.0 > 1.0)
        0.0 > (0.0 / 0.0) : eid_compareWithNaN
        (0.0 / 0.0) > 0.0 : eid_compareWithNaN
        0.0 >= 0.0
        1.0 >= 1.0
        0.0 >= -1.0
        0.0 >= -0.0
        -0.0 >= -1.0
        1.0 >= 0.0
        1.0 >= -1.0
        !(-1.0 >= 0.0)
        !(-1.0 >= -0.0)
        !(0.1 >= 0.9)
        !(-1.0 >= 1.0)
        0.0 >= (0.0 / 0.0) : eid_compareWithNaN
        (0.0 / 0.0) >= 0.0 : eid_compareWithNaN
        -1.0 < 0.0
        -1.0 < -0.0
        -1.0 < 1.0
        !(0.0 < -1.0)
        !(-0.0 < -1.0)
        !(0.9 < 0.1)
        !(1.0 < -1.0)
        !(0.0 < 0.0)
        !(1.0 < 1.0)
        0.0 < (0.0 / 0.0) : eid_compareWithNaN
        (0.0 / 0.0) < 0.0 : eid_compareWithNaN
        0.0 <= 0.0
        1.0 <= 1.0
        -1.0 <= 0.0
        -0.0 <= 0.0
        -1.0 <= -0.0
        -0.0 <= 0.0
        -1.0 <= 1.0
        !(0.0 <= -1.0)
        !(-0.0 <= -1.0)
        !(0.9 <= 0.1)
        !(1.0 <= -1.0)
        0.0 <= (0.0 / 0.0) : eid_compareWithNaN
        (0.0 / 0.0) <= 0.0 : eid_compareWithNaN
        compare(0.0, 0.0).enumToInt() == CompareResult[equal].enumToInt()
        compare(1.0, 1.0).enumToInt() == CompareResult[equal].enumToInt()
        compare(-1.0, 0.0).enumToInt() == CompareResult[less].enumToInt()
        compare(-0.0, 0.0).enumToInt() == CompareResult[equal].enumToInt()
        compare(-1.0, -0.0).enumToInt() == CompareResult[less].enumToInt()
        compare(-1.0, 1.0).enumToInt() == CompareResult[less].enumToInt()
        compare(0.0, -1.0).enumToInt() == CompareResult[great].enumToInt()
        compare(-0.0, -1.0).enumToInt() == CompareResult[great].enumToInt()
        compare(0.9, 0.1).enumToInt() == CompareResult[great].enumToInt()
        compare(1.0, -1.0).enumToInt() == CompareResult[great].enumToInt()
        compare(0.0, (0.0 / 0.0)) : eid_compareWithNaN
        compare((0.0 / 0.0), 0.0) : eid_compareWithNaN

#noinline
def testReal_Number(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        !0.0 == -0.0
        !1.0 == -1.0
        !100.0 == -100.0
        !(-1.0) == 1.0
        0.0 * 0.0 == 0.0
        1.0 * 0.0 == 0.0
        0.0 * 1.0 == 0.0
        (10.0 * 26.0).unsafe_getValue() == 4643281584563159040
        (0.0 / 0.0).nan?()
        (1.0 / 0.0).positiveInf?()
        (-1.0 / 0.0).negativeInf?()
        (144.0 / 12.0).unsafe_getValue() == 4622945017495814144
        (144.5 / 5.7).unsafe_getValue() == 4627828855249618333
        (-144.5 / 5.7).unsafe_getValue() == -4595543181605157475
        (144.5 / -5.7).unsafe_getValue() == -4595543181605157475
        (0.0 % 0.0).nan?()
        (1.0 % 0.0).nan?()
        144.0 % 12.0 == 0.0
        (144.0 % 7.0).unsafe_getValue() == 4616189618054758400
        -144.0 % 12.0 == -0.0
        (340.1 % 60.5).unsafe_getValue() == 4630488546871659728
        (-340.7 % 60.667).unsafe_getValue() == -4592916563292879588
        0.0 + 0.0 == 0.0
        0.0 + 1.0 == 1.0
        1.0 + 0.0 == 1.0
        (12.5 + 133.9).unsafe_getValue() == 4639355008638045389
        (12.5 + -133.9).unsafe_getValue() == -4585128854374737510
        0.0 - 0.0 == 0.0
        0.0 - 1.0 == -1.0
        1.0 - 0.0 == 1.0
        (12.5 - 133.9).unsafe_getValue() == -4585128854374737510
        (12.5 - -133.9).unsafe_getValue() == 4639355008638045389
         0.0.abs() == 0.0
        -1.0.abs() == 1.0
        1.0.abs() == 1.0
        10.5.abs() == 10.5
        -10.7.abs() == 10.7
        0.0.power(0.0) == 1.0
        123.3.power(0.0) == 1.0
        -123.3.power(0.0) == 1.0
        7.0.power(645.0).positiveInf?()
        3.7.power(-0.5).unsafe_getValue() == 4602857839463788386
        -3.7.power(0.5).nan?()
        Real.getRandom().type?(Real)
        Real.getCryptographicRandom().type?(Real)
    var real1 Real = -1.0
    var real2 Real = -1.0
    var real3 Real = 1.0
    var real4 Real = 1.0
    var real5 Real = 0.0
    var real6 Real = 0.0
    var real7 Real = -0.0
    var real8 Real = -0.0
    test: ok, errorsCoordinates
        (real1++).nothing?()
        real1 == 0.0
        (real2--).nothing?()
        real2 == -2.0
        (real3++).nothing?()
        real3 == 2.0
        (real4--).nothing?()
        real4 == 0.0
        (real5++).nothing?()
        real5 == 1.0
        (real6--).nothing?()
        real6 == -1.0
        (real7++).nothing?()
        real7 == 1.0
        (real8--).nothing?()
        real8 == -1.0
    real1 = 0.0
    real2 = 0.0
    real3 = 1.0
    real4 = 12.5
    real5 = 12.5
    test: ok, errorsCoordinates
        (real1 += 0.0).nothing?()
        real1 == 0.0
        (real2 += 1.0).nothing?()
        real2 == 1.0
        (real3 += 0.0).nothing?()
        real3 == 1.0
        (real4 += 133.9).nothing?()
        real4.unsafe_getValue() == 4639355008638045389
        (real5 += -133.9).nothing?()
        real5.unsafe_getValue() == -4585128854374737510
    real1 = 0.0
    real2 = 0.0
    real3 = 1.0
    real4 = 12.5
    real5 = 12.5
    test: ok, errorsCoordinates
        (real1 -= 0.0).nothing?()
        real1 == 0.0
        (real2 -= 1.0).nothing?()
        real2 == -1.0
        (real3 -= 0.0).nothing?()
        real3 == 1.0
        (real4 -= -133.9).nothing?()
        real4.unsafe_getValue() == 4639355008638045389
        (real5 -= 133.9).nothing?()
        real5.unsafe_getValue() == -4585128854374737510
    real1 = 0.0
    real2 = 0.0
    real3 = 1.0
    real4 = 10.0
    test: ok, errorsCoordinates
        (real1 *= 0.0).nothing?()
        real1 == 0.0
        (real2 *= 1.0).nothing?()
        real2 == 0.0
        (real3 *= 0.0).nothing?()
        real3 == 0.0
        (real4 *= 26.0).nothing?()
        real4.unsafe_getValue() == 4643281584563159040
    real1 = 0.0
    real2 = 1.0
    real3 = -1.0
    real4 = 144.0
    real5 = 144.5
    real6 = -144.5
    real7 = 144.5
    test: ok, errorsCoordinates
        (real1 /= 0.0).nothing?()
        real1.nan?()
        (real2 /= 0.0).nothing?()
        real2.positiveInf?()
        (real3 /= 0.0).nothing?()
        real3.negativeInf?()
        (real4 /= 12.0).nothing?()
        real4.unsafe_getValue() == 4622945017495814144
        (real5 /= 5.7).nothing?()
        real5.unsafe_getValue() == 4627828855249618333
        (real6 /= 5.7).nothing?()
        real6.unsafe_getValue() == -4595543181605157475
        (real7 /= -5.7).nothing?()
        real7.unsafe_getValue() == -4595543181605157475
    real1 = 0.0
    real2 = 1.0
    real3 = 144.0
    real4 = 144.0
    real5 = -144.0
    real6 = 340.1
    real7 = -340.7
    test: ok, errorsCoordinates
        (real1 %= 0.0).nothing?()
        real1.nan?()
        (real2 %= 0.0).nothing?()
        real2.nan?()
        (real3 %= 12.0).nothing?()
        real3 == 0.0
        (real4 %= 7.0).nothing?()
        real4.unsafe_getValue() == 4616189618054758400
        (real5 %= 12.0).nothing?()
        real5 == 0.0
        (real6 %= 60.5).nothing?()
        real6.unsafe_getValue() == 4630488546871659728
        (real7 %= 60.667).nothing?()
        real7.unsafe_getValue() == -4592916563292879588

#noinline
def testReal_StringWriter(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        1.1.toString() == "1.1"
        -1.1.toString() == "-1.1"
        -1.999.toString() == "-1.999"

#noinline
def testReal_StringReader(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Real.fromString("0.0") == 0.0
        Real.fromString("1.1") == 1.1
        Real.fromString("-1.1") == -1.1
        Real.fromString("+0.0") == 0.0
        Real.fromString("-0.0") == -0.0
        Real.fromString("+10") == 10.0
        Real.fromString("+0010.0") == 10.0
        Real.fromString("3.1a") : eid_readFromString
        Real.fromString("3.0 ") : eid_readFromString
        Real.fromString("5645a") : eid_readFromString
        Real.fromString("a5456.0") : eid_readFromString
        Real.fromString(" 0.4") : eid_readFromString
        Real.fromString("- 3.0") : eid_readFromString
        Real.fromString("3.1-") : eid_readFromString
        Real.fromString("+-3.56") : eid_readFromString
        Real.fromString("-+3.2") : eid_readFromString
        Real.fromString("+") : eid_readFromString
        Real.fromString("-") : eid_readFromString
        Real.fromString("") : eid_readFromString

#noinline
def testReal_Math(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        3.7.sqrt().unsafe_getValue() == 4611341666021894057
        -3.7.sqrt().nan?()
        3.6.sin().unsafe_getValue() == -4621728677322763791
        3.6.cos().unsafe_getValue() == -4617119535570211751
        3.6.exp().unsafe_getValue() == 4630347560903342087
        3.6.exp2().unsafe_getValue() == 4623015798618893917
        3.6.log().unsafe_getValue() == 4608447632361756121
        3.6.log2().unsafe_getValue() == 4611001457352389614
        3.6.log10().unsafe_getValue() == 4603185947015598076
        1.0.floor() == 1.0
        1.1.floor() == 1.0
        1.5.floor() == 1.0
        1.9.floor() == 1.0
        -1.0.floor() == -1.0
        -1.1.floor() == -2.0
        -1.5.floor() == -2.0
        -1.9.floor() == -2.0
        1.0.ceil() == 1.0
        1.1.ceil() == 2.0
        1.5.ceil() == 2.0
        1.9.ceil() == 2.0
        -1.0.ceil() == -1.0
        -1.1.ceil() == -1.0
        -1.5.ceil() == -1.0
        -1.9.ceil() == -1.0
        1.0.trunc() == 1.0
        1.1.trunc() == 1.0
        1.5.trunc() == 1.0
        1.9.trunc() == 1.0
        -1.0.trunc() == -1.0
        -1.1.trunc() == -1.0
        -1.5.trunc() == -1.0
        -1.9.trunc() == -1.0
        1.0.round() == 1.0
        1.1.round() == 1.0
        1.5.round() == 2.0
        1.9.round() == 2.0
        -1.0.round() == -1.0
        -1.1.round() == -1.0
        -1.5.round() == -2.0
        -1.9.round() == -2.0

#noinline
def testReal_RealToInt(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        0.0.realToInt() == 0
        -0.0.realToInt() == 0
        -1.9.realToInt() == -1
        -1.1.realToInt() == -1
        1.1.realToInt() == 1
        1.9.realToInt() == 1
        2.0.realToInt() == 2
        2.1.realToInt() == 2
        -9223372036854775808.0.realToInt() == -9223372036854775808
        9223372036854775275.0.realToInt() == 9223372036854774784
        (0.0/0.0).realToInt() : eid_outOfRange
        (1.0/0.0).realToInt() : eid_outOfRange
        (-1.0/0.0).realToInt() : eid_outOfRange
        (9223372036854775808.0).realToInt() : eid_outOfRange
        (-9223372036854777856.0).realToInt() : eid_outOfRange

#noinline
def testReal_BinarySerializable(write ok Int, write errorsCoordinates List)
    var bytes Bytes = Bytes()
    var position Int = 0
    test: ok, errorsCoordinates
        0.intAsReal_testReal().serialize(bytes).nothing?()
        bytes == [0, 0, 0, 0, 0, 0, 0, 0].intArrayToBytes_Real()
        0xfc1b0234.intAsReal_testReal().serialize(bytes).nothing?()
        bytes == [0, 0, 0, 0, 0, 0, 0, 0, 0x34, 2, 0x1b, 0xfc, 0, 0, 0, 0].intArrayToBytes_Real()
        Real.deserialize(bytes, position) == 0.intAsReal_testReal()
        position == 8
        Real.deserialize(bytes, position) == 0xfc1b0234.intAsReal_testReal()
        position == 16
        Real.deserialize(bytes, position) : eid_outOfRange
    position = 0
    test: ok, errorsCoordinates
        Real.deserialize([0, 0, 0, 0, 0, 0, 0].intArrayToBytes_Real(), position) : eid_outOfRange
        position == 0
        Real.deserialize([0].intArrayToBytes_Real(), position) : eid_outOfRange
        position == 0
        Real.deserialize([].intArrayToBytes_Real(), position) : eid_outOfRange
        position == 0
    position = 1
    test: ok, errorsCoordinates
        Real.deserialize([0, 0, 0, 0, 0, 0, 0, 0].intArrayToBytes_Real(), position) : eid_outOfRange
    position = -1
    test: ok, errorsCoordinates
        Real.deserialize([0, 0, 0, 0, 0, 0, 0, 0].intArrayToBytes_Real(), position) : eid_outOfRange
    position = -9223372036854775808
    test: ok, errorsCoordinates
        Real.deserialize([0, 0, 0, 0, 0, 0, 0, 0].intArrayToBytes_Real(), position) : eid_outOfRange
    position = 9223372036854775807
    test: ok, errorsCoordinates
        Real.deserialize([0, 0, 0, 0, 0, 0, 0, 0].intArrayToBytes_Real(), position) : eid_outOfRange

#noinline
def testReal_PrepareForThreads(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        0.0.prepareForThreads() == 0.0
        0.4.prepareForThreads() == 0.4
        5.5.prepareForThreads() == 5.5
