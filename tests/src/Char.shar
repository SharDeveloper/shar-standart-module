module Main

def intArrayToBytes_Char(array Array) Bytes
    var result Bytes = Bytes()
    parse _, int Int = array
        result.addItem(intToByte(int))
    return result

def testChar(write ok Int, write errorsCoordinates List)
    testChar_Any(ok, errorsCoordinates)
    testChar_Equal(ok, errorsCoordinates)
    testChar_Ordered(ok, errorsCoordinates)
    testChar_StringWriter(ok, errorsCoordinates)
    testChar_StringReader(ok, errorsCoordinates)
    testChar_CharToInt(ok, errorsCoordinates)
    testChar_Hashed(ok, errorsCoordinates)
    testChar_BinarySerializable(ok, errorsCoordinates)
    testChar_Digit?(ok, errorsCoordinates)
    testChar_Letter?(ok, errorsCoordinates)
    testChar_Lower?(ok, errorsCoordinates)
    testChar_Upper?(ok, errorsCoordinates)
    testChar_PrepareForThreads(ok, errorsCoordinates)

#noinline
def testChar_Any(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        !'a'.use?()
        !'a'.constant?()
        'a'.clone() == 'a'
        'b'.clone() == 'b'
        !'a'.clone().use?()
        !'b'.clone().constant?()
        'a'.dump(0) == "Type: STD::Char = a\n"
        'a'.dump(1) == "  Type: STD::Char = a\n"
        'b'.dump(0) == "Type: STD::Char = b\n"
        'b'.dump(1) == "  Type: STD::Char = b\n"

#noinline
def testChar_Equal(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        'a' == 'a'
        !('a' == 'b')
        'a' != 'b'
        !('a' != 'a')
        '\101010' == '\101010'
        !('\101010' == '\101011')
        '\101010' != '\101011'
        !('\101010' != '\101010')

#noinline
def testChar_Ordered(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        'a' < 'b'
        !('b' < 'a')
        'a' <= 'b'
        'a' <= 'a'
        !('b' <= 'a')
        'b' > 'a'
        !('a' > 'b')
        'b' >= 'a'
        'b' >= 'b'
        !('a' >= 'b')
        compare('a', 'b').enumToInt() == CompareResult[less].enumToInt()
        compare('a', 'a').enumToInt() == CompareResult[equal].enumToInt()
        compare('b', 'a').enumToInt() == CompareResult[great].enumToInt()

#noinline
def testChar_StringWriter(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        'a'.toString() == "a"
        'v'.toString() == "v"
        ' '.toString() == " "
        '\101010'.toString() == "\101010"
        '\101011'.toString() == "\101011"

#noinline
def testChar_StringReader(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Char.fromString("a") == 'a'
        Char.fromString("v") == 'v'
        Char.fromString(" ") == ' '
        Char.fromString("\101010") == '\101010'
        Char.fromString("\101011") == '\101011'
        Char.fromString("") : eid_readFromString
        Char.fromString("12") : eid_readFromString

#noinline
def testChar_CharToInt(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        charToInt('\000000') == 0
        charToInt(' ') == 32
        charToInt('0') == 48
        charToInt('\101010') == 0x101010
        charToInt('\101011') == 0x101011

#noinline
def testChar_Hashed(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        'a'.getHash() == 'a'.getHash()
        'b'.getHash() == 'b'.getHash()
        'a'.getRandomizedHash() == 'a'.getRandomizedHash()
        'b'.getRandomizedHash() == 'b'.getRandomizedHash()
        '\101010'.getRandomizedHash() == '\101010'.getRandomizedHash()
        '\101011'.getRandomizedHash() == '\101011'.getRandomizedHash()

#noinline
def testChar_BinarySerializable(write ok Int, write errorsCoordinates List)
    var bytes Bytes = Bytes()
    var position Int = 0
    test: ok, errorsCoordinates
        0.intToChar().serialize(bytes).nothing?()
        bytes == [0, 0, 0, 0].intArrayToBytes_Char()
        0x101155.intToChar().serialize(bytes).nothing?()
        bytes == [0, 0, 0, 0, 0x55,  0x11, 0x10, 0].intArrayToBytes_Char()
        Char.deserialize(bytes, position) == 0.intToChar()
        position == 4
        Char.deserialize(bytes, position) == 0x101155.intToChar()
        position == 8
        Char.deserialize(bytes, position) : eid_outOfRange
    position = 0
    test: ok, errorsCoordinates
        Char.deserialize([0].intArrayToBytes_Char(), position) : eid_outOfRange
        position == 0
        Char.deserialize([].intArrayToBytes_Char(), position) : eid_outOfRange
        position == 0
    position = 1
    test: ok, errorsCoordinates
        Char.deserialize([0, 0].intArrayToBytes_Char(), position) : eid_outOfRange
    position = -1
    test: ok, errorsCoordinates
        Char.deserialize([0, 0, 0, 0, 0, 0, 0, 0].intArrayToBytes_Char(), position) : eid_outOfRange
    position = -9223372036854775808
    test: ok, errorsCoordinates
        Char.deserialize([0, 0, 0, 0, 0, 0, 0, 0].intArrayToBytes_Char(), position) : eid_outOfRange
    position = 9223372036854775807
    test: ok, errorsCoordinates
        Char.deserialize([0, 0, 0, 0, 0, 0, 0, 0].intArrayToBytes_Char(), position) : eid_outOfRange

#noinline
def testChar_Digit?(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        '0'.digit?()
        '1'.digit?()
        '2'.digit?()
        '3'.digit?()
        '4'.digit?()
        '5'.digit?()
        '6'.digit?()
        '7'.digit?()
        '8'.digit?()
        '9'.digit?()
        !'/'.digit?()
        !':'.digit?()
        !'a'.digit?()
        !'z'.digit?()
        !'A'.digit?()
        !'Z'.digit?()
        '\01fbf9'.digit?()
        '\00277e'.digit?()
        '\01f101'.digit?()
        !'\00a8e6'.digit?()

#noinline
def testChar_Letter?(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        'a'.letter?()
        'b'.letter?()
        'c'.letter?()
        'x'.letter?()
        'y'.letter?()
        'z'.letter?()
        'A'.letter?()
        'B'.letter?()
        'C'.letter?()
        'X'.letter?()
        'Y'.letter?()
        'Z'.letter?()
        'а'.letter?()
        'б'.letter?()
        'в'.letter?()
        'э'.letter?()
        'ю'.letter?()
        'я'.letter?()
        'А'.letter?()
        'Б'.letter?()
        'В'.letter?()
        'Э'.letter?()
        'Ю'.letter?()
        'Я'.letter?()
        'ё'.letter?()
        'Ё'.letter?()
        !'@'.letter?()
        !'['.letter?()
        !'`'.letter?()
        !'{'.letter?()
        !'\01f18a'.letter?()
        !'\01f1fe'.letter?()
        '\00ffb5'.letter?()
        '\00feb1'.letter?()

#noinline
def testChar_Lower?(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        !'0'.lower?()
        !'1'.lower?()
        !'9'.lower?()
        !'/'.lower?()
        !':'.lower?()
        'a'.lower?()
        'z'.lower?()
        !'A'.lower?()
        !'Z'.lower?()
        !'@'.lower?()
        !'['.lower?()
        !'`'.lower?()
        !'{'.lower?()
        !'\01f813'.lower?()
        !'\002c6b'.lower?()
        '\00fb03'.lower?()
        '\00ff4c'.lower?()
        'а'.lower?()
        'я'.lower?()
        'ё'.lower?()
        !'А'.lower?()
        !'Я'.lower?()
        !'Ё'.lower?()

#noinline
def testChar_Upper?(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        !'0'.upper?()
        !'1'.upper?()
        !'9'.upper?()
        !'/'.upper?()
        !':'.upper?()
        !'a'.upper?()
        !'z'.upper?()
        'A'.upper?()
        'Z'.upper?()
        !'@'.upper?()
        !'['.upper?()
        !'`'.upper?()
        !'{'.upper?()
        !'\00fb03'.upper?()
        !'\00ff4c'.upper?()
        '\01f189'.upper?()
        !'а'.upper?()
        !'я'.upper?()
        !'ё'.upper?()
        'А'.upper?()
        'Я'.upper?()
        'Ё'.upper?()
        '\00ff3a'.upper?()

#noinline
def testChar_PrepareForThreads(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        'a'.prepareForThreads() == 'a'
        'я'.prepareForThreads() == 'я'
        '\101010'.prepareForThreads() == '\101010'
        '\101011'.prepareForThreads() == '\101011'
