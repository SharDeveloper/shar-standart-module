module Main

type Test_AnyType
    a $Any
    b $Any
    c $Any

type Test_AnyType1

def unsafe_testAnyType_getCounter(type $Any) Int
    return type.unsafe_getI64(0) & 0xffffffffff

#noinline
def testAny(write ok Int, write errorsCoordinates List)
    const int Int = 1
    var type1 Test_AnyType = Test_AnyType{a: int, b : 2, c : 3}.clone()
    var type2 Test_AnyType = Test_AnyType{a: type1, b : 2, c : 3}
    const type3 Test_AnyType = Test_AnyType{a: int, b : 2, c : 3}.clone()
    const type4 Test_AnyType = Test_AnyType{a: type3, b : 2, c : 3}
    test: ok, errorsCoordinates
        unsafe_testAnyType_getCounter(type2) == 1
        unsafe_testAnyType_getCounter(type1) == 2
    type1.shar__rc_free()
    test: ok, errorsCoordinates
        unsafe_testAnyType_getCounter(type1) == 1
        unsafe_testAnyType_getCounter(type2) == 1
    type1.shar__rc_use()
    test: ok, errorsCoordinates
        unsafe_testAnyType_getCounter(type1) == 2
        unsafe_testAnyType_getCounter(type2) == 1
    type2 = Test_AnyType{a: 1, b : 2, c : 3}
    test: ok, errorsCoordinates
        unsafe_testAnyType_getCounter(type1) == 1
        unsafe_testAnyType_getCounter(type2) == 0
    type2 = Test_AnyType{a: 1, b : 2, c : 3}.clone()
    test: ok, errorsCoordinates
        unsafe_testAnyType_getCounter(type1) == 1
        unsafe_testAnyType_getCounter(type2) == 1
    type1.shar__to_const()
    test: ok, errorsCoordinates
        unsafe_testAnyType_getCounter(type1) == 0
        unsafe_testAnyType_getCounter(type2) == 1
        type1.use?()
        type3.use?()
        !type4.use?()
        type1.constant?()
        !type3.constant?()
        !type4.constant?()
    type1 = type1.clone()
    type2 = type3.clone()
    const type5 Test_AnyType = type4.clone()
    test: ok, errorsCoordinates
        unsafe_testAnyType_getCounter(type1) == 1
        unsafe_testAnyType_getCounter(type2) == 1
        unsafe_testAnyType_getCounter(type3) == 3
        unsafe_testAnyType_getCounter(type4) == 1
        unsafe_testAnyType_getCounter(type5) == 1
        !type1.use?()
        !type1.constant?()
        !type2.use?()
        !type2.constant?()
    type1 = Test_AnyType{a: int, b : 2, c : 3}
    type2 = Test_AnyType{a: type1, b : 2, c : 3}
    type2.shar__to_const()
    test: ok, errorsCoordinates
        unsafe_testAnyType_getCounter(type1) == 0
        unsafe_testAnyType_getCounter(type2) == 0
        unsafe_testAnyType_getCounter(type3) == 3
        unsafe_testAnyType_getCounter(type4) == 1
        unsafe_testAnyType_getCounter(type5) == 1
        type1.use?()
        type1.constant?()
        type2.use?()
        type2.constant?()
        1.same() == 1
        1.same() == [1.0][0] : eid_invalidType
        true.type?(Bool)
        !true.type?(Int)
        12.type!(Int) == 12
        String.typeNumber() == String.typeNumber()
        String.typeNumber() != Int.typeNumber()
    var i1 Int = 10
    var i2 Int = -5
    test: ok, errorsCoordinates
        exchange(i1, i2).nothing?()
        i1 == -5
        i2 == 10
        exchange(i1, i2).nothing?()
        i1 == 10
        i2 == -5
        Nothing.typeNumber().getTypeName() == "STD::Nothing"
        Int.typeNumber().getTypeName() == "STD::Int"
        Bool.typeNumber().getTypeName() == "STD::Bool"
        Array.typeNumber().getTypeName() == "STD::Array"
        Dict.typeNumber().getTypeName() == "STD::Dict"
        (-10000000).getTypeName() : eid_outOfRange
        nothing.nothing?()
        !0.nothing?()
        nothing.dump(0) == "Type: STD::Nothing\n"
        type1.a~() == 1
        type1.b~() == 2
        type1.c~() == 3
        Test_AnyType{a: 1, b : 2, c : 3}.dump(0) == "Type: Main::Test_AnyType\n  a: Type: STD::Int = 1\n  b: Type: STD::Int = 2\n  c: Type: STD::Int = 3\n"
        Test_AnyType1{}.dump(0) == "Type: Main::Test_AnyType1\n"
        Test_AnyType{a: 1, b : 2, c : 3}.dump(1) == "  Type: Main::Test_AnyType\n    a: Type: STD::Int = 1\n    b: Type: STD::Int = 2\n    c: Type: STD::Int = 3\n"
        Test_AnyType1{}.dump(1) == "  Type: Main::Test_AnyType1\n"
