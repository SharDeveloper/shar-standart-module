module Main

#inline
def unsafe_string_getCounter(string $Any) Int
    return string.unsafe_getI64(0)

def testString(write ok Int, write errorsCoordinates List)
    testString_MemoryManagement(ok, errorsCoordinates)
    testString_Equal(ok, errorsCoordinates)
    testString_Ordered(ok, errorsCoordinates)
    testString_GetRange(ok, errorsCoordinates)
    testString_GetItem(ok, errorsCoordinates)
    testString_Add(ok, errorsCoordinates)
    testString_StringWriter(ok, errorsCoordinates)
    testString_StringReader(ok, errorsCoordinates)
    testString_Hashed(ok, errorsCoordinates)
    testString_Long(ok, errorsCoordinates)
    testString_Empty(ok, errorsCoordinates)
    testString_Container(ok, errorsCoordinates)
    testString_Copy(ok, errorsCoordinates)
    testString_Put(ok, errorsCoordinates)
    testString_Iterator(ok, errorsCoordinates)
    testString_BinarySerializable(ok, errorsCoordinates)
    testString_Swap(ok, errorsCoordinates)
    testString_SetItem(ok, errorsCoordinates)
    testString_ContainFromAtoB?(ok, errorsCoordinates)
    testString_CountFromAtoB(ok, errorsCoordinates)
    testString_CountPartFromAtoB(ok, errorsCoordinates)
    testString_PartsEqual?(ok, errorsCoordinates)
    testString_LookNFromAtoB(ok, errorsCoordinates)
    testString_LookNPartFromAtoB(ok, errorsCoordinates)
    testString_LookAllFromAtoB(ok, errorsCoordinates)
    testString_LookAllPartsFromAtoB(ok, errorsCoordinates)
    testString_LookBackNFromAtoB(ok, errorsCoordinates)
    testString_LookBackNPartFromAtoB(ok, errorsCoordinates)
    testString_Delete$(ok, errorsCoordinates)
    testString_Delete(ok, errorsCoordinates)
    testString_Replace$(ok, errorsCoordinates)
    testString_Replace(ok, errorsCoordinates)
    testString_Insert$(ok, errorsCoordinates)
    testString_Insert(ok, errorsCoordinates)
    testString_InsertPart$(ok, errorsCoordinates)
    testString_InsertPart(ok, errorsCoordinates)
    testString_Repeat(ok, errorsCoordinates)
    testString_RepeatPart(ok, errorsCoordinates)
    testString_ReversePart(ok, errorsCoordinates)
    testString_Dump(ok, errorsCoordinates)

#noinline
def testString_MemoryManagement(write ok Int, write errorsCoordinates List)
    var char Char = '1'
    var string1 String = [char, '2', '3'].repackTo(String)
    var string2 String = string1
    var string3 String = [char, '2', '3'].repackTo(String)
    test: ok, errorsCoordinates
        unsafe_string_getCounter(string1) == 2
        unsafe_string_getCounter(string2) == 2
        unsafe_string_getCounter(string3) == 1
    var allOk Bool = false
    var count Int = 0
    try
        parse :(parse) index, char_ = string1
            count++
            allOk = index.inRange?(0, 3) && char_.type?(Char)
            if !allOk
                end parse
    catch
        count = 0
    test: ok, errorsCoordinates
        allOk
        count == 3
        unsafe_string_getCounter(string1) == 2
    string1.shar__rc_free()
    test: ok, errorsCoordinates
        unsafe_string_getCounter(string1) == 1
        unsafe_string_getCounter(string2) == 1
    string1.shar__rc_use()
    test: ok, errorsCoordinates
        unsafe_string_getCounter(string1) == 2
        unsafe_string_getCounter(string2) == 2
    string2 = "123"
    test: ok, errorsCoordinates
        unsafe_string_getCounter(string1) == 1
        unsafe_string_getCounter(string2) == 0
    string1.shar__to_const()
    var string4 String = string3
    var string5 String = "".addItem$('1')
    test: ok, errorsCoordinates
        unsafe_string_getCounter(string1) == 0
        unsafe_string_getCounter(string2) == 0
        unsafe_string_getCounter(string3) == 2
        unsafe_string_getCounter(string4) == 2
        string1.use?()
        string2.use?()
        string3.use?()
        string4.use?()
        !string5.use?()
        string1.constant?()
        string2.constant?()
        !string3.constant?()
        !string4.constant?()
        !string5.constant?()
    string1 = string1.clone()
    string2 = string3.clone()
    test: ok, errorsCoordinates
        unsafe_string_getCounter(string1) == 1
        unsafe_string_getCounter(string2) == 1
        unsafe_string_getCounter(string3) == 2
        unsafe_string_getCounter(string4) == 2
        unsafe_string_getCounter(string5) == 1
        !string1.use?()
        !string1.constant?()
        !string2.use?()
        !string2.constant?()
    test: ok, errorsCoordinates
        unsafe_string_getCounter(string1) == 1
        unsafe_string_getCounter(string2) == 1
        unsafe_string_getCounter(string3) == 2
        unsafe_string_getCounter(string4) == 2
        unsafe_string_getCounter(string5) == 1
        !string1.use?()
        !string1.constant?()
        !string2.use?()
        !string2.constant?()
    allOk = false
    string1 = ""
    try
        for :(i Int = 0) i < 300; i++
            string1.addItem(i.intToChar())
        string2 = string1
        for :(i Int = 1) i < 150; i++
            string1.setItem(i, (i + 1).intToChar())
        allOk = string1[0] == 0.intToChar()
        if allOk
            for :(i Int = 1) i < 150; i++
                allOk = string1[i] == (i + 1).intToChar()
                if !allOk
                    end i
        if allOk
            for :(i Int = 150) i < 300; i++
                allOk = string1[i] == i.intToChar()
                if !allOk
                    end i
        if allOk
            for :(i Int = 0) i < 300; i++
                allOk = string2[i] == i.intToChar()
                if !allOk
                    end i
        string3 = string2
        for :(i Int = 300) i < 400; i++
            string2.addItem(i.intToChar())
        allOk = allOk && string1[0] == 0.intToChar()
        if allOk
            for :(i Int = 1) i < 150; i++
                allOk = string1[i] == (i + 1).intToChar()
                if !allOk
                    end i
        if allOk
            for :(i Int = 150) i < 300; i++
                allOk = string1[i] == i.intToChar()
                if !allOk
                    end i
        if allOk
            for :(i Int = 0) i < 400; i++
                allOk = string2[i] == i.intToChar()
                if !allOk
                    end i
    catch
        nothing
    test: ok, errorsCoordinates
        allOk
        string1.length~() == 300
        string2.length~() == 400
        string3.length~() == 300

#noinline
def testString_Equal(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "" == ""
        "" != "1"
        "1" != ""
        "1" == "1"
        "0" == "0"
        "1" != "11"
        "1" != "2"
        "1" != "21"
        "1" != "12"
        "11" != "1"
        "2" != "1"
        "21" != "1"
        "12" != "1"
        "asf vfghfh dfgdfg" == "asf vfghfh dfgdfg"
        "asf vfghfh dfgdfg" != ""
        "" != "asf vfghfh dfgdfg"
        "asf vfghfh dfgdfg" != "asf vfghfh dfgdfg "
        "asf vfghfh dfgdfg" != "asf vfghfh DFGdfg"

#noinline
def testString_Ordered(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "bbb" > "abb"
        "bbb" > "bba"
        "bbbb" > "bbb"
        "bbba" > "bbb"
        "aab" > "aaaa"
        "bbbb" > "bba"
        "b" > ""
        "bbb" > "abb"
        !("abb" > "bbb")
        !("bba" > "bbb")
        !("bbb" > "bbbb")
        !("bbb" > "bbba")
        !("aaaa" > "aab")
        !("bba" > "bbbb")
        !("bb" > "bb")
        !("" > "b")
        !("" > "")
        "abb" < "bbb"
        "bba" < "bbb"
        "bbb" < "bbbb"
        "bbb" < "bbba"
        "aaaa" < "aab"
        "bba" < "bbbb"
        "" < "b"
        "abb" < "bbb"
        !("bbb" < "abb")
        !("bbb" < "bba")
        !("bbbb" < "bbb")
        !("bbba" < "bbb")
        !("aab" < "aaaa")
        !("bbbb" < "bba")
        !("bb" < "bb")
        !("b" < "")
        !("" < "")
        "bbb" >= "abb"
        "bbb" >= "bba"
        "bbbb" >= "bbb"
        "bbba" >= "bbb"
        "aab" >= "aaaa"
        "bbbb" >= "bba"
        "b" >= ""
        "bbb" >= "abb"
        "bb" >= "bb"
        "" >= ""
        !("abb" >= "bbb")
        !("bba" >= "bbb")
        !("bbb" >= "bbbb")
        !("bbb" >= "bbba")
        !("aaaa" >= "aab")
        !("bba" >= "bbbb")
        !("" >= "b")
        "abb" <= "bbb"
        "bba" <= "bbb"
        "bbb" <= "bbbb"
        "bbb" <= "bbba"
        "aaaa" <= "aab"
        "bba" <= "bbbb"
        "" <= "b"
        "abb" <= "bbb"
        "bb" <= "bb"
        "" <= ""
        !("bbb" <= "abb")
        !("bbb" <= "bba")
        !("bbbb" <= "bbb")
        !("bbba" <= "bbb")
        !("aab" <= "aaaa")
        !("bbbb" <= "bba")
        !("b" <= "")
        "0234567812345678123456781234567" < "1234567812345678123456781234567"
        "1234567712345678123456781234567" < "1234567812345678123456781234567"
        "1234567812345678123456771234567" < "1234567812345678123456781234567"
        "1234567812345678123456781234566" < "1234567812345678123456781234567"
        !("1234567812345678123456781234567" < "1234567812345678123456781234567")
        !("2234567812345678123456781234567" < "1234567812345678123456781234567")
        !("1234567912345678123456781234567" < "1234567812345678123456781234567")
        !("1234567812345678123456791234567" < "1234567812345678123456781234567")
        !("1234567812345678123456781234568" < "1234567812345678123456781234567")
        "0234567812345678123456781234567" <= "1234567812345678123456781234567"
        "1234567712345678123456781234567" <= "1234567812345678123456781234567"
        "1234567812345678123456771234567" <= "1234567812345678123456781234567"
        "1234567812345678123456781234566" <= "1234567812345678123456781234567"
        "1234567812345678123456781234567" <= "1234567812345678123456781234567"
        !("2234567812345678123456781234567" <= "1234567812345678123456781234567")
        !("1234567912345678123456781234567" <= "1234567812345678123456781234567")
        !("1234567812345678123456791234567" <= "1234567812345678123456781234567")
        !("1234567812345678123456781234568" <= "1234567812345678123456781234567")
        "2234567812345678123456781234567" > "1234567812345678123456781234567"
        "1234567912345678123456781234567" > "1234567812345678123456781234567"
        "1234567812345678123456791234567" > "1234567812345678123456781234567"
        "1234567812345678123456781234568" > "1234567812345678123456781234567"
        !("1234567812345678123456781234567" > "1234567812345678123456781234567")
        !("0234567812345678123456781234567" > "1234567812345678123456781234567")
        !("1234567712345678123456781234567" > "1234567812345678123456781234567")
        !("1234567812345678123456771234567" > "1234567812345678123456781234567")
        !("1234567812345678123456781234566" > "1234567812345678123456781234567")
        "2234567812345678123456781234567" >= "1234567812345678123456781234567"
        "1234567912345678123456781234567" >= "1234567812345678123456781234567"
        "1234567812345678123456791234567" >= "1234567812345678123456781234567"
        "1234567812345678123456781234568" >= "1234567812345678123456781234567"
        "1234567812345678123456781234567" >= "1234567812345678123456781234567"
        !("0234567812345678123456781234567" >= "1234567812345678123456781234567")
        !("1234567712345678123456781234567" >= "1234567812345678123456781234567")
        !("1234567812345678123456771234567" >= "1234567812345678123456781234567")
        !("1234567812345678123456781234566" >= "1234567812345678123456781234567")
        "02345678123456781234567812345678" < "12345678123456781234567812345678"
        "12345677123456781234567812345678" < "12345678123456781234567812345678"
        "12345678123456781234567712345678" < "12345678123456781234567812345678"
        "12345678123456781234567812345677" < "12345678123456781234567812345678"
        !("12345678123456781234567812345678" < "12345678123456781234567812345678")
        !("22345678123456781234567812345678" < "12345678123456781234567812345678")
        !("12345679123456781234567812345678" < "12345678123456781234567812345678")
        !("12345678123456781234567912345678" < "12345678123456781234567812345678")
        !("12345678123456781234567812345679" < "12345678123456781234567812345678")
        "02345678123456781234567812345678" <= "12345678123456781234567812345678"
        "12345677123456781234567812345678" <= "12345678123456781234567812345678"
        "12345678123456781234567712345678" <= "12345678123456781234567812345678"
        "12345678123456781234567812345677" <= "12345678123456781234567812345678"
        "12345678123456781234567812345678" <= "12345678123456781234567812345678"
        !("22345678123456781234567812345678" <= "12345678123456781234567812345678")
        !("12345679123456781234567812345678" <= "12345678123456781234567812345678")
        !("12345678123456781234567912345678" <= "12345678123456781234567812345678")
        !("12345678123456781234567812345679" <= "12345678123456781234567812345678")
        "22345678123456781234567812345678" > "12345678123456781234567812345678"
        "12345679123456781234567812345678" > "12345678123456781234567812345678"
        "12345678123456781234567912345678" > "12345678123456781234567812345678"
        "12345678123456781234567812345679" > "12345678123456781234567812345678"
        !("12345678123456781234567812345678" > "12345678123456781234567812345678")
        !("02345678123456781234567812345678" > "12345678123456781234567812345678")
        !("12345677123456781234567812345678" > "12345678123456781234567812345678")
        !("12345678123456781234567712345678" > "12345678123456781234567812345678")
        !("12345678123456781234567812345677" > "12345678123456781234567812345678")
        "22345678123456781234567812345678" >= "12345678123456781234567812345678"
        "12345679123456781234567812345678" >= "12345678123456781234567812345678"
        "12345678123456781234567912345678" >= "12345678123456781234567812345678"
        "12345678123456781234567812345679" >= "12345678123456781234567812345678"
        "12345678123456781234567812345678" >= "12345678123456781234567812345678"
        !("02345678123456781234567812345678" >= "12345678123456781234567812345678")
        !("12345677123456781234567812345678" >= "12345678123456781234567812345678")
        !("12345678123456781234567712345678" >= "12345678123456781234567812345678")
        !("12345678123456781234567812345677" >= "12345678123456781234567812345678")
        "023456781234567812345678123456781" < "123456781234567812345678123456781"
        "123456771234567812345678123456781" < "123456781234567812345678123456781"
        "123456781234567812345677123456781" < "123456781234567812345678123456781"
        "123456781234567812345678123456780" < "123456781234567812345678123456781"
        !("123456781234567812345678123456781" < "123456781234567812345678123456781")
        !("223456781234567812345678123456781" < "123456781234567812345678123456781")
        !("123456791234567812345678123456781" < "123456781234567812345678123456781")
        !("123456781234567812345679123456781" < "123456781234567812345678123456781")
        !("123456781234567812345678123456782" < "123456781234567812345678123456781")
        "023456781234567812345678123456781" <= "123456781234567812345678123456781"
        "123456771234567812345678123456781" <= "123456781234567812345678123456781"
        "123456781234567812345677123456781" <= "123456781234567812345678123456781"
        "123456781234567812345678123456780" <= "123456781234567812345678123456781"
        "123456781234567812345678123456781" <= "123456781234567812345678123456781"
        !("223456781234567812345678123456781" <= "123456781234567812345678123456781")
        !("123456791234567812345678123456781" <= "123456781234567812345678123456781")
        !("123456781234567812345679123456781" <= "123456781234567812345678123456781")
        !("123456781234567812345678123456782" <= "123456781234567812345678123456781")
        "223456781234567812345678123456781" > "123456781234567812345678123456781"
        "123456791234567812345678123456781" > "123456781234567812345678123456781"
        "123456781234567812345679123456781" > "123456781234567812345678123456781"
        "123456781234567812345678123456782" > "123456781234567812345678123456781"
        !("123456781234567812345678123456781" > "123456781234567812345678123456781")
        !("023456781234567812345678123456781" > "123456781234567812345678123456781")
        !("123456771234567812345678123456781" > "123456781234567812345678123456781")
        !("123456781234567812345677123456781" > "123456781234567812345678123456781")
        !("123456781234567812345678123456780" > "123456781234567812345678123456781")
        "223456781234567812345678123456781" >= "123456781234567812345678123456781"
        "123456791234567812345678123456781" >= "123456781234567812345678123456781"
        "123456781234567812345679123456781" >= "123456781234567812345678123456781"
        "123456781234567812345678123456782" >= "123456781234567812345678123456781"
        "123456781234567812345678123456781" >= "123456781234567812345678123456781"
        !("023456781234567812345678123456781" >= "123456781234567812345678123456781")
        !("123456771234567812345678123456781" >= "123456781234567812345678123456781")
        !("123456781234567812345677123456781" >= "123456781234567812345678123456781")
        !("123456781234567812345678123456780" >= "123456781234567812345678123456781")
        compare("0234567812345678123456781234567", "1234567812345678123456781234567") == enum::ord_less
        compare("1234567712345678123456781234567", "1234567812345678123456781234567") == enum::ord_less
        compare("1234567812345678123456771234567", "1234567812345678123456781234567") == enum::ord_less
        compare("1234567812345678123456781234566", "1234567812345678123456781234567") == enum::ord_less
        compare("1234567812345678123456781234567", "1234567812345678123456781234567") == enum::ord_equal
        compare("2234567812345678123456781234567", "1234567812345678123456781234567") == enum::ord_great
        compare("1234567912345678123456781234567", "1234567812345678123456781234567") == enum::ord_great
        compare("1234567812345678123456791234567", "1234567812345678123456781234567") == enum::ord_great
        compare("1234567812345678123456781234568", "1234567812345678123456781234567") == enum::ord_great
        compare("02345678123456781234567812345678", "12345678123456781234567812345678") == enum::ord_less
        compare("12345677123456781234567812345678", "12345678123456781234567812345678") == enum::ord_less
        compare("12345678123456781234567712345678", "12345678123456781234567812345678") == enum::ord_less
        compare("12345678123456781234567812345677", "12345678123456781234567812345678") == enum::ord_less
        compare("12345678123456781234567812345678", "12345678123456781234567812345678") == enum::ord_equal
        compare("22345678123456781234567812345678", "12345678123456781234567812345678") == enum::ord_great
        compare("12345679123456781234567812345678", "12345678123456781234567812345678") == enum::ord_great
        compare("12345678123456781234567912345678", "12345678123456781234567812345678") == enum::ord_great
        compare("12345678123456781234567812345679", "12345678123456781234567812345678") == enum::ord_great
        compare("023456781234567812345678123456781", "123456781234567812345678123456781") == enum::ord_less
        compare("123456771234567812345678123456781", "123456781234567812345678123456781") == enum::ord_less
        compare("123456781234567812345677123456781", "123456781234567812345678123456781") == enum::ord_less
        compare("123456781234567812345678123456780", "123456781234567812345678123456781") == enum::ord_less
        compare("123456781234567812345678123456781", "123456781234567812345678123456781") == enum::ord_equal
        compare("223456781234567812345678123456781", "123456781234567812345678123456781") == enum::ord_great
        compare("123456791234567812345678123456781", "123456781234567812345678123456781") == enum::ord_great
        compare("123456781234567812345679123456781", "123456781234567812345678123456781") == enum::ord_great
        compare("123456781234567812345678123456782", "123456781234567812345678123456781") == enum::ord_great

#noinline
def testString_GetRange(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        ""[0:0] == ""
        "1"[0:0] == ""
        "1"[0:1] == "1"
        "12"[0:0] == ""
        "12"[0:1] == "1"
        "12"[1:2] == "2"
        "12"[0:2] == "12"
        "12"[2:2] == ""
        ""[-9223372036854775808:-9223372036854775808] : error_outOfRange
        ""[-9223372036854775808:-1] : error_outOfRange
        ""[-9223372036854775808:9223372036854775807] : error_outOfRange
        ""[9223372036854775807:9223372036854775807] : error_outOfRange
        ""[-1:-1] : error_outOfRange
        ""[-1:0] : error_outOfRange
        ""[0:-1] : error_outOfRange
        ""[0:1] : error_outOfRange
        ""[1:0] : error_outOfRange
        ""[1:1] : error_outOfRange
        ""[2:1] : error_outOfRange
        ""[2:0] : error_outOfRange
        ""[2:-1] : error_outOfRange
        ""[2:-9223372036854775808] : error_outOfRange
        ""[2:9223372036854775807] : error_outOfRange
        "123"[0:3] == "123"
        "123"[1:3] == "23"
        "123"[0:2] == "12"
        "123"[-9223372036854775808:-9223372036854775808] : error_outOfRange
        "123"[-9223372036854775808:-1] : error_outOfRange
        "123"[-9223372036854775808:9223372036854775807] : error_outOfRange
        "123"[9223372036854775807:9223372036854775807] : error_outOfRange
        "123"[-1:-1] : error_outOfRange
        "123"[-1:0] : error_outOfRange
        "123"[0:-1] : error_outOfRange
        "123"[1:0] : error_outOfRange
        "123"[2:1] : error_outOfRange
        "123"[2:0] : error_outOfRange
        "123"[2:-1] : error_outOfRange
        "123"[2:-9223372036854775808] : error_outOfRange
        "123"[2:9223372036854775807] : error_outOfRange

#noinline
def testString_GetItem(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        ""[0] : error_outOfRange
        ""[1] : error_outOfRange
        ""[-1] : error_outOfRange
        ""[-9223372036854775808] : error_outOfRange
        ""[9223372036854775807] : error_outOfRange
        "1"[0] == '1'
        "1"[1] : error_outOfRange
        "1"[-1] : error_outOfRange
        "1"[-9223372036854775808] : error_outOfRange
        "1"[9223372036854775807] : error_outOfRange
        "123"[0] == '1'
        "123"[1] == '2'
        "123"[2] == '3'
        "123"[3] : error_outOfRange
        "123"[-1] : error_outOfRange
        "123"[-9223372036854775808] : error_outOfRange
        "123"[9223372036854775807] : error_outOfRange

#noinline
def testString_Add(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "" + "" == ""
        "" + "1" == "1"
        "1" + "" == "1"
        "" + "12" == "12"
        "12" + "" == "12"
        "12" + "3" == "123"
        "0" + "12" == "012"
        "12" + "34" == "1234"
        "-10" + "12" == "-1012"
    var string1 String  = ""
    var string2 String  = ""
    var string3 String  = ""
    var string4 String  = "12"
    var string5 String  = "12"
    var string6 String = "0"
    var string7 String = ""
    var string8 String = "12"
    var string9 String = "-10"
    test: ok, errorsCoordinates
        (string1 += "").nothing?()
        string1 == ""
        (string2 += "1").nothing?()
        string2 == "1"
        (string3 += "1").nothing?()
        string3 == "1"
        (string4 += "").nothing?()
        string4 == "12"
        (string5 += "3").nothing?()
        string5 == "123"
        (string6 += "12").nothing?()
        string6 == "012"
        (string7 += "12").nothing?()
        string7 == "12"
        (string8 += "34").nothing?()
        string8 == "1234"
        (string9 += "12").nothing?()
        string9 == "-1012"
    string1 = "".clone()
    string2 = "".clone()
    string3 = "1".clone()
    string4 = "12".clone()
    string5 = "12".clone()
    string6 = "0".clone()
    string7 = "".clone()
    string8 = "12".clone()
    string9 = "-10".clone()
    test: ok, errorsCoordinates
        (string1 += "").nothing?()
        string1 == ""
        (string2 += "1").nothing?()
        string2 == "1"
        (string3 += "").nothing?()
        string3 == "1"
        (string4 += "").nothing?()
        string4 == "12"
        (string5 += "3").nothing?()
        string5 == "123"
        (string6 += "12").nothing?()
        string6 == "012"
        (string7 += "12").nothing?()
        string7 == "12"
        (string8 += "34").nothing?()
        string8 == "1234"
        (string9 += "12").nothing?()
        string9 == "-1012"

#noinline
def testString_StringWriter(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".toString() == ""
        "1".toString() == "1"
        "1a".toString() == "1a"
        "1aB".toString() == "1aB"
        "1aB ".toString() == "1aB "

#noinline
def testString_StringReader(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        String.fromString("") == ""
        String.fromString("1") == "1"
        String.fromString("1a") == "1a"
        String.fromString("1aB") == "1aB"
        String.fromString("1aB ") == "1aB "

#noinline
def testString_Hashed(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".getHash() == "".getHash()
        "".getRandomizedHash() == "".getRandomizedHash()
        "1".getHash() == "1".getHash()
        "1".getRandomizedHash() == "1".getRandomizedHash()
        "1012".getHash() == "1012".getHash()
        "1012".getRandomizedHash() == "1012".getRandomizedHash()

#noinline
def testString_Long(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".length~() == 0
        "1".length~() == 1
        "12".length~() == 2
        "123".length~() == 3
        "1234567890".length~() == 10

#noinline
def testString_Empty(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        String.createEmpty() == ""

#noinline
def testString_Container(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".addItem$('1') == "1"
        "12".addItem$(' ') == "12 "
        "1".addItem$('2') == "12"
        "12".addItem$('3') == "123"
    var string1 String = ""
    var string2 String = "12"
    var string3 String = "1"
    var string4 String = "12"
    var string5 String = "12"
    var string6 String = ""
    test: ok, errorsCoordinates
        string1.addItem('2').nothing?()
        string1 == "2"
        string2.addItem('3').nothing?()
        string2 == "123"
        string3.addItem('4').nothing?()
        string3 == "14"
        string4.addItem('2').nothing?()
        string4 == "122"
        string5.addItem('3').nothing?()
        string5 == "123"
    string1 = "".clone()
    string2 = "12".clone()
    string3 = "1".clone()
    string4 = "12".clone()
    string5 = "12".clone()
    string6 = "".clone()
    test: ok, errorsCoordinates
        string1.addItem('2').nothing?()
        string1 == "2"
        string2.addItem('3').nothing?()
        string2 == "123"
        string3.addItem('4').nothing?()
        string3 == "14"
        string4.addItem('2').nothing?()
        string4 == "122"
        string5.addItem('3').nothing?()
        string5 == "123"
    string1 = "1"
    string2 = "12"
    string3 = "12"
    string4 = "12"
    string5 = "123"
    string6 = ""
    test: ok, errorsCoordinates
        string1.setItem(0, '-').nothing?()
        string1 == "-"
        string2.setItem(0, '-').nothing?()
        string2 == "-2"
        string3.setItem(1, '0').nothing?()
        string3 == "10"
        string4.setItem(0, '-').nothing?()
        string4.setItem(1, '0').nothing?()
        string4 == "-0"
        string5.setItem(2, 'a').nothing?()
        string5 == "12a"
        string6.setItem(0, '1') : error_outOfRange
        string6 == ""
        string6.setItem(-1, '1') : error_outOfRange
        string6 == ""
        string6.setItem(1, '1') : error_outOfRange
        string6 == ""
        string6.setItem(-9223372036854775808, '1') : error_outOfRange
        string6 == ""
        string6.setItem(9223372036854775807, '1') : error_outOfRange
        string6 == ""
        string1.setItem(-1, '1') : error_outOfRange
        string1 == "-"
        string1.setItem(1, '1') : error_outOfRange
        string1 == "-"
        string1.setItem(-9223372036854775808, '1') : error_outOfRange
        string1 == "-"
        string1.setItem(9223372036854775807, '1') : error_outOfRange
        string1 == "-"
        string2.setItem(-1, '1') : error_outOfRange
        string2 == "-2"
        string2.setItem(2, '1') : error_outOfRange
        string2 == "-2"
        string2.setItem(-9223372036854775808, '1') : error_outOfRange
        string2 == "-2"
        string2.setItem(9223372036854775807, '1') : error_outOfRange
        string2 == "-2"
    string1 = "1".clone()
    string2 = "12".clone()
    string3 = "12".clone()
    string4 = "12".clone()
    string5 = "123".clone()
    string6 = "".clone()
    test: ok, errorsCoordinates
        string1.setItem(0, '-').nothing?()
        string1 == "-"
        string2.setItem(0, '-').nothing?()
        string2 == "-2"
        string3.setItem(1, '0').nothing?()
        string3 == "10"
        string4.setItem(0, '-').nothing?()
        string4.setItem(1, '0').nothing?()
        string4 == "-0"
        string5.setItem(2, 'a').nothing?()
        string5 == "12a"
        string6.setItem(0, '1') : error_outOfRange
        string6 == ""
        string6.setItem(-1, '1') : error_outOfRange
        string6 == ""
        string6.setItem(1, '1') : error_outOfRange
        string6 == ""
        string6.setItem(-9223372036854775808, '1') : error_outOfRange
        string6 == ""
        string6.setItem(9223372036854775807, '1') : error_outOfRange
        string6 == ""
        string1.setItem(-1, '1') : error_outOfRange
        string1 == "-"
        string1.setItem(1, '1') : error_outOfRange
        string1 == "-"
        string1.setItem(-9223372036854775808, '1') : error_outOfRange
        string1 == "-"
        string1.setItem(9223372036854775807, '1') : error_outOfRange
        string1 == "-"
        string2.setItem(-1, '1') : error_outOfRange
        string2 == "-2"
        string2.setItem(2, '1') : error_outOfRange
        string2 == "-2"
        string2.setItem(-9223372036854775808, '1') : error_outOfRange
        string2 == "-2"
        string2.setItem(9223372036854775807, '1') : error_outOfRange
        string2 == "-2"

#noinline
def testString_Copy(write ok Int, write errorsCoordinates List)
    var s1 String = ""
    var s2 String = "1"
    var s3 String = "1a300"
    test: ok, errorsCoordinates
        copy(s1, 0, "", 0, 0).nothing?()
        s1 == ""
        copy(s1, 0, "1", 0, 0).nothing?()
        s1 == ""
        copy(s1, 0, "12", 1, 0).nothing?()
        s1 == ""
        copy(s1, -1, "", 0, 0) :error_outOfRange
        s1 == ""
        copy(s1, -9223372036854775808, "", 0, 0) :error_outOfRange
        s1 == ""
        copy(s1, 1, "", 0, 0) :error_outOfRange
        s1 == ""
        copy(s1, 9223372036854775807, "", 0, 0) :error_outOfRange
        s1 == ""
        copy(s1, 0, "", -1, 0) :error_outOfRange
        s1 == ""
        copy(s1, 0, "", -9223372036854775808, 0) :error_outOfRange
        s1 == ""
        copy(s1, 0, "", 1, 0) :error_outOfRange
        s1 == ""
        copy(s1, 0, "", 9223372036854775807, 0) :error_outOfRange
        s1 == ""
        copy(s1, 0, "", 0, -1) :error_outOfRange
        s1 == ""
        copy(s1, 0, "", 0, -9223372036854775808) :error_outOfRange
        s1 == ""
        copy(s1, 0, "", 0, 1) :error_outOfRange
        s1 == ""
        copy(s1, 0, "", 0, 9223372036854775807) :error_outOfRange
        s1 == ""
        copy(s2, 0, "", 0, 0).nothing?()
        s2 == "1"
        copy(s2, 1, "", 0, 0).nothing?()
        s2 == "1"
        copy(s2, 1, "2", 1, 0).nothing?()
        s2 == "1"
        copy(s2, 0, "2", 0, 1).nothing?()
        s2 == "2"
        copy(s2, 0, "345", 0, 1).nothing?()
        s2 == "3"
        copy(s2, 0, "345", 1, 1).nothing?()
        s2 == "4"
        copy(s2, 0, "345", 2, 1).nothing?()
        s2 == "5"
        copy(s2, 0, "345", 0, 2) : error_outOfRange
        s2 == "5"
        copy(s2, 1, "345", 0, 1) : error_outOfRange
        s2 == "5"
        copy(s2, 0, "345", 2, 2) : error_outOfRange
        s2 == "5"
        copy(s2, -1, "345", 0, 1) : error_outOfRange
        s2 == "5"
        copy(s2, 2, "345", 0, 0) : error_outOfRange
        s2 == "5"
        copy(s2, 0, "345", -1, 0) : error_outOfRange
        s2 == "5"
        copy(s2, 0, "345", 0, -1) : error_outOfRange
        s2 == "5"
        copy(s3, 0, "", 0, 0).nothing?()
        s3 == "1a300"
        copy(s3, 1, "", 0, 0).nothing?()
        s3 == "1a300"
        copy(s3, 4, "", 0, 0).nothing?()
        s3 == "1a300"
        copy(s3, 0, "1234", 0, 0).nothing?()
        s3 == "1a300"
        copy(s3, 0, "7234", 0, 1).nothing?()
        s3 == "7a300"
        copy(s3, 1, "7234", 0, 4).nothing?()
        s3 == "77234"
        copy(s3, 2, "7234", 2, 2).nothing?()
        s3 == "77344"
        copy(s3, 5, "7234", 4, 0).nothing?()
        s3 == "77344"
        copy(s3, 5, "7234", 5, 0) : error_outOfRange
        s3 == "77344"
        copy(s3, 6, "7234", 4, 0) : error_outOfRange
        s3 == "77344"
        copy(s3, 5, "7234", 4, 1) : error_outOfRange
        s3 == "77344"
        copy(s3, 5, "7234", 4, -1) : error_outOfRange
        s3 == "77344"
        copy(s3, -1, "7234", 4, 0) : error_outOfRange
        s3 == "77344"
        copy(s3, 0, "7234", -1, 0) : error_outOfRange
        s3 == "77344"

#noinline
def testString_Put(write ok Int, write errorsCoordinates List)
    var s1 String = ""
    var s2 String = "a"
    var s3 String = "abcd"
    test: ok, errorsCoordinates
        s1.put(0, '2') : error_outOfRange
        s1 == ""
        s1.put(1, '2') : error_outOfRange
        s1 == ""
        s1.put(9223372036854775807, '2') : error_outOfRange
        s1 == ""
        s1.put(-1, '2') : error_outOfRange
        s1 == ""
        s1.put(-9223372036854775808, '2') : error_outOfRange
        s1 == ""
        s2.put(0, '2') == 'a'
        s2 == "2"
        s2.put(0, '3') == '2'
        s2 == "3"
        s2.put(1, '0') : error_outOfRange
        s2 == "3"
        s2.put(9223372036854775807, '0') : error_outOfRange
        s2 == "3"
        s2.put(-1, '0') : error_outOfRange
        s2 == "3"
        s2.put(-9223372036854775808, '0') : error_outOfRange
        s2 == "3"
        s3.put(0, '-') == 'a'
        s3 == "-bcd"
        s3.put(1, '4') == 'b'
        s3 == "-4cd"
        s3.put(3, '0') == 'd'
        s3 == "-4c0"
        s3.put(4, '1') : error_outOfRange
        s3 == "-4c0"
        s3.put(9223372036854775807, '1') : error_outOfRange
        s3 == "-4c0"
        s3.put(-1, '1') : error_outOfRange
        s3 == "-4c0"
        s3.put(-9223372036854775808, '1') : error_outOfRange
        s3 == "-4c0"

#noinline
def testString_Iterator(write ok Int, write errorsCoordinates List)
    var allOk Bool = true
    try
        parse _, _ = ""
            allOk = false
    catch
        allOk = false
    test: ok, errorsCoordinates
        allOk
    allOk = false
    var count Int = 0
    try
        parse :(parse) index, char = "12345"
            count++
            allOk = index.inRange?(0, 5) && char.inRange?('1', '6')
            if !allOk
                end parse
    catch
        count = 0
    test: ok, errorsCoordinates
        allOk
        count == 5

#noinline
def testString_BinarySerializable(write ok Int, write errorsCoordinates List)
    var bytes Bytes = Bytes.createEmpty()
    var position Int = 0
    test: ok, errorsCoordinates
        "".serialize(bytes).nothing?()
        bytes == [0, 0, 0, 0, 0, 0, 0, 0].repackTo(Bytes)
        "1234 ".serialize(bytes).nothing?()
        bytes == [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 49, 50, 51, 52, 32].repackTo(Bytes)
        "Абв".serialize(bytes).nothing?()
        bytes == [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 49, 50, 51, 52, 32, 6, 0, 0, 0, 0, 0, 0, 0, 0xd0, 0x90, 0xd0, 0xb1, 0xd0, 0xb2].repackTo(Bytes)
        String.deserialize(bytes, position) == ""
        position == 8
        String.deserialize(bytes, position) == "1234 "
        position == 21
        String.deserialize(bytes, position) == "Абв"
        position == 35
        String.deserialize(bytes, position) : error_outOfRange
    position = 0
    test: ok, errorsCoordinates
        String.deserialize([2, 0, 0, 0, 0, 0, 0, 0, 0].repackTo(Bytes), position) : error_outOfRange
        position == 0
        String.deserialize([1, 0, 0, 0, 0, 0, 0, 0].repackTo(Bytes), position) : error_outOfRange
        position == 0
        String.deserialize([0, 0, 0, 0, 0, 0, 1].repackTo(Bytes), position) : error_outOfRange
        position == 0
        String.deserialize([].repackTo(Bytes), position) : error_outOfRange
        position == 0
    position = -1
    test: ok, errorsCoordinates
        String.deserialize([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 32, 0, 0, 0].repackTo(Bytes), position) : error_outOfRange
    position = -9223372036854775808
    test: ok, errorsCoordinates
        String.deserialize([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 32, 0, 0, 0].repackTo(Bytes), position) : error_outOfRange
    position = 9223372036854775807
    test: ok, errorsCoordinates
        String.deserialize([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 32, 0, 0, 0].repackTo(Bytes), position) : error_outOfRange

#noinline
def testString_Swap(write ok Int, write errorsCoordinates List)
    var a1 String = ""
    var a2 String = "1"
    var a3 String = "12"
    var a4 String = "123"
    var a5 String = "12345"
    test: ok, errorsCoordinates
        a1.swap(0, 0) : error_outOfRange
        a1 == ""
        a1.swap(-1, 0) : error_outOfRange
        a1 == ""
        a1.swap(-1, -1) : error_outOfRange
        a1 == ""
        a1.swap(0, -1) : error_outOfRange
        a1 == ""
        a1.swap(9223372036854775807, 0) : error_outOfRange
        a1 == ""
        a1.swap(0, 9223372036854775807) : error_outOfRange
        a1 == ""
        a1.swap(0, 1) : error_outOfRange
        a1 == ""
        a1.swap(1, 1) : error_outOfRange
        a1 == ""
        a1.swap(1, 0) : error_outOfRange
        a1 == ""
        a1.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a1 == ""
        a2.swap(0, 0).nothing?()
        a2 == "1"
        a2.swap(1, 1) : error_outOfRange
        a2 == "1"
        a2.swap(-1, 0) : error_outOfRange
        a2 == "1"
        a2.swap(-1, -1) : error_outOfRange
        a2 == "1"
        a2.swap(0, -1) : error_outOfRange
        a2 == "1"
        a2.swap(9223372036854775807, 0) : error_outOfRange
        a2 == "1"
        a2.swap(0, 9223372036854775807) : error_outOfRange
        a2 == "1"
        a2.swap(0, 1) : error_outOfRange
        a2 == "1"
        a2.swap(1, 0) : error_outOfRange
        a2 == "1"
        a2.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a2 == "1"
        a3.swap(0, 0).nothing?()
        a3 == "12"
        a3.swap(1, 1).nothing?()
        a3 == "12"
        a3.swap(0, 1).nothing?()
        a3 == "21"
        a3.swap(1, 0).nothing?()
        a3 == "12"
        a3.swap(2, 2) : error_outOfRange
        a3 == "12"
        a3.swap(-1, 0) : error_outOfRange
        a3 == "12"
        a3.swap(-1, -1) : error_outOfRange
        a3 == "12"
        a3.swap(0, -1) : error_outOfRange
        a3 == "12"
        a3.swap(9223372036854775807, 0) : error_outOfRange
        a3 == "12"
        a3.swap(0, 9223372036854775807) : error_outOfRange
        a3 == "12"
        a3.swap(0, 2) : error_outOfRange
        a3 == "12"
        a3.swap(2, 0) : error_outOfRange
        a3 == "12"
        a3.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a3 == "12"
        a4.swap(0, 0).nothing?()
        a4 == "123"
        a4.swap(1, 1).nothing?()
        a4 == "123"
        a4.swap(2, 2).nothing?()
        a4 == "123"
        a4.swap(0, 1).nothing?()
        a4 == "213"
        a4.swap(1, 0).nothing?()
        a4 == "123"
        a4.swap(1, 2).nothing?()
        a4 == "132"
        a4.swap(0, 2).nothing?()
        a4 == "231"
        a4.swap(2, 0).nothing?()
        a4 == "132"
        a4.swap(3, 3) : error_outOfRange
        a4 == "132"
        a4.swap(-1, 0) : error_outOfRange
        a4 == "132"
        a4.swap(-1, -1) : error_outOfRange
        a4 == "132"
        a4.swap(0, -1) : error_outOfRange
        a4 == "132"
        a4.swap(9223372036854775807, 0) : error_outOfRange
        a4 == "132"
        a4.swap(0, 9223372036854775807) : error_outOfRange
        a4 == "132"
        a4.swap(0, 3) : error_outOfRange
        a4 == "132"
        a4.swap(3, 0) : error_outOfRange
        a4 == "132"
        a4.swap(3, 1) : error_outOfRange
        a4 == "132"
        a4.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a4 == "132"
        a5.swap(0, 0).nothing?()
        a5 == "12345"
        a5.swap(1, 1).nothing?()
        a5 == "12345"
        a5.swap(2, 2).nothing?()
        a5 == "12345"
        a5.swap(3, 3).nothing?()
        a5 == "12345"
        a5.swap(4, 4).nothing?()
        a5 == "12345"
        a5.swap(0, 1).nothing?()
        a5 == "21345"
        a5.swap(1, 0).nothing?()
        a5 == "12345"
        a5.swap(1, 2).nothing?()
        a5 == "13245"
        a5.swap(0, 2).nothing?()
        a5 == "23145"
        a5.swap(2, 0).nothing?()
        a5 == "13245"
        a5.swap(0, 4).nothing?()
        a5 == "53241"
        a5.swap(4, 0).nothing?()
        a5 == "13245"
        a5.swap(5, 5) : error_outOfRange
        a5 == "13245"
        a5.swap(-1, 0) : error_outOfRange
        a5 == "13245"
        a5.swap(-1, -1) : error_outOfRange
        a5 == "13245"
        a5.swap(0, -1) : error_outOfRange
        a5 == "13245"
        a5.swap(9223372036854775807, 0) : error_outOfRange
        a5 == "13245"
        a5.swap(0, 9223372036854775807) : error_outOfRange
        a5 == "13245"
        a5.swap(0, 5) : error_outOfRange
        a5 == "13245"
        a5.swap(5, 0) : error_outOfRange
        a5 == "13245"
        a5.swap(5, 1) : error_outOfRange
        a5 == "13245"
        a5.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a5 == "13245"
    a1 = "123".clone()
    a2 = a1
    test: ok, errorsCoordinates
        a1.swap(0, 2).nothing?()
        a1 == "321"
        a2 == "123"
        a1.swap(0, -1) : error_outOfRange
        a1 == "321"
        a2 == "123"
        a1.swap(0, 3) : error_outOfRange
        a1 == "321"
        a2 == "123"
        a1.swap(3, 0) : error_outOfRange
        a1 == "321"
        a2 == "123"

#noinline
def testString_SetItem(write ok Int, write errorsCoordinates List)
    var a1 String = ""
    var a2 String = "1"
    var a3 String = "12"
    var a4 String = "123"
    test: ok, errorsCoordinates
        a1.setItem(0, '0') : error_outOfRange
        a1 == ""
        a1.setItem(-1, '0') : error_outOfRange
        a1 == ""
        a1.setItem(9223372036854775807, '0') : error_outOfRange
        a1 == ""
        a1.setItem(1, '1') : error_outOfRange
        a1 == ""
        a1.setItem(-9223372036854775808, '0') : error_outOfRange
        a1 == ""
        a2.setItem(0, '0').nothing?()
        a2 == "0"
        a2.setItem(-1, '1') : error_outOfRange
        a2 == "0"
        a2.setItem(9223372036854775807, '1') : error_outOfRange
        a2 == "0"
        a2.setItem(-9223372036854775808, '1') : error_outOfRange
        a2 == "0"
        a3.setItem(0, '0').nothing?()
        a3 == "02"
        a3.setItem(1, '1').nothing?()
        a3 == "01"
        a3.setItem(2, '2') : error_outOfRange
        a3 == "01"
        a3.setItem(-1, '2') : error_outOfRange
        a3 == "01"
        a3.setItem(9223372036854775807, '2') : error_outOfRange
        a3 == "01"
        a3.setItem(-9223372036854775808, '2') : error_outOfRange
        a3 == "01"
        a4.setItem(0, '0').nothing?()
        a4 == "023"
        a4.setItem(1, '1').nothing?()
        a4 == "013"
        a4.setItem(2, '2').nothing?()
        a4 == "012"
        a4.setItem(3, '3') : error_outOfRange
        a4 == "012"
        a4.setItem(-1, '4') : error_outOfRange
        a4 == "012"
        a4.setItem(9223372036854775807, '4') : error_outOfRange
        a4 == "012"
        a4.setItem(-9223372036854775808, '4') : error_outOfRange
        a4 == "012"
    a1 = "123".clone()
    a2 = a1
    test: ok, errorsCoordinates
        a1.setItem(0, '4').nothing?()
        a1 == "423"
        a2 == "123"
        a1.setItem(-1, '0') : error_outOfRange
        a1 == "423"
        a2 == "123"

#noinline
def testString_ContainFromAtoB?(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        !"".containFromAtoB?('1', 0, 0)
        !"".containFromAtoB?('0', 0, 0)
        !"".containFromAtoB?('0', 0, 1) : error_outOfRange
        !"".containFromAtoB?('0', 1, 0) : error_outOfRange
        !"".containFromAtoB?('0', -1, 0) : error_outOfRange
        !"".containFromAtoB?('0', 0, -1) : error_outOfRange
        !"".containFromAtoB?('0', 0, 9223372036854775807) : error_outOfRange
        !"".containFromAtoB?('0', 0, -9223372036854775808) : error_outOfRange
        !"".containFromAtoB?('0', -9223372036854775808, 0) : error_outOfRange
        !"".containFromAtoB?('0', -9223372036854775808, 9223372036854775807) : error_outOfRange
        !"0".containFromAtoB?('0', 0, 0)
        !"0".containFromAtoB?('0', 1, 1)
        !"0".containFromAtoB?('1', 0, 0)
        !"0".containFromAtoB?('1', 1, 1)
        !"0".containFromAtoB?('1', 0, 1)
        "0".containFromAtoB?('0', 0, 1)
        !"0".containFromAtoB?('0', 0, 2) : error_outOfRange
        !"0".containFromAtoB?('0', 2, 0) : error_outOfRange
        !"0".containFromAtoB?('0', -1, 0) : error_outOfRange
        !"0".containFromAtoB?('0', 0, -1) : error_outOfRange
        !"0".containFromAtoB?('0', 0, 9223372036854775807) : error_outOfRange
        !"0".containFromAtoB?('0', 0, -9223372036854775808) : error_outOfRange
        !"0".containFromAtoB?('0', -9223372036854775808, 0) : error_outOfRange
        !"0".containFromAtoB?('0', -9223372036854775808, 9223372036854775807) : error_outOfRange
        !"01".containFromAtoB?('0', 0, 0)
        !"01".containFromAtoB?('0', 1, 1)
        !"01".containFromAtoB?('0', 2, 2)
        !"01".containFromAtoB?('2', 0, 2)
        !"01".containFromAtoB?('2', 0, 1)
        !"01".containFromAtoB?('0', 1, 2)
        !"01".containFromAtoB?('1', 0, 1)
        "01".containFromAtoB?('0', 0, 2)
        "01".containFromAtoB?('0', 0, 1)
        "01".containFromAtoB?('1', 0, 2)
        "01".containFromAtoB?('1', 1, 2)
        !"01".containFromAtoB?('0', 0, 3) : error_outOfRange
        !"01".containFromAtoB?('0', 3, 0) : error_outOfRange
        !"01".containFromAtoB?('0', -1, 0) : error_outOfRange
        !"01".containFromAtoB?('0', 0, -1) : error_outOfRange
        !"01".containFromAtoB?('0', 0, 9223372036854775807) : error_outOfRange
        !"01".containFromAtoB?('0', 0, -9223372036854775808) : error_outOfRange
        !"01".containFromAtoB?('0', -9223372036854775808, 0) : error_outOfRange
        !"01".containFromAtoB?('0', -9223372036854775808, 9223372036854775807) : error_outOfRange
        "0123456789abcde".containFromAtoB?('0', 0, 15)
        "0123456789abcde".containFromAtoB?('0', 0, 1)
        !"0123456789abcde".containFromAtoB?('0', 1, 15)
        !"0123456789abcde".containFromAtoB?('0', 1, 2)
        "0123456789abcde".containFromAtoB?('e', 0, 15)
        "0123456789abcde".containFromAtoB?('e', 14, 15)
        !"0123456789abcde".containFromAtoB?('e', 0, 14)
        !"0123456789abcde".containFromAtoB?('e', 15, 15)
        "0123456789abcde".containFromAtoB?('6', 0, 7)
        "0123456789abcde".containFromAtoB?('6', 0, 7)
        "0123456789abcde".containFromAtoB?('6', 6, 15)
        "0123456789abcde".containFromAtoB?('6', 6, 7)
        !"0123456789abcde".containFromAtoB?('6', 0, 6)
        !"0123456789abcde".containFromAtoB?('6', 7, 15)
        !"0123456789abcde".containFromAtoB?('6', 7, 7)
        "0123456789abcde".containFromAtoB?('7', 0, 8)
        "0123456789abcde".containFromAtoB?('7', 0, 8)
        "0123456789abcde".containFromAtoB?('7', 7, 15)
        "0123456789abcde".containFromAtoB?('7', 7, 8)
        !"0123456789abcde".containFromAtoB?('7', 0, 7)
        !"0123456789abcde".containFromAtoB?('7', 8, 15)
        !"0123456789abcde".containFromAtoB?('7', 8, 8)
        !"0123456789abcde".containFromAtoB?('w', 0, 15)
        !"0123456789abcde".containFromAtoB?('_', 0, 15)
        !"0123456789abcde".containFromAtoB?(')', 0, 15)
        !"0123456789abcde".containFromAtoB?('\0000', 0, 15)
        "0123456789abcdef".containFromAtoB?('0', 0, 16)
        "0123456789abcdef".containFromAtoB?('0', 0, 1)
        !"0123456789abcdef".containFromAtoB?('0', 1, 16)
        !"0123456789abcdef".containFromAtoB?('0', 1, 2)
        "0123456789abcdef".containFromAtoB?('f', 0, 16)
        "0123456789abcdef".containFromAtoB?('f', 15, 16)
        !"0123456789abcdef".containFromAtoB?('f', 0, 15)
        !"0123456789abcdef".containFromAtoB?('f', 16, 16)
        "0123456789abcdef".containFromAtoB?('6', 0, 7)
        "0123456789abcdef".containFromAtoB?('6', 0, 7)
        "0123456789abcdef".containFromAtoB?('6', 6, 16)
        "0123456789abcdef".containFromAtoB?('6', 6, 7)
        !"0123456789abcdef".containFromAtoB?('6', 0, 6)
        !"0123456789abcdef".containFromAtoB?('6', 7, 16)
        !"0123456789abcdef".containFromAtoB?('6', 7, 7)
        "0123456789abcdef".containFromAtoB?('7', 0, 8)
        "0123456789abcdef".containFromAtoB?('7', 0, 8)
        "0123456789abcdef".containFromAtoB?('7', 7, 16)
        "0123456789abcdef".containFromAtoB?('7', 7, 8)
        !"0123456789abcdef".containFromAtoB?('7', 0, 7)
        !"0123456789abcdef".containFromAtoB?('7', 8, 16)
        !"0123456789abcdef".containFromAtoB?('7', 8, 8)
        !"0123456789abcdef".containFromAtoB?('w', 0, 16)
        !"0123456789abcdef".containFromAtoB?('_', 0, 16)
        !"0123456789abcdef".containFromAtoB?(')', 0, 16)
        !"0123456789abcdef".containFromAtoB?('\0000', 0, 16)
        "0123456789abcdefz".containFromAtoB?('0', 0, 17)
        "0123456789abcdefz".containFromAtoB?('0', 0, 1)
        !"0123456789abcdefz".containFromAtoB?('0', 1, 17)
        !"0123456789abcdefz".containFromAtoB?('0', 1, 2)
        "0123456789abcdefz".containFromAtoB?('z', 0, 17)
        "0123456789abcdefz".containFromAtoB?('z', 16, 17)
        !"0123456789abcdefz".containFromAtoB?('z', 0, 16)
        !"0123456789abcdefz".containFromAtoB?('z', 17, 17)
        "0123456789abcdefz".containFromAtoB?('6', 0, 7)
        "0123456789abcdefz".containFromAtoB?('6', 0, 7)
        "0123456789abcdefz".containFromAtoB?('6', 6, 17)
        "0123456789abcdefz".containFromAtoB?('6', 6, 7)
        !"0123456789abcdefz".containFromAtoB?('6', 0, 6)
        !"0123456789abcdefz".containFromAtoB?('6', 7, 17)
        !"0123456789abcdefz".containFromAtoB?('6', 7, 7)
        "0123456789abcdefz".containFromAtoB?('7', 0, 8)
        "0123456789abcdefz".containFromAtoB?('7', 0, 8)
        "0123456789abcdefz".containFromAtoB?('7', 7, 17)
        "0123456789abcdefz".containFromAtoB?('7', 7, 8)
        !"0123456789abcdefz".containFromAtoB?('7', 0, 7)
        !"0123456789abcdefz".containFromAtoB?('7', 8, 17)
        !"0123456789abcdefz".containFromAtoB?('7', 8, 8)
        !"0123456789abcdefz".containFromAtoB?('w', 0, 17)
        !"0123456789abcdefz".containFromAtoB?('_', 0, 17)
        !"0123456789abcdefz".containFromAtoB?(')', 0, 17)
        !"0123456789abcdefz".containFromAtoB?('\0000', 0, 17)

#noinline
def testString_CountFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".countFromAtoB('1', 0, 0) == 0
        "".countFromAtoB('0', 0, 0) == 0
        "".countFromAtoB('0', 0, 1) : error_outOfRange
        "".countFromAtoB('0', 1, 0) : error_outOfRange
        "".countFromAtoB('0', -1, 0) : error_outOfRange
        "".countFromAtoB('0', 0, -1) : error_outOfRange
        "".countFromAtoB('0', 0, 9223372036854775807) : error_outOfRange
        "".countFromAtoB('0', 0, -9223372036854775808) : error_outOfRange
        "".countFromAtoB('0', -9223372036854775808, 0) : error_outOfRange
        "".countFromAtoB('0', -9223372036854775808, 9223372036854775807) : error_outOfRange
        "0".countFromAtoB('0', 0, 0) == 0
        "0".countFromAtoB('0', 1, 1) == 0
        "0".countFromAtoB('1', 0, 0) == 0
        "0".countFromAtoB('1', 1, 1) == 0
        "0".countFromAtoB('1', 0, 1) == 0
        "0".countFromAtoB('0', 0, 1) == 1
        "0".countFromAtoB('2', 0, 1) == 0
        "0".countFromAtoB('0', 0, 2) : error_outOfRange
        "0".countFromAtoB('0', 2, 0) : error_outOfRange
        "0".countFromAtoB('0', -1, 0) : error_outOfRange
        "0".countFromAtoB('0', 0, -1) : error_outOfRange
        "0".countFromAtoB('0', 0, 9223372036854775807) : error_outOfRange
        "0".countFromAtoB('0', 0, -9223372036854775808) : error_outOfRange
        "0".countFromAtoB('0', -9223372036854775808, 0) : error_outOfRange
        "0".countFromAtoB('0', -9223372036854775808, 9223372036854775807) : error_outOfRange
        "01".countFromAtoB('0', 0, 0) == 0
        "01".countFromAtoB('0', 1, 1) == 0
        "01".countFromAtoB('0', 2, 2) == 0
        "01".countFromAtoB('2', 0, 2) == 0
        "01".countFromAtoB('2', 0, 1) == 0
        "01".countFromAtoB('0', 1, 2) == 0
        "01".countFromAtoB('1', 0, 1) == 0
        "01".countFromAtoB('0', 0, 2) == 1
        "01".countFromAtoB('0', 0, 1) == 1
        "01".countFromAtoB('1', 0, 2) == 1
        "01".countFromAtoB('1', 1, 2) == 1
        "00".countFromAtoB('0', 0, 2) == 2
        "00".countFromAtoB('0', 0, 1) == 1
        "00".countFromAtoB('0', 1, 2) == 1
        "01".countFromAtoB('0', 0, 3) : error_outOfRange
        "01".countFromAtoB('0', 3, 0) : error_outOfRange
        "01".countFromAtoB('0', -1, 0) : error_outOfRange
        "01".countFromAtoB('0', 0, -1) : error_outOfRange
        "01".countFromAtoB('0', 0, 9223372036854775807) : error_outOfRange
        "01".countFromAtoB('0', 0, -9223372036854775808) : error_outOfRange
        "01".countFromAtoB('0', -9223372036854775808, 0) : error_outOfRange
        "01".countFromAtoB('0', -9223372036854775808, 9223372036854775807) : error_outOfRange
        "0123456789abcde".countFromAtoB('0', 0, 15) == 1
        "0123456789abcde".countFromAtoB('0', 0, 1) == 1
        "0123456789abcde".countFromAtoB('0', 1, 15) == 0
        "0123456789abcde".countFromAtoB('0', 1, 2) == 0
        "0123456789abcde".countFromAtoB('e', 0, 15) == 1
        "0123456789abcde".countFromAtoB('e', 14, 15) == 1
        "0123456789abcde".countFromAtoB('e', 0, 14) == 0
        "0123456789abcde".countFromAtoB('e', 15, 15) == 0
        "0123456789abcde".countFromAtoB('6', 0, 7) == 1
        "0123456789abcde".countFromAtoB('6', 0, 7) == 1
        "0123456789abcde".countFromAtoB('6', 6, 15) == 1
        "0123456789abcde".countFromAtoB('6', 6, 7) == 1
        "0123456789abcde".countFromAtoB('6', 0, 6) == 0
        "0123456789abcde".countFromAtoB('6', 7, 15) == 0
        "0123456789abcde".countFromAtoB('6', 7, 7) == 0
        "0123456789abcde".countFromAtoB('w', 0, 15) == 0
        "0123456789abcde".countFromAtoB('_', 0, 15) == 0
        "0123456789abcde".countFromAtoB(')', 0, 15) == 0
        "0123456789abcde".countFromAtoB('\0000', 0, 15) == 0
        "662345669a6cd66".countFromAtoB('6', 0, 15) == 7
        "662345669a6cd66".countFromAtoB('6', 1, 14) == 5
        "666666666666666".countFromAtoB('6', 1, 14) == 13
        "666666666666666".countFromAtoB('6', 0, 15) == 15
        "0123456789abcdef".countFromAtoB('0', 0, 16) == 1
        "0123456789abcdef".countFromAtoB('0', 0, 1) == 1
        "0123456789abcdef".countFromAtoB('0', 1, 16) == 0
        "0123456789abcdef".countFromAtoB('0', 1, 2) == 0
        "0123456789abcdef".countFromAtoB('f', 0, 16) == 1
        "0123456789abcdef".countFromAtoB('f', 15, 16) == 1
        "0123456789abcdef".countFromAtoB('f', 0, 15) == 0
        "0123456789abcdef".countFromAtoB('f', 16, 16) == 0
        "0123456789abcdef".countFromAtoB('6', 0, 7) == 1
        "0123456789abcdef".countFromAtoB('6', 0, 7) == 1
        "0123456789abcdef".countFromAtoB('6', 6, 16) == 1
        "0123456789abcdef".countFromAtoB('6', 6, 7) == 1
        "0123456789abcdef".countFromAtoB('6', 0, 6) == 0
        "0123456789abcdef".countFromAtoB('6', 7, 16) == 0
        "0123456789abcdef".countFromAtoB('6', 7, 7) == 0
        "0123456789abcdef".countFromAtoB('w', 0, 16) == 0
        "0123456789abcdef".countFromAtoB('_', 0, 16) == 0
        "0123456789abcdef".countFromAtoB(')', 0, 16) == 0
        "0123456789abcdef".countFromAtoB('\0000', 0, 16) == 0
        "662345669a6cd666".countFromAtoB('6', 0, 16) == 8
        "662345669a6cd666".countFromAtoB('6', 1, 15) == 6
        "6666666666666666".countFromAtoB('6', 1, 15) == 14
        "6666666666666666".countFromAtoB('6', 0, 16) == 16
        "0123456789abcdefz".countFromAtoB('0', 0, 17) == 1
        "0123456789abcdefz".countFromAtoB('0', 0, 1) == 1
        "0123456789abcdefz".countFromAtoB('0', 1, 17) == 0
        "0123456789abcdefz".countFromAtoB('0', 1, 2) == 0
        "0123456789abcdefz".countFromAtoB('z', 0, 17) == 1
        "0123456789abcdefz".countFromAtoB('z', 16, 17) == 1
        "0123456789abcdefz".countFromAtoB('z', 0, 16) == 0
        "0123456789abcdefz".countFromAtoB('z', 17, 17) == 0
        "0123456789abcdefz".countFromAtoB('6', 0, 7) == 1
        "0123456789abcdefz".countFromAtoB('6', 0, 7) == 1
        "0123456789abcdefz".countFromAtoB('6', 6, 17) == 1
        "0123456789abcdefz".countFromAtoB('6', 6, 7) == 1
        "0123456789abcdefz".countFromAtoB('6', 0, 6) == 0
        "0123456789abcdefz".countFromAtoB('6', 7, 17) == 0
        "0123456789abcdefz".countFromAtoB('6', 7, 7) == 0
        "0123456789abcdefz".countFromAtoB('w', 0, 17) == 0
        "0123456789abcdefz".countFromAtoB('_', 0, 17) == 0
        "0123456789abcdefz".countFromAtoB(')', 0, 17) == 0
        "0123456789abcdefz".countFromAtoB('\0000', 0, 17) == 0
        "662345669a6cd6666".countFromAtoB('6', 0, 17) == 9
        "662345669a6cd6666".countFromAtoB('6', 1, 16) == 7
        "66666666666666666".countFromAtoB('6', 0, 17) == 17
        "66666666666666666".countFromAtoB('6', 1, 16) == 15

#noinline
def testString_CountPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".countPartFromAtoB("0", 0, 0) == 0
        "1".countPartFromAtoB("1", 0, 1) == 1
        "1".countPartFromAtoB("1", 0, 0) == 0
        "1".countPartFromAtoB("1", 1, 1) == 0
        "2".countPartFromAtoB("1", 0, 1) == 0
        "2".countPartFromAtoB("1", 0, 0) == 0
        "2".countPartFromAtoB("1", 1, 1) == 0
        "2".countPartFromAtoB("21", 0, 1) == 0
        "2".countPartFromAtoB("12", 0, 1) == 0
        "12a234".countPartFromAtoB("1", 0, 1) == 1
        "12a234".countPartFromAtoB("1", 0, 2) == 1
        "12a234".countPartFromAtoB("1", 0, 6) == 1
        "12a234".countPartFromAtoB("4", 0, 6) == 1
        "12a234".countPartFromAtoB("4", 1, 6) == 1
        "12a234".countPartFromAtoB("4", 2, 6) == 1
        "12a234".countPartFromAtoB("4", 2, 5) == 0
        "12a234".countPartFromAtoB("4", 0, 5) == 0
        "12a234".countPartFromAtoB("2", 0, 5) == 2
        "12a234".countPartFromAtoB("12", 0, 6) == 1
        "12a234".countPartFromAtoB("12", 1, 6) == 0
        "12a234".countPartFromAtoB("23", 0, 6) == 1
        "12a234".countPartFromAtoB("23", 0, 5) == 1
        "12a234".countPartFromAtoB("23", 1, 5) == 1
        "12a234".countPartFromAtoB("23", 3, 5) == 1
        "12a234".countPartFromAtoB("23", 3, 4) == 0
        "12a234".countPartFromAtoB("23", 4, 6) == 0
        "12a234".countPartFromAtoB("234", 0, 6) == 1
        "12a234".countPartFromAtoB("234", 3, 6) == 1
        "12a234".countPartFromAtoB("234", 0, 5) == 0
        "12a234".countPartFromAtoB("234", 4, 6) == 0
        "12a234".countPartFromAtoB("22", 0, 6) == 0
        "12a234".countPartFromAtoB("2", -1, 2) : error_outOfRange
        "12a234".countPartFromAtoB("2", 2, 1) : error_outOfRange
        "12a234".countPartFromAtoB("2", -10, -1) : error_outOfRange
        "".countPartFromAtoB("", 0, 0) : error_nothingToLook
        "12".countPartFromAtoB("", 0, 0) : error_nothingToLook
        "123412b".countPartFromAtoB("12", 0, 3) == 1
        "123412b".countPartFromAtoB("12", 0, 6) == 2
        "222222b".countPartFromAtoB("222", 0, 7) == 2
        "222222b".countPartFromAtoB("222", 0, 6) == 2
        "222222b".countPartFromAtoB("222", 0, 5) == 1
        "22222222".countPartFromAtoB("222", 0, 8) == 2
        "22222222".countPartFromAtoB("222", 0, 7) == 2
        "22222222".countPartFromAtoB("222", 0, 6) == 2
        "22222222".countPartFromAtoB("222", 0, 5) == 1
        "22222222".countPartFromAtoB("222", 1, 7) == 2
        "1234567890123456789012345678901".countPartFromAtoB("123", 0, 31) == 3
        "1234567890123456789012345678901".countPartFromAtoB("123", 1, 31) == 2
        "1234567890123456789012345678901".countPartFromAtoB("1", 0, 31) == 4
        "1234567890123456789012345678901".countPartFromAtoB("123", 1, 30) == 2
        "12345678901234567890123456789012".countPartFromAtoB("123", 0, 32) == 3
        "12345678901234567890123456789012".countPartFromAtoB("123", 1, 32) == 2
        "12345678901234567890123456789012".countPartFromAtoB("1", 0, 32) == 4
        "12345678901234567890123456789012".countPartFromAtoB("1", 1, 31) == 3
        "123456789012345678901234567890123".countPartFromAtoB("123", 0, 33) == 4
        "123456789012345678901234567890123".countPartFromAtoB("123", 1, 33) == 3
        "123456789012345678901234567890123".countPartFromAtoB("1", 0, 33) == 4
        "123456789012345678901234567890123".countPartFromAtoB("1", 1, 32) == 3
        "1111111111111111111111111111111".countPartFromAtoB("11", 0, 31) == 15
        "1111111111111111111111111111111".countPartFromAtoB("11", 1, 31) == 15
        "1111111111111111111111111111111".countPartFromAtoB("11", 0, 30) == 15
        "1111111111111111111111111111111".countPartFromAtoB("11", 1, 30) == 14
        "11111111111111111111111111111111".countPartFromAtoB("11", 0, 32) == 16
        "11111111111111111111111111111111".countPartFromAtoB("11", 1, 32) == 15
        "11111111111111111111111111111111".countPartFromAtoB("11", 0, 31) == 15
        "11111111111111111111111111111111".countPartFromAtoB("11", 1, 31) == 15
        "111111111111111111111111111111111".countPartFromAtoB("11", 0, 33) == 16
        "111111111111111111111111111111111".countPartFromAtoB("11", 1, 33) == 16
        "111111111111111111111111111111111".countPartFromAtoB("11", 0, 32) == 16
        "111111111111111111111111111111111".countPartFromAtoB("11", 1, 32) == 15

#noinline
def testString_PartsEqual?(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".partsEqual?(0, "", 0, 0)
        !"".partsEqual?(1, "", 0, 0)
        !"".partsEqual?(-1, "", 0, 0)
        !"".partsEqual?(9223372036854775807, "", 0, 0)
        !"".partsEqual?(-9223372036854775808, "", 0, 0)
        !"".partsEqual?(0, "", 1, 0)
        !"".partsEqual?(0, "", -1, 0)
        !"".partsEqual?(0, "", 9223372036854775807, 0)
        !"".partsEqual?(0, "", -9223372036854775808, 0)
        !"".partsEqual?(0, "", 0, 1)
        !"".partsEqual?(0, "", 0, -1)
        !"".partsEqual?(0, "", 0, -9223372036854775808)
        !"".partsEqual?(0, "", 0, 9223372036854775807)
        !"".partsEqual?(-1, "", -1, -1)
        "1".partsEqual?(0, "1", 0, 1)
        "1".partsEqual?(1, "1", 1, 0)
        "1".partsEqual?(0, "01", 1, 1)
        "1".partsEqual?(1, "1", 0, 0)
        "1".partsEqual?(1, "2", 0, 0)
        !"1".partsEqual?(0, "01", 0, 1)
        !"1".partsEqual?(0, "2", 0, 1)
        !"1".partsEqual?(0, "1", 0, 2)
        !"1".partsEqual?(-1, "1", 0, 0)
        !"1".partsEqual?(-9223372036854775808, "1", 0, 0)
        !"1".partsEqual?(9223372036854775807, "1", 0, 0)
        "123456".partsEqual?(0, "123456", 0, 6)
        "123456".partsEqual?(1, "123456", 1, 5)
        "1234567890123456789012345678901".partsEqual?(0, "1234567890123456789012345678901", 0, 31)
        "1234567890123456789012345678901".partsEqual?(1, "1234567890123456789012345678901", 1, 30)
        "1234567890123456789012345678901".partsEqual?(1, "1234567890123456789012345678901", 1, 13)
        "1234567890123456789012345678901".partsEqual?(1, "1234567890123456789012345678901", 1, 0)
        !"1234567890123456789012345678901".partsEqual?(1, "1234567890123456789012345678901", 0, 13)
        !"0234567890123456789012345678901".partsEqual?(0, "1234567890123456789012345678901", 0, 31)
        !"1234567890123456789012345678900".partsEqual?(0, "1234567890123456789012345678901", 0, 31)
        !"1234567890123456789012345678900".partsEqual?(1, "1234567890123456789012345678901", 1, 30)
        "12345678901234567890123456789012".partsEqual?(0, "12345678901234567890123456789012", 0, 32)
        "12345678901234567890123456789012".partsEqual?(1, "12345678901234567890123456789012", 1, 31)
        "12345678901234567890123456789012".partsEqual?(1, "12345678901234567890123456789012", 1, 13)
        "12345678901234567890123456789012".partsEqual?(1, "12345678901234567890123456789012", 1, 0)
        !"12345678901234567890123456789012".partsEqual?(1, "12345678901234567890123456789012", 0, 13)
        !"02345678901234567890123456789012".partsEqual?(0, "12345678901234567890123456789012", 0, 32)
        !"12345678901234567890123456789010".partsEqual?(0, "12345678901234567890123456789012", 0, 32)
        !"12345678901234567890123456789010".partsEqual?(1, "12345678901234567890123456789012", 1, 31)
        "123456789012345678901234567890123".partsEqual?(0, "123456789012345678901234567890123", 0, 33)
        "123456789012345678901234567890123".partsEqual?(1, "123456789012345678901234567890123", 1, 32)
        "123456789012345678901234567890123".partsEqual?(1, "123456789012345678901234567890123", 1, 13)
        "123456789012345678901234567890123".partsEqual?(1, "123456789012345678901234567890123", 1, 0)
        !"123456789012345678901234567890123".partsEqual?(1, "123456789012345678901234567890123", 0, 13)
        !"023456789012345678901234567890133".partsEqual?(0, "123456789012345678901234567890123", 0, 33)
        !"123456789012345678901234567890120".partsEqual?(0, "123456789012345678901234567890123", 0, 33)
        !"123456789012345678901234567890120".partsEqual?(1, "123456789012345678901234567890123", 1, 32)

#noinline
def testString_LookNFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".lookNFromAtoB('a', 1, 0, 0).nothing?()
        "".lookNFromAtoB('a', 2, 0, 0).nothing?()
        "".lookNFromAtoB('a', 9223372036854775807, 0, 0).nothing?()
        "".lookNFromAtoB('a', -1, 1, 0) : error_outOfRange
        "".lookNFromAtoB('a', -9223372036854775808, 1, 0) : error_outOfRange
        "".lookNFromAtoB('a', 1, 1, 0) : error_outOfRange
        "".lookNFromAtoB('a', 1, 0, 1) : error_outOfRange
        "a".lookNFromAtoB('a', 1, 0, 1) == 0
        "a".lookNFromAtoB('a', 2, 0, 1).nothing?()
        "a".lookNFromAtoB('a', 1, 0, 0).nothing?()
        "a".lookNFromAtoB('a', 1, 1, 1).nothing?()
        "a".lookNFromAtoB('_', 1, 0, 1).nothing?()
        "a".lookNFromAtoB('a', 1, 1, 0) : error_outOfRange
        "a".lookNFromAtoB('a', 0, 0, 0) : error_outOfRange
        "a".lookNFromAtoB('a', -1, 0, 0) : error_outOfRange
        "a".lookNFromAtoB('a', -9223372036854775808, 0, 0) : error_outOfRange
        "a".lookNFromAtoB('_', 1, -1, 0) : error_outOfRange
        "a".lookNFromAtoB('_', 1, 0, -1) : error_outOfRange
        "a".lookNFromAtoB('a', 1, 0, 2) : error_outOfRange
        "a".lookNFromAtoB('a', 1, 2, 0) : error_outOfRange
        "ab".lookNFromAtoB('a', 1, 0, 1) == 0
        "ab".lookNFromAtoB('a', 2, 0, 1).nothing?()
        "ab".lookNFromAtoB('a', 1, 0, 2) == 0
        "ab".lookNFromAtoB('a', 2, 0, 2).nothing?()
        "ab".lookNFromAtoB('b', 1, 0, 2) == 1
        "ab".lookNFromAtoB('b', 2, 0, 2).nothing?()
        "ab".lookNFromAtoB('b', 1, 1, 2) == 1
        "ab".lookNFromAtoB('b', 2, 1, 2).nothing?()
        "bb".lookNFromAtoB('b', 1, 0, 2) == 0
        "bb".lookNFromAtoB('b', 2, 0, 2) == 1
        "ab".lookNFromAtoB('a', 1, 0, 0).nothing?()
        "ab".lookNFromAtoB('a', 2, 0, 0).nothing?()
        "ab".lookNFromAtoB('a', 0, 0, 0) : error_outOfRange
        "ab".lookNFromAtoB('a', -1, 0, 0) : error_outOfRange
        "ab".lookNFromAtoB('b', 1, 0, 0).nothing?()
        "aa".lookNFromAtoB('a', 1, 0, 1) == 0
        "aa".lookNFromAtoB('a', 2, 0, 1).nothing?()
        "aa".lookNFromAtoB('a', 1, 1, 2) == 1
        "aa".lookNFromAtoB('a', 2, 1, 2).nothing?()
        "aa".lookNFromAtoB('a', 1, 0, 2) == 0
        "aa".lookNFromAtoB('a', 2, 0, 2) == 1
        "aa".lookNFromAtoB('a', 1, 0, 0).nothing?()
        "aa".lookNFromAtoB('a', 1, 2, 2).nothing?()
        "ab".lookNFromAtoB('a', 1, 1, 2).nothing?()
        "ab".lookNFromAtoB('b', 1, 1, 2) == 1
        "ab".lookNFromAtoB('b', 1, 1, 1).nothing?()
        "ab".lookNFromAtoB('_', 1, 0, 2).nothing?()
        "ab".lookNFromAtoB('a', 1, 1, 0) : error_outOfRange
        "ab".lookNFromAtoB('a', 1, 3, 0) : error_outOfRange
        "ab".lookNFromAtoB('a', 2, 3, 0) : error_outOfRange
        "ab".lookNFromAtoB('_', 1, -1, 0) : error_outOfRange
        "ab".lookNFromAtoB('_', 1, 0, -1) : error_outOfRange
        "ab".lookNFromAtoB('a', 1, 0, 3) : error_outOfRange
        "ab".lookNFromAtoB('a', 1, 3, 0) : error_outOfRange
        "11111111".lookNFromAtoB('1', 1, 0, 8) == 0
        "11111111".lookNFromAtoB('1', 2, 0, 8) == 1
        "11111111".lookNFromAtoB('1', 7, 0, 8) == 6
        "11111111".lookNFromAtoB('1', 8, 0, 8) == 7
        "11111111".lookNFromAtoB('1', 2, 1, 8) == 2
        "11111111".lookNFromAtoB('1', 3, 1, 7) == 3
        "11110111".lookNFromAtoB('1', 4, 1, 7) == 5
        "1234567890123456789012345678901".lookNFromAtoB('1', 1, 0, 31) == 0
        "1234567890123456789012345678901".lookNFromAtoB('1', 2, 0, 31) == 10
        "1234567890123456789012345678901".lookNFromAtoB('1', 3, 0, 31) == 20
        "1234567890123456789012345678901".lookNFromAtoB('1', 4, 0, 31) == 30
        "1234567890123456789012345678901".lookNFromAtoB('1', 5, 0, 31).nothing?()
        "1234567890123456789012345678901".lookNFromAtoB('1', 1, 0, 11) == 0
        "1234567890123456789012345678901".lookNFromAtoB('1', 2, 0, 11) == 10
        "1234567890123456789012345678901".lookNFromAtoB('1', 3, 0, 11).nothing?()
        "1234567890123456789012345678901".lookNFromAtoB('2', 1, 0, 31) == 1
        "1234567890123456789012345678901".lookNFromAtoB('2', 2, 0, 31) == 11
        "1234567890123456789012345678901".lookNFromAtoB('2', 3, 0, 31) == 21
        "1234567890123456789012345678901".lookNFromAtoB('2', 4, 0, 31).nothing?()
        "1234567890123456789012345678901".lookNFromAtoB('2', 5, 0, 31).nothing?()
        "1234567890123456789012345678901".lookNFromAtoB('_', 1, 0, 31).nothing?()
        "1234567890123456789012345678901".lookNFromAtoB('_', 2, 0, 31).nothing?()
        "12345678901234567890123456789012".lookNFromAtoB('1', 1, 0, 32) == 0
        "12345678901234567890123456789012".lookNFromAtoB('1', 2, 0, 32) == 10
        "12345678901234567890123456789012".lookNFromAtoB('1', 3, 0, 32) == 20
        "12345678901234567890123456789012".lookNFromAtoB('1', 4, 0, 32) == 30
        "12345678901234567890123456789012".lookNFromAtoB('1', 5, 0, 32).nothing?()
        "12345678901234567890123456789012".lookNFromAtoB('1', 1, 0, 11) == 0
        "12345678901234567890123456789012".lookNFromAtoB('1', 2, 0, 11) == 10
        "12345678901234567890123456789012".lookNFromAtoB('1', 3, 0, 11).nothing?()
        "12345678901234567890123456789012".lookNFromAtoB('2', 1, 0, 32) == 1
        "12345678901234567890123456789012".lookNFromAtoB('2', 2, 0, 32) == 11
        "12345678901234567890123456789012".lookNFromAtoB('2', 3, 0, 32) == 21
        "12345678901234567890123456789012".lookNFromAtoB('2', 4, 0, 32) == 31
        "12345678901234567890123456789012".lookNFromAtoB('2', 5, 0, 32).nothing?()
        "12345678901234567890123456789012".lookNFromAtoB('_', 1, 0, 32).nothing?()
        "12345678901234567890123456789012".lookNFromAtoB('_', 2, 0, 32).nothing?()
        "123456789012345678901234567890123".lookNFromAtoB('1', 1, 0, 33) == 0
        "123456789012345678901234567890123".lookNFromAtoB('1', 2, 0, 33) == 10
        "123456789012345678901234567890123".lookNFromAtoB('1', 3, 0, 33) == 20
        "123456789012345678901234567890123".lookNFromAtoB('1', 4, 0, 33) == 30
        "123456789012345678901234567890123".lookNFromAtoB('1', 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookNFromAtoB('1', 1, 0, 11) == 0
        "123456789012345678901234567890123".lookNFromAtoB('1', 2, 0, 11) == 10
        "123456789012345678901234567890123".lookNFromAtoB('1', 3, 0, 11).nothing?()
        "123456789012345678901234567890123".lookNFromAtoB('2', 1, 0, 33) == 1
        "123456789012345678901234567890123".lookNFromAtoB('2', 2, 0, 33) == 11
        "123456789012345678901234567890123".lookNFromAtoB('2', 3, 0, 33) == 21
        "123456789012345678901234567890123".lookNFromAtoB('2', 4, 0, 33) == 31
        "123456789012345678901234567890123".lookNFromAtoB('2', 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookNFromAtoB('3', 1, 0, 33) == 2
        "123456789012345678901234567890123".lookNFromAtoB('3', 2, 0, 33) == 12
        "123456789012345678901234567890123".lookNFromAtoB('3', 3, 0, 33) == 22
        "123456789012345678901234567890123".lookNFromAtoB('3', 4, 0, 33) == 32
        "123456789012345678901234567890123".lookNFromAtoB('3', 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookNFromAtoB('_', 1, 0, 33).nothing?()
        "123456789012345678901234567890123".lookNFromAtoB('_', 2, 0, 33).nothing?()

#noinline
def testString_LookNPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".lookNPartFromAtoB("0", 1, 0, 0).nothing?()
        "".lookNPartFromAtoB("0", 2, 0, 0).nothing?()
        "".lookNPartFromAtoB("0", 9223372036854775807, 0, 0).nothing?()
        "".lookNPartFromAtoB("0", 0, 0, 0) : error_outOfRange
        "".lookNPartFromAtoB("0", -1, 0, 0) : error_outOfRange
        "".lookNPartFromAtoB("0", -9223372036854775808, 0, 0) : error_outOfRange
        "1".lookNPartFromAtoB("1", 1, 0, 1) == 0
        "1".lookNPartFromAtoB("1", 9223372036854775807, 0, 1).nothing?()
        "1".lookNPartFromAtoB("1", 0, 0, 1) : error_outOfRange
        "1".lookNPartFromAtoB("1", -1, 0, 1) : error_outOfRange
        "1".lookNPartFromAtoB("1", -9223372036854775808, 0, 1) : error_outOfRange
        "1".lookNPartFromAtoB("1", 1, 1, 0) : error_outOfRange
        "1".lookNPartFromAtoB("1", 1, 0, 0).nothing?()
        "1".lookNPartFromAtoB("1", 2, 0, 0).nothing?()
        "1".lookNPartFromAtoB("1", 1, 1, 1).nothing?()
        "1".lookNPartFromAtoB("1", 2, 1, 1).nothing?()
        "2".lookNPartFromAtoB("1", 1, 0, 1).nothing?()
        "2".lookNPartFromAtoB("1", 2, 0, 1).nothing?()
        "2".lookNPartFromAtoB("1", 1, 0, 0).nothing?()
        "2".lookNPartFromAtoB("1", 2, 0, 0).nothing?()
        "2".lookNPartFromAtoB("1", 1, 1, 1).nothing?()
        "2".lookNPartFromAtoB("1", 2, 1, 1).nothing?()
        "2".lookNPartFromAtoB("21", 1, 0, 1).nothing?()
        "2".lookNPartFromAtoB("21", 2, 0, 1).nothing?()
        "2".lookNPartFromAtoB("12", 1, 0, 1).nothing?()
        "2".lookNPartFromAtoB("12", 2, 0, 1).nothing?()
        "12a234".lookNPartFromAtoB("1", 1, 0, 1) == 0
        "12a234".lookNPartFromAtoB("1", 0, 0, 1) : error_outOfRange
        "12a234".lookNPartFromAtoB("1", -1, 0, 1) : error_outOfRange
        "12a234".lookNPartFromAtoB("1", -9223372036854775808, 0, 1) : error_outOfRange
        "12a234".lookNPartFromAtoB("1", 2, 0, 1).nothing?()
        "12a234".lookNPartFromAtoB("1", 1, 0, 2) == 0
        "12a234".lookNPartFromAtoB("1", 2, 0, 2).nothing?()
        "12a234".lookNPartFromAtoB("1", 1, 0, 6) == 0
        "12a234".lookNPartFromAtoB("1", 2, 0, 6).nothing?()
        "12a234".lookNPartFromAtoB("4", 1, 0, 6) == 5
        "12a234".lookNPartFromAtoB("4", 2, 0, 6).nothing?()
        "12a234".lookNPartFromAtoB("4", 1, 1, 6) == 5
        "12a234".lookNPartFromAtoB("4", 2, 1, 6).nothing?()
        "12a234".lookNPartFromAtoB("4", 1, 2, 6) == 5
        "12a234".lookNPartFromAtoB("4", 2, 2, 6).nothing?()
        "12a234".lookNPartFromAtoB("4", 1, 2, 5).nothing?()
        "12a234".lookNPartFromAtoB("4", 2, 2, 5).nothing?()
        "12a234".lookNPartFromAtoB("4", 1, 0, 5).nothing?()
        "12a234".lookNPartFromAtoB("4", 2, 0, 5).nothing?()
        "12a234".lookNPartFromAtoB("2", 1, 0, 5) == 1
        "12a234".lookNPartFromAtoB("2", 2, 0, 5) == 3
        "12a234".lookNPartFromAtoB("2", 1, 2, 5) == 3
        "12a234".lookNPartFromAtoB("2", 2, 2, 5).nothing?()
        "12a234".lookNPartFromAtoB("2", 3, 0, 5).nothing?()
        "12a234".lookNPartFromAtoB("12", 1, 0, 6) == 0
        "12a234".lookNPartFromAtoB("12", 2, 0, 6).nothing?()
        "12a234".lookNPartFromAtoB("12", 1, 1, 6).nothing?()
        "12a234".lookNPartFromAtoB("12", 2, 1, 6).nothing?()
        "12a234".lookNPartFromAtoB("23", 1, 0, 6) == 3
        "12a234".lookNPartFromAtoB("23", 2, 0, 6).nothing?()
        "12a234".lookNPartFromAtoB("23", 1, 0, 5) == 3
        "12a234".lookNPartFromAtoB("23", 2, 0, 5).nothing?()
        "12a234".lookNPartFromAtoB("23", 1, 1, 5) == 3
        "12a234".lookNPartFromAtoB("23", 2, 1, 5).nothing?()
        "12a234".lookNPartFromAtoB("23", 1, 3, 5) == 3
        "12a234".lookNPartFromAtoB("23", 2, 3, 5).nothing?()
        "12a234".lookNPartFromAtoB("23", 1, 3, 4).nothing?()
        "12a234".lookNPartFromAtoB("23", 2, 3, 4).nothing?()
        "12a234".lookNPartFromAtoB("23", 1, 4, 6).nothing?()
        "12a234".lookNPartFromAtoB("23", 2, 4, 6).nothing?()
        "12a234".lookNPartFromAtoB("234", 1, 0, 6) == 3
        "12a234".lookNPartFromAtoB("234", 2, 0, 6).nothing?()
        "12a234".lookNPartFromAtoB("234", 1, 3, 6) == 3
        "12a234".lookNPartFromAtoB("234", 2, 3, 6).nothing?()
        "12a234".lookNPartFromAtoB("234", 1, 0, 5).nothing?()
        "12a234".lookNPartFromAtoB("234", 2, 0, 5).nothing?()
        "12a234".lookNPartFromAtoB("234", 1, 4, 6).nothing?()
        "12a234".lookNPartFromAtoB("234", 2, 4, 6).nothing?()
        "12a234".lookNPartFromAtoB("22", 1, 0, 6).nothing?()
        "12a234".lookNPartFromAtoB("22", 2, 0, 6).nothing?()
        "12a234".lookNPartFromAtoB("2", 1, -1, 2) : error_outOfRange
        "12a234".lookNPartFromAtoB("2", 1, 2, 1) : error_outOfRange
        "12a234".lookNPartFromAtoB("2", 1, -10, -1) : error_outOfRange
        "".lookNPartFromAtoB("", 1, 0, 0) : error_nothingToLook
        "12".lookNPartFromAtoB("", 1, 0, 0) : error_nothingToLook
        "123412b".lookNPartFromAtoB("12", 1, 0, 3) == 0
        "123412b".lookNPartFromAtoB("12", 2, 0, 3).nothing?()
        "123412b".lookNPartFromAtoB("12", 1, 0, 6) == 0
        "123412b".lookNPartFromAtoB("12", 2, 0, 6) == 4
        "123412b".lookNPartFromAtoB("12", 3, 0, 6).nothing?()
        "222222b".lookNPartFromAtoB("222", 1, 0, 7) == 0
        "222222b".lookNPartFromAtoB("222", 2, 0, 7) == 3
        "222222b".lookNPartFromAtoB("222", 3, 0, 7).nothing?()
        "222222b".lookNPartFromAtoB("222", 1, 1, 6) == 1
        "222222b".lookNPartFromAtoB("222", 2, 1, 6).nothing?()
        "222222b".lookNPartFromAtoB("222", 1, 2, 5) == 2
        "22222222".lookNPartFromAtoB("222", 1, 0, 8) == 0
        "22222222".lookNPartFromAtoB("222", 2, 0, 8) == 3
        "22222222".lookNPartFromAtoB("222", 3, 0, 8).nothing?()
        "22222222".lookNPartFromAtoB("222", 1, 1, 7) == 1
        "22222222".lookNPartFromAtoB("222", 2, 1, 7) == 4
        "22222222".lookNPartFromAtoB("222", 3, 1, 7).nothing?()
        "1234567890123456789012345678901".lookNPartFromAtoB("1", 1, 0, 31) == 0
        "1234567890123456789012345678901".lookNPartFromAtoB("1", 2, 0, 31) == 10
        "1234567890123456789012345678901".lookNPartFromAtoB("1", 3, 0, 31) == 20
        "1234567890123456789012345678901".lookNPartFromAtoB("1", 4, 0, 31) == 30
        "1234567890123456789012345678901".lookNPartFromAtoB("1", 5, 0, 31).nothing?()
        "1234567890123456789012345678901".lookNPartFromAtoB("1", 1, 1, 30) == 10
        "1234567890123456789012345678901".lookNPartFromAtoB("1", 2, 1, 30) == 20
        "1234567890123456789012345678901".lookNPartFromAtoB("1", 3, 1, 30).nothing?()
        "1234567890123456789012345678901".lookNPartFromAtoB("12", 1, 0, 31) == 0
        "1234567890123456789012345678901".lookNPartFromAtoB("12", 2, 0, 31) == 10
        "1234567890123456789012345678901".lookNPartFromAtoB("12", 3, 0, 31) == 20
        "1234567890123456789012345678901".lookNPartFromAtoB("12", 4, 0, 31).nothing?()
        "1234567890123456789012345678901".lookNPartFromAtoB("1", 1, 0, 15) == 0
        "1234567890123456789012345678901".lookNPartFromAtoB("1", 2, 0, 15) == 10
        "1234567890123456789012345678901".lookNPartFromAtoB("1", 3, 0, 15).nothing?()
        "12345678901234567890123456789012".lookNPartFromAtoB("1", 1, 0, 32) == 0
        "12345678901234567890123456789012".lookNPartFromAtoB("1", 2, 0, 32) == 10
        "12345678901234567890123456789012".lookNPartFromAtoB("1", 3, 0, 32) == 20
        "12345678901234567890123456789012".lookNPartFromAtoB("1", 4, 0, 32) == 30
        "12345678901234567890123456789012".lookNPartFromAtoB("1", 5, 0, 32).nothing?()
        "12345678901234567890123456789012".lookNPartFromAtoB("2", 1, 0, 32) == 1
        "12345678901234567890123456789012".lookNPartFromAtoB("2", 2, 0, 32) == 11
        "12345678901234567890123456789012".lookNPartFromAtoB("2", 3, 0, 32) == 21
        "12345678901234567890123456789012".lookNPartFromAtoB("2", 4, 0, 32) == 31
        "12345678901234567890123456789012".lookNPartFromAtoB("2", 5, 0, 32).nothing?()
        "12345678901234567890123456789012".lookNPartFromAtoB("1", 1, 1, 30) == 10
        "12345678901234567890123456789012".lookNPartFromAtoB("1", 2, 1, 30) == 20
        "12345678901234567890123456789012".lookNPartFromAtoB("1", 3, 1, 30).nothing?()
        "12345678901234567890123456789012".lookNPartFromAtoB("12", 1, 0, 32) == 0
        "12345678901234567890123456789012".lookNPartFromAtoB("12", 2, 0, 32) == 10
        "12345678901234567890123456789012".lookNPartFromAtoB("12", 3, 0, 32) == 20
        "12345678901234567890123456789012".lookNPartFromAtoB("12", 4, 0, 32) == 30
        "12345678901234567890123456789012".lookNPartFromAtoB("12", 5, 0, 32).nothing?()
        "12345678901234567890123456789012".lookNPartFromAtoB("1", 1, 0, 15) == 0
        "12345678901234567890123456789012".lookNPartFromAtoB("1", 2, 0, 15) == 10
        "12345678901234567890123456789012".lookNPartFromAtoB("1", 3, 0, 15).nothing?()
        "123456789012345678901234567890123".lookNPartFromAtoB("1", 1, 0, 33) == 0
        "123456789012345678901234567890123".lookNPartFromAtoB("1", 2, 0, 33) == 10
        "123456789012345678901234567890123".lookNPartFromAtoB("1", 3, 0, 33) == 20
        "123456789012345678901234567890123".lookNPartFromAtoB("1", 4, 0, 33) == 30
        "123456789012345678901234567890123".lookNPartFromAtoB("1", 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookNPartFromAtoB("3", 1, 0, 33) == 2
        "123456789012345678901234567890123".lookNPartFromAtoB("3", 2, 0, 33) == 12
        "123456789012345678901234567890123".lookNPartFromAtoB("3", 3, 0, 33) == 22
        "123456789012345678901234567890123".lookNPartFromAtoB("3", 4, 0, 33) == 32
        "123456789012345678901234567890123".lookNPartFromAtoB("3", 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookNPartFromAtoB("1", 1, 1, 30) == 10
        "123456789012345678901234567890123".lookNPartFromAtoB("1", 2, 1, 30) == 20
        "123456789012345678901234567890123".lookNPartFromAtoB("1", 3, 1, 30).nothing?()
        "123456789012345678901234567890123".lookNPartFromAtoB("12", 1, 0, 33) == 0
        "123456789012345678901234567890123".lookNPartFromAtoB("12", 2, 0, 33) == 10
        "123456789012345678901234567890123".lookNPartFromAtoB("12", 3, 0, 33) == 20
        "123456789012345678901234567890123".lookNPartFromAtoB("12", 4, 0, 33) == 30
        "123456789012345678901234567890123".lookNPartFromAtoB("12", 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookNPartFromAtoB("123", 1, 0, 33) == 0
        "123456789012345678901234567890123".lookNPartFromAtoB("123", 2, 0, 33) == 10
        "123456789012345678901234567890123".lookNPartFromAtoB("123", 3, 0, 33) == 20
        "123456789012345678901234567890123".lookNPartFromAtoB("123", 4, 0, 33) == 30
        "123456789012345678901234567890123".lookNPartFromAtoB("123", 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookNPartFromAtoB("23", 1, 0, 33) == 1
        "123456789012345678901234567890123".lookNPartFromAtoB("23", 2, 0, 33) == 11
        "123456789012345678901234567890123".lookNPartFromAtoB("23", 3, 0, 33) == 21
        "123456789012345678901234567890123".lookNPartFromAtoB("23", 4, 0, 33) == 31
        "123456789012345678901234567890123".lookNPartFromAtoB("23", 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookNPartFromAtoB("1", 1, 0, 15) == 0
        "123456789012345678901234567890123".lookNPartFromAtoB("1", 2, 0, 15) == 10
        "123456789012345678901234567890123".lookNPartFromAtoB("1", 3, 0, 15).nothing?()
        "1111111111111111111111111111111".lookNPartFromAtoB("11", 1, 0, 31) == 0
        "1111111111111111111111111111111".lookNPartFromAtoB("11", 2, 0, 31) == 2
        "1111111111111111111111111111111".lookNPartFromAtoB("11", 15, 0, 31) == 28
        "1111111111111111111111111111111".lookNPartFromAtoB("11", 16, 0, 31).nothing?()
        "1111111111111111111111111111111".lookNPartFromAtoB("11", 1, 1, 30) == 1
        "1111111111111111111111111111111".lookNPartFromAtoB("11", 2, 1, 30) == 3
        "1111111111111111111111111111111".lookNPartFromAtoB("11", 14, 1, 30) == 27
        "1111111111111111111111111111111".lookNPartFromAtoB("11", 15, 1, 30).nothing?()
        "11111111111111111111111111111111".lookNPartFromAtoB("11", 1, 0, 32) == 0
        "11111111111111111111111111111111".lookNPartFromAtoB("11", 2, 0, 32) == 2
        "11111111111111111111111111111111".lookNPartFromAtoB("11", 16, 0, 32) == 30
        "11111111111111111111111111111111".lookNPartFromAtoB("11", 17, 0, 32).nothing?()
        "11111111111111111111111111111111".lookNPartFromAtoB("11", 1, 1, 31) == 1
        "11111111111111111111111111111111".lookNPartFromAtoB("11", 2, 1, 31) == 3
        "11111111111111111111111111111111".lookNPartFromAtoB("11", 15, 1, 31) == 29
        "11111111111111111111111111111111".lookNPartFromAtoB("11", 16, 1, 31).nothing?()
        "111111111111111111111111111111111".lookNPartFromAtoB("11", 1, 0, 33) == 0
        "111111111111111111111111111111111".lookNPartFromAtoB("11", 2, 0, 33) == 2
        "111111111111111111111111111111111".lookNPartFromAtoB("11", 16, 0, 33) == 30
        "111111111111111111111111111111111".lookNPartFromAtoB("11", 17, 0, 33).nothing?()
        "111111111111111111111111111111111".lookNPartFromAtoB("11", 1, 1, 32) == 1
        "111111111111111111111111111111111".lookNPartFromAtoB("11", 2, 1, 32) == 3
        "111111111111111111111111111111111".lookNPartFromAtoB("11", 15, 1, 32) == 29
        "111111111111111111111111111111111".lookNPartFromAtoB("11", 16, 1, 32).nothing?()

#noinline
def testString_LookAllFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".lookAllFromAtoB('a', 0, 0) == []
        "".lookAllFromAtoB('a', 1, 0) : error_outOfRange
        "".lookAllFromAtoB('a', 0, 1) : error_outOfRange
        "a".lookAllFromAtoB('a', 0, 1) == [0]
        "a".lookAllFromAtoB('a', 0, 0) == []
        "a".lookAllFromAtoB('a', 1, 1) == []
        "a".lookAllFromAtoB('b', 0, 1) == []
        "a".lookAllFromAtoB('c', 0, 1) == []
        "a".lookAllFromAtoB('a', 1, 0) : error_outOfRange
        "a".lookAllFromAtoB('c', -1, 0) : error_outOfRange
        "a".lookAllFromAtoB('c', 0, -1) : error_outOfRange
        "a".lookAllFromAtoB('a', 0, 2) : error_outOfRange
        "a".lookAllFromAtoB('a', 2, 0) : error_outOfRange
        "ad".lookAllFromAtoB('a', 0, 1) == [0]
        "ad".lookAllFromAtoB('a', 0, 2) == [0]
        "ad".lookAllFromAtoB('d', 0, 2) == [1]
        "ad".lookAllFromAtoB('d', 1, 2) == [1]
        "dd".lookAllFromAtoB('d', 0, 2) == [0, 1]
        "ad".lookAllFromAtoB('a', 0, 0) == []
        "ad".lookAllFromAtoB('d', 0, 0) == []
        "aa".lookAllFromAtoB('a', 0, 1) == [0]
        "aa".lookAllFromAtoB('a', 1, 2) == [1]
        "aa".lookAllFromAtoB('a', 0, 2) == [0, 1]
        "aa".lookAllFromAtoB('a', 0, 0) == []
        "aa".lookAllFromAtoB('a', 2, 2) == []
        "ad".lookAllFromAtoB('a', 1, 2) == []
        "ad".lookAllFromAtoB('d', 1, 1) == []
        "ad".lookAllFromAtoB('b', 0, 2) == []
        "ad".lookAllFromAtoB('c', 0, 2) == []
        "ad".lookAllFromAtoB('a', 1, 0) : error_outOfRange
        "ad".lookAllFromAtoB('a', 3, 0) : error_outOfRange
        "ad".lookAllFromAtoB('c', -1, 0) : error_outOfRange
        "ad".lookAllFromAtoB('c', 0, -1) : error_outOfRange
        "ad".lookAllFromAtoB('a', 0, 3) : error_outOfRange
        "ad".lookAllFromAtoB('a', 3, 0) : error_outOfRange
        "ad_2d2a".lookAllFromAtoB('2', 0, 6) == [3, 5]
        "11111111".lookAllFromAtoB('1', 0, 8) == [0, 1, 2, 3, 4, 5, 6, 7]
        "11111111".lookAllFromAtoB('1', 1, 8) == [1, 2, 3, 4, 5, 6, 7]
        "11111111".lookAllFromAtoB('1', 1, 7) == [1, 2, 3, 4, 5, 6]
        "11110111".lookAllFromAtoB('1', 1, 7) == [1, 2, 3, 5, 6]
        "1234567890123456789012345678901".lookAllFromAtoB('1', 0, 31) == [0, 10, 20, 30]
        "1234567890123456789012345678901".lookAllFromAtoB('1', 0, 15) == [0, 10]
        "1234567890123456789012345678901".lookAllFromAtoB('1', 2, 21) == [10, 20]
        "1234567890123456789012345678901".lookAllFromAtoB('1', 2, 10) == []
        "1234567890123456789012345678901".lookAllFromAtoB('2', 0, 31) == [1, 11, 21]
        "1234567890123456789012345678901".lookAllFromAtoB('2', 0, 15) == [1, 11]
        "1234567890123456789012345678901".lookAllFromAtoB('2', 2, 21) == [11]
        "1234567890123456789012345678901".lookAllFromAtoB('2', 2, 10) == []
        "1234567890123456789012345678901".lookAllFromAtoB('3', 0, 31) == [2, 12, 22]
        "1234567890123456789012345678901".lookAllFromAtoB('3', 0, 15) == [2, 12]
        "1234567890123456789012345678901".lookAllFromAtoB('3', 2, 21) == [2, 12]
        "1234567890123456789012345678901".lookAllFromAtoB('3', 2, 10) == [2]
        "12345678901234567890123456789012".lookAllFromAtoB('1', 0, 32) == [0, 10, 20, 30]
        "12345678901234567890123456789012".lookAllFromAtoB('1', 0, 15) == [0, 10]
        "12345678901234567890123456789012".lookAllFromAtoB('1', 2, 21) == [10, 20]
        "12345678901234567890123456789012".lookAllFromAtoB('1', 2, 10) == []
        "12345678901234567890123456789012".lookAllFromAtoB('2', 0, 32) == [1, 11, 21, 31]
        "12345678901234567890123456789012".lookAllFromAtoB('2', 0, 15) == [1, 11]
        "12345678901234567890123456789012".lookAllFromAtoB('2', 2, 21) == [11]
        "12345678901234567890123456789012".lookAllFromAtoB('2', 2, 10) == []
        "12345678901234567890123456789012".lookAllFromAtoB('3', 0, 32) == [2, 12, 22]
        "12345678901234567890123456789012".lookAllFromAtoB('3', 0, 15) == [2, 12]
        "12345678901234567890123456789012".lookAllFromAtoB('3', 2, 21) == [2, 12]
        "12345678901234567890123456789012".lookAllFromAtoB('3', 2, 10) == [2]
        "123456789012345678901234567890123".lookAllFromAtoB('1', 0, 33) == [0, 10, 20, 30]
        "123456789012345678901234567890123".lookAllFromAtoB('1', 0, 15) == [0, 10]
        "123456789012345678901234567890123".lookAllFromAtoB('1', 2, 21) == [10, 20]
        "123456789012345678901234567890123".lookAllFromAtoB('1', 2, 10) == []
        "123456789012345678901234567890123".lookAllFromAtoB('2', 0, 33) == [1, 11, 21, 31]
        "123456789012345678901234567890123".lookAllFromAtoB('2', 0, 15) == [1, 11]
        "123456789012345678901234567890123".lookAllFromAtoB('2', 2, 21) == [11]
        "123456789012345678901234567890123".lookAllFromAtoB('2', 2, 10) == []
        "123456789012345678901234567890123".lookAllFromAtoB('3', 0, 33) == [2, 12, 22, 32]
        "123456789012345678901234567890123".lookAllFromAtoB('3', 0, 15) == [2, 12]
        "123456789012345678901234567890123".lookAllFromAtoB('3', 2, 21) == [2, 12]
        "123456789012345678901234567890123".lookAllFromAtoB('3', 2, 10) == [2]
        "0000000000000000000000000000000".lookAllFromAtoB('0', 0, 31) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
        "0000000000000000000000000000000".lookAllFromAtoB('0', 1, 30) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
        "00000000000000000000000000000000".lookAllFromAtoB('0', 0, 32) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
        "00000000000000000000000000000000".lookAllFromAtoB('0', 1, 31) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
        "000000000000000000000000000000000".lookAllFromAtoB('0', 0, 33) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
        "000000000000000000000000000000000".lookAllFromAtoB('0', 1, 32) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]

#noinline
def testString_LookAllPartsFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".lookAllPartsFromAtoB("0", 0, 0) == []
        "".lookAllPartsFromAtoB("10", 0, 0) == []
        "1".lookAllPartsFromAtoB("1", 0, 1) == [0]
        "1".lookAllPartsFromAtoB("1", 0, 0) == []
        "1".lookAllPartsFromAtoB("1", 1, 1) == []
        "2".lookAllPartsFromAtoB("1", 0, 1) == []
        "2".lookAllPartsFromAtoB("1", 0, 0) == []
        "2".lookAllPartsFromAtoB("1", 1, 1) == []
        "2".lookAllPartsFromAtoB("21", 0, 1) == []
        "2".lookAllPartsFromAtoB("12", 0, 1) == []
        "12_234".lookAllPartsFromAtoB("1", 0, 1) == [0]
        "12_234".lookAllPartsFromAtoB("1", 0, 2) == [0]
        "12_234".lookAllPartsFromAtoB("1", 0, 6) == [0]
        "12_234".lookAllPartsFromAtoB("4", 0, 6) == [5]
        "12_234".lookAllPartsFromAtoB("4", 1, 6) == [5]
        "12_234".lookAllPartsFromAtoB("4", 2, 6) == [5]
        "12_234".lookAllPartsFromAtoB("4", 2, 5) == []
        "12_234".lookAllPartsFromAtoB("4", 0, 5) == []
        "12_234".lookAllPartsFromAtoB("2", 0, 5) == [1, 3]
        "12_234".lookAllPartsFromAtoB("12", 0, 6) == [0]
        "12_234".lookAllPartsFromAtoB("12", 1, 6) == []
        "12_234".lookAllPartsFromAtoB("23", 0, 6) == [3]
        "12_234".lookAllPartsFromAtoB("23", 0, 5) == [3]
        "12_234".lookAllPartsFromAtoB("23", 1, 5) == [3]
        "12_234".lookAllPartsFromAtoB("23", 3, 5) == [3]
        "12_234".lookAllPartsFromAtoB("23", 3, 4) == []
        "12_234".lookAllPartsFromAtoB("23", 4, 6) == []
        "12_234".lookAllPartsFromAtoB("234", 0, 6) == [3]
        "12_234".lookAllPartsFromAtoB("234", 3, 6) == [3]
        "12_234".lookAllPartsFromAtoB("234", 0, 5) == []
        "12_234".lookAllPartsFromAtoB("234", 4, 6) == []
        "12_234".lookAllPartsFromAtoB("22", 0, 6) == []
        "12_234".lookAllPartsFromAtoB("2_", 0, 6) == [1]
        "12_234".lookAllPartsFromAtoB("2", -1, 2) : error_outOfRange
        "12_234".lookAllPartsFromAtoB("2", 2, 1) : error_outOfRange
        "12_234".lookAllPartsFromAtoB("2", -10, -1) : error_outOfRange
        "".lookAllPartsFromAtoB("", 0, 0) : error_nothingToLook
        "12".lookAllPartsFromAtoB("", 0, 0) : error_nothingToLook
        "123412b".lookAllPartsFromAtoB("12", 0, 3) == [0]
        "123412b".lookAllPartsFromAtoB("12", 0, 6) == [0, 4]
        "222222b".lookAllPartsFromAtoB("222", 0, 7) == [0, 3]
        "222222b".lookAllPartsFromAtoB("222", 0, 6) == [0, 3]
        "222222b".lookAllPartsFromAtoB("222", 0, 5) == [0]
        "22222222".lookAllPartsFromAtoB("222", 0, 8) == [0, 3]
        "22222222".lookAllPartsFromAtoB("222", 0, 7) == [0, 3]
        "22222222".lookAllPartsFromAtoB("222", 0, 6) == [0, 3]
        "22222222".lookAllPartsFromAtoB("222", 0, 5) == [0]
        "22222222".lookAllPartsFromAtoB("222", 1, 7) == [1, 4]
        "1234567890123456789012345678901".lookAllPartsFromAtoB("12", 0, 31) == [0, 10, 20]
        "1234567890123456789012345678901".lookAllPartsFromAtoB("01", 0, 31) == [9, 19, 29]
        "1234567890123456789012345678901".lookAllPartsFromAtoB("01", 0, 30) == [9, 19]
        "1234567890123456789012345678901".lookAllPartsFromAtoB("12", 1, 30) == [10, 20]
        "1234567890123456789012345678901".lookAllPartsFromAtoB("01", 1, 30) == [9, 19]
        "1234567890123456789012345678901".lookAllPartsFromAtoB("123", 0, 31) == [0, 10, 20]
        "1234567890123456789012345678901".lookAllPartsFromAtoB("012", 0, 31) == [9, 19]
        "1234567890123456789012345678901".lookAllPartsFromAtoB("012", 0, 30) == [9, 19]
        "1234567890123456789012345678901".lookAllPartsFromAtoB("123", 1, 30) == [10, 20]
        "1234567890123456789012345678901".lookAllPartsFromAtoB("012", 1, 30) == [9, 19]
        "12345678901234567890123456789012".lookAllPartsFromAtoB("12", 0, 32) == [0, 10, 20, 30]
        "12345678901234567890123456789012".lookAllPartsFromAtoB("01", 0, 32) == [9, 19, 29]
        "12345678901234567890123456789012".lookAllPartsFromAtoB("01", 0, 30) == [9, 19]
        "12345678901234567890123456789012".lookAllPartsFromAtoB("12", 1, 31) == [10, 20]
        "12345678901234567890123456789012".lookAllPartsFromAtoB("01", 1, 31) == [9, 19, 29]
        "12345678901234567890123456789012".lookAllPartsFromAtoB("123", 0, 32) == [0, 10, 20]
        "12345678901234567890123456789012".lookAllPartsFromAtoB("012", 0, 32) == [9, 19, 29]
        "12345678901234567890123456789012".lookAllPartsFromAtoB("012", 0, 30) == [9, 19]
        "12345678901234567890123456789012".lookAllPartsFromAtoB("123", 1, 31) == [10, 20]
        "12345678901234567890123456789012".lookAllPartsFromAtoB("012", 1, 31) == [9, 19]
        "123456789012345678901234567890123".lookAllPartsFromAtoB("12", 0, 33) == [0, 10, 20, 30]
        "123456789012345678901234567890123".lookAllPartsFromAtoB("01", 0, 33) == [9, 19, 29]
        "123456789012345678901234567890123".lookAllPartsFromAtoB("01", 0, 30) == [9, 19]
        "123456789012345678901234567890123".lookAllPartsFromAtoB("12", 1, 32) == [10, 20, 30]
        "123456789012345678901234567890123".lookAllPartsFromAtoB("01", 1, 32) == [9, 19, 29]
        "123456789012345678901234567890123".lookAllPartsFromAtoB("123", 0, 33) == [0, 10, 20, 30]
        "123456789012345678901234567890123".lookAllPartsFromAtoB("012", 0, 33) == [9, 19, 29]
        "123456789012345678901234567890123".lookAllPartsFromAtoB("012", 0, 30) == [9, 19]
        "123456789012345678901234567890123".lookAllPartsFromAtoB("123", 1, 32) == [10, 20]
        "123456789012345678901234567890123".lookAllPartsFromAtoB("012", 1, 32) == [9, 19, 29]
        "1111111111111111111111111111111".lookAllPartsFromAtoB("11", 0, 31) == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]
        "1111111111111111111111111111111".lookAllPartsFromAtoB("11", 1, 30) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]
        "11111111111111111111111111111111".lookAllPartsFromAtoB("11", 0, 32) == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]
        "11111111111111111111111111111111".lookAllPartsFromAtoB("11", 1, 31) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]
        "111111111111111111111111111111111".lookAllPartsFromAtoB("11", 0, 33) == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]
        "111111111111111111111111111111111".lookAllPartsFromAtoB("11", 1, 32) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]

#noinline
def testString_LookBackNFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".lookBackNFromAtoB('a', 1, 0, 0).nothing?()
        "".lookBackNFromAtoB('a', 2, 0, 0).nothing?()
        "".lookBackNFromAtoB('a', 9223372036854775807, 0, 0).nothing?()
        "".lookBackNFromAtoB('a', -1, 1, 0) : error_outOfRange
        "".lookBackNFromAtoB('a', -9223372036854775808, 1, 0) : error_outOfRange
        "".lookBackNFromAtoB('a', 1, 1, 0) : error_outOfRange
        "".lookBackNFromAtoB('a', 1, 0, 1) : error_outOfRange
        "a".lookBackNFromAtoB('a', 1, 0, 1) == 0
        "a".lookBackNFromAtoB('a', 2, 0, 1).nothing?()
        "a".lookBackNFromAtoB('a', 1, 0, 0).nothing?()
        "a".lookBackNFromAtoB('a', 1, 1, 1).nothing?()
        "a".lookBackNFromAtoB('b', 1, 0, 1).nothing?()
        "a".lookBackNFromAtoB('-', 1, 0, 1).nothing?()
        "a".lookBackNFromAtoB('a', 1, 1, 0) : error_outOfRange
        "a".lookBackNFromAtoB('a', 0, 0, 0) : error_outOfRange
        "a".lookBackNFromAtoB('a', -1, 0, 0) : error_outOfRange
        "a".lookBackNFromAtoB('a', -9223372036854775808, 0, 0) : error_outOfRange
        "a".lookBackNFromAtoB('-', 1, -1, 0) : error_outOfRange
        "a".lookBackNFromAtoB('-', 1, 0, -1) : error_outOfRange
        "a".lookBackNFromAtoB('a', 1, 0, 2) : error_outOfRange
        "a".lookBackNFromAtoB('a', 1, 2, 0) : error_outOfRange
        "a2".lookBackNFromAtoB('a', 1, 0, 1) == 0
        "a2".lookBackNFromAtoB('a', 2, 0, 1).nothing?()
        "a2".lookBackNFromAtoB('a', 1, 0, 2) == 0
        "a2".lookBackNFromAtoB('a', 2, 0, 2).nothing?()
        "a2".lookBackNFromAtoB('2', 1, 0, 2) == 1
        "a2".lookBackNFromAtoB('2', 2, 0, 2).nothing?()
        "a2".lookBackNFromAtoB('2', 1, 1, 2) == 1
        "a2".lookBackNFromAtoB('2', 2, 1, 2).nothing?()
        "22".lookBackNFromAtoB('2', 1, 0, 2) == 1
        "22".lookBackNFromAtoB('2', 2, 0, 2) == 0
        "a2".lookBackNFromAtoB('a', 1, 0, 0).nothing?()
        "a2".lookBackNFromAtoB('a', 2, 0, 0).nothing?()
        "a2".lookBackNFromAtoB('a', 0, 0, 0) : error_outOfRange
        "a2".lookBackNFromAtoB('a', -1, 0, 0) : error_outOfRange
        "a2".lookBackNFromAtoB('2', 1, 0, 0).nothing?()
        "aa".lookBackNFromAtoB('a', 1, 0, 1) == 0
        "aa".lookBackNFromAtoB('a', 2, 0, 1).nothing?()
        "aa".lookBackNFromAtoB('a', 1, 1, 2) == 1
        "aa".lookBackNFromAtoB('a', 2, 1, 2).nothing?()
        "aa".lookBackNFromAtoB('a', 1, 0, 2) == 1
        "aa".lookBackNFromAtoB('a', 2, 0, 2) == 0
        "aa".lookBackNFromAtoB('a', 1, 0, 0).nothing?()
        "aa".lookBackNFromAtoB('a', 1, 2, 2).nothing?()
        "a2".lookBackNFromAtoB('a', 1, 1, 2).nothing?()
        "a2".lookBackNFromAtoB('2', 1, 1, 2) == 1
        "a2".lookBackNFromAtoB('2', 1, 1, 1).nothing?()
        "a2".lookBackNFromAtoB('b', 1, 0, 2).nothing?()
        "a2".lookBackNFromAtoB('-', 1, 0, 2).nothing?()
        "a2".lookBackNFromAtoB('a', 1, 1, 0) : error_outOfRange
        "a2".lookBackNFromAtoB('a', 1, 3, 0) : error_outOfRange
        "a2".lookBackNFromAtoB('a', 2, 3, 0) : error_outOfRange
        "a2".lookBackNFromAtoB('-', 1, -1, 0) : error_outOfRange
        "a2".lookBackNFromAtoB('-', 1, 0, -1) : error_outOfRange
        "a2".lookBackNFromAtoB('a', 1, 0, 3) : error_outOfRange
        "a2".lookBackNFromAtoB('a', 1, 3, 0) : error_outOfRange
        "acd_13".lookBackNFromAtoB('a', 1, 0, 6) == 0
        "acd_13".lookBackNFromAtoB('a', 2, 0, 6).nothing?()
        "acd_13".lookBackNFromAtoB('3', 1, 0, 6) == 5
        "acd_13".lookBackNFromAtoB('3', 2, 0, 6).nothing?()
        "acd2f2a".lookBackNFromAtoB('2', 1, 0, 6) == 5
        "acd2f2a".lookBackNFromAtoB('2', 2, 0, 6) == 3
        "11111111".lookBackNFromAtoB('1', 1, 0, 8) == 7
        "11111111".lookBackNFromAtoB('1', 2, 0, 8) == 6
        "11111111".lookBackNFromAtoB('1', 7, 0, 8) == 1
        "11111111".lookBackNFromAtoB('1', 8, 0, 8) == 0
        "11111111".lookBackNFromAtoB('1', 2, 1, 8) == 6
        "11111111".lookBackNFromAtoB('1', 3, 1, 7) == 4
        "11110111".lookBackNFromAtoB('1', 4, 1, 7) == 2
        "1234567890123456789012345678901".lookBackNFromAtoB('1', 1, 0, 31) == 30
        "1234567890123456789012345678901".lookBackNFromAtoB('1', 2, 0, 31) == 20
        "1234567890123456789012345678901".lookBackNFromAtoB('1', 3, 0, 31) == 10
        "1234567890123456789012345678901".lookBackNFromAtoB('1', 4, 0, 31) == 0
        "1234567890123456789012345678901".lookBackNFromAtoB('1', 5, 0, 31).nothing?()
        "1234567890123456789012345678901".lookBackNFromAtoB('a', 1, 0, 31).nothing?()
        "1234567890123456789012345678901".lookBackNFromAtoB('1', 1, 1, 30) == 20
        "1234567890123456789012345678901".lookBackNFromAtoB('1', 2, 1, 30) == 10
        "1234567890123456789012345678901".lookBackNFromAtoB('1', 3, 1, 30).nothing?()
        "1234567890123456789012345678901".lookBackNFromAtoB('2', 1, 0, 31) == 21
        "1234567890123456789012345678901".lookBackNFromAtoB('2', 2, 0, 31) == 11
        "1234567890123456789012345678901".lookBackNFromAtoB('2', 3, 0, 31) == 1
        "1234567890123456789012345678901".lookBackNFromAtoB('2', 4, 0, 31).nothing?()
        "1234567890123456789012345678901".lookBackNFromAtoB('2', 5, 0, 31).nothing?()
        "1234567890123456789012345678901".lookBackNFromAtoB('2', 1, 1, 30) == 21
        "1234567890123456789012345678901".lookBackNFromAtoB('2', 2, 1, 30) == 11
        "1234567890123456789012345678901".lookBackNFromAtoB('2', 3, 1, 30) == 1
        "1234567890123456789012345678901".lookBackNFromAtoB('3', 1, 0, 31) == 22
        "1234567890123456789012345678901".lookBackNFromAtoB('3', 2, 0, 31) == 12
        "1234567890123456789012345678901".lookBackNFromAtoB('3', 3, 0, 31) == 2
        "1234567890123456789012345678901".lookBackNFromAtoB('3', 4, 0, 31).nothing?()
        "1234567890123456789012345678901".lookBackNFromAtoB('3', 5, 0, 31).nothing?()
        "1234567890123456789012345678901".lookBackNFromAtoB('3', 1, 1, 30) == 22
        "1234567890123456789012345678901".lookBackNFromAtoB('3', 2, 1, 30) == 12
        "1234567890123456789012345678901".lookBackNFromAtoB('3', 3, 1, 30) == 2
        "12345678901234567890123456789012".lookBackNFromAtoB('1', 1, 0, 32) == 30
        "12345678901234567890123456789012".lookBackNFromAtoB('1', 2, 0, 32) == 20
        "12345678901234567890123456789012".lookBackNFromAtoB('1', 3, 0, 32) == 10
        "12345678901234567890123456789012".lookBackNFromAtoB('1', 4, 0, 32) == 0
        "12345678901234567890123456789012".lookBackNFromAtoB('1', 5, 0, 32).nothing?()
        "12345678901234567890123456789012".lookBackNFromAtoB('a', 1, 0, 32).nothing?()
        "12345678901234567890123456789012".lookBackNFromAtoB('1', 1, 1, 31) == 30
        "12345678901234567890123456789012".lookBackNFromAtoB('1', 2, 1, 31) == 20
        "12345678901234567890123456789012".lookBackNFromAtoB('1', 3, 1, 31) == 10
        "12345678901234567890123456789012".lookBackNFromAtoB('1', 4, 1, 31).nothing?()
        "12345678901234567890123456789012".lookBackNFromAtoB('2', 1, 0, 32) == 31
        "12345678901234567890123456789012".lookBackNFromAtoB('2', 2, 0, 32) == 21
        "12345678901234567890123456789012".lookBackNFromAtoB('2', 3, 0, 32) == 11
        "12345678901234567890123456789012".lookBackNFromAtoB('2', 4, 0, 32) == 1
        "12345678901234567890123456789012".lookBackNFromAtoB('2', 5, 0, 32).nothing?()
        "12345678901234567890123456789012".lookBackNFromAtoB('2', 1, 1, 31) == 21
        "12345678901234567890123456789012".lookBackNFromAtoB('2', 2, 1, 31) == 11
        "12345678901234567890123456789012".lookBackNFromAtoB('2', 3, 1, 31) == 1
        "12345678901234567890123456789012".lookBackNFromAtoB('3', 1, 0, 32) == 22
        "12345678901234567890123456789012".lookBackNFromAtoB('3', 2, 0, 32) == 12
        "12345678901234567890123456789012".lookBackNFromAtoB('3', 3, 0, 32) == 2
        "12345678901234567890123456789012".lookBackNFromAtoB('3', 4, 0, 32).nothing?()
        "12345678901234567890123456789012".lookBackNFromAtoB('3', 5, 0, 32).nothing?()
        "12345678901234567890123456789012".lookBackNFromAtoB('3', 1, 1, 31) == 22
        "12345678901234567890123456789012".lookBackNFromAtoB('3', 2, 1, 31) == 12
        "12345678901234567890123456789012".lookBackNFromAtoB('3', 3, 1, 31) == 2
        "123456789012345678901234567890123".lookBackNFromAtoB('1', 1, 0, 33) == 30
        "123456789012345678901234567890123".lookBackNFromAtoB('1', 2, 0, 33) == 20
        "123456789012345678901234567890123".lookBackNFromAtoB('1', 3, 0, 33) == 10
        "123456789012345678901234567890123".lookBackNFromAtoB('1', 4, 0, 33) == 0
        "123456789012345678901234567890123".lookBackNFromAtoB('1', 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookBackNFromAtoB('a', 1, 0, 33).nothing?()
        "123456789012345678901234567890123".lookBackNFromAtoB('1', 1, 1, 32) == 30
        "123456789012345678901234567890123".lookBackNFromAtoB('1', 2, 1, 32) == 20
        "123456789012345678901234567890123".lookBackNFromAtoB('1', 3, 1, 32) == 10
        "123456789012345678901234567890123".lookBackNFromAtoB('1', 4, 1, 32).nothing?()
        "123456789012345678901234567890123".lookBackNFromAtoB('2', 1, 0, 33) == 31
        "123456789012345678901234567890123".lookBackNFromAtoB('2', 2, 0, 33) == 21
        "123456789012345678901234567890123".lookBackNFromAtoB('2', 3, 0, 33) == 11
        "123456789012345678901234567890123".lookBackNFromAtoB('2', 4, 0, 33) == 1
        "123456789012345678901234567890123".lookBackNFromAtoB('2', 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookBackNFromAtoB('2', 1, 1, 32) == 31
        "123456789012345678901234567890123".lookBackNFromAtoB('2', 2, 1, 32) == 21
        "123456789012345678901234567890123".lookBackNFromAtoB('2', 3, 1, 32) == 11
        "123456789012345678901234567890123".lookBackNFromAtoB('2', 4, 1, 32) == 1
        "123456789012345678901234567890123".lookBackNFromAtoB('2', 5, 1, 32).nothing?()
        "123456789012345678901234567890123".lookBackNFromAtoB('3', 1, 0, 33) == 32
        "123456789012345678901234567890123".lookBackNFromAtoB('3', 2, 0, 33) == 22
        "123456789012345678901234567890123".lookBackNFromAtoB('3', 3, 0, 33) == 12
        "123456789012345678901234567890123".lookBackNFromAtoB('3', 4, 0, 33) == 2
        "123456789012345678901234567890123".lookBackNFromAtoB('3', 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookBackNFromAtoB('3', 1, 1, 32) == 22
        "123456789012345678901234567890123".lookBackNFromAtoB('3', 2, 1, 32) == 12
        "123456789012345678901234567890123".lookBackNFromAtoB('3', 3, 1, 32) == 2

#noinline
def testString_LookBackNPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".lookBackNPartFromAtoB("0", 1, 0, 0).nothing?()
        "".lookBackNPartFromAtoB("0", 2, 0, 0).nothing?()
        "".lookBackNPartFromAtoB("0", 9223372036854775807, 0, 0).nothing?()
        "".lookBackNPartFromAtoB("0", 0, 0, 0) : error_outOfRange
        "".lookBackNPartFromAtoB("0", -1, 0, 0) : error_outOfRange
        "".lookBackNPartFromAtoB("0", -9223372036854775808, 0, 0) : error_outOfRange
        "1".lookBackNPartFromAtoB("1", 1, 0, 1) == 0
        "1".lookBackNPartFromAtoB("1", 9223372036854775807, 0, 1).nothing?()
        "1".lookBackNPartFromAtoB("1", 0, 0, 1) : error_outOfRange
        "1".lookBackNPartFromAtoB("1", -1, 0, 1) : error_outOfRange
        "1".lookBackNPartFromAtoB("1", -9223372036854775808, 0, 1) : error_outOfRange
        "1".lookBackNPartFromAtoB("1", 1, 1, 0) : error_outOfRange
        "1".lookBackNPartFromAtoB("1", 1, 0, 0).nothing?()
        "1".lookBackNPartFromAtoB("1", 2, 0, 0).nothing?()
        "1".lookBackNPartFromAtoB("1", 1, 1, 1).nothing?()
        "1".lookBackNPartFromAtoB("1", 2, 1, 1).nothing?()
        "2".lookBackNPartFromAtoB("1", 1, 0, 1).nothing?()
        "2".lookBackNPartFromAtoB("1", 2, 0, 1).nothing?()
        "2".lookBackNPartFromAtoB("1", 1, 0, 0).nothing?()
        "2".lookBackNPartFromAtoB("1", 2, 0, 0).nothing?()
        "2".lookBackNPartFromAtoB("1", 1, 1, 1).nothing?()
        "2".lookBackNPartFromAtoB("1", 2, 1, 1).nothing?()
        "2".lookBackNPartFromAtoB("21", 1, 0, 1).nothing?()
        "2".lookBackNPartFromAtoB("21", 2, 0, 1).nothing?()
        "2".lookBackNPartFromAtoB("12", 1, 0, 1).nothing?()
        "2".lookBackNPartFromAtoB("12", 2, 0, 1).nothing?()
        "12a234".lookBackNPartFromAtoB("1", 1, 0, 1) == 0
        "12a234".lookBackNPartFromAtoB("1", 0, 0, 1) : error_outOfRange
        "12a234".lookBackNPartFromAtoB("1", -1, 0, 1) : error_outOfRange
        "12a234".lookBackNPartFromAtoB("1", -9223372036854775808, 0, 1) : error_outOfRange
        "12a234".lookBackNPartFromAtoB("1", 2, 0, 1).nothing?()
        "12a234".lookBackNPartFromAtoB("1", 1, 0, 2) == 0
        "12a234".lookBackNPartFromAtoB("1", 2, 0, 2).nothing?()
        "12a234".lookBackNPartFromAtoB("1", 1, 0, 6) == 0
        "12a234".lookBackNPartFromAtoB("1", 2, 0, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("4", 1, 0, 6) == 5
        "12a234".lookBackNPartFromAtoB("4", 2, 0, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("4", 1, 1, 6) == 5
        "12a234".lookBackNPartFromAtoB("4", 2, 1, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("4", 1, 2, 6) == 5
        "12a234".lookBackNPartFromAtoB("4", 2, 2, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("4", 1, 2, 5).nothing?()
        "12a234".lookBackNPartFromAtoB("4", 2, 2, 5).nothing?()
        "12a234".lookBackNPartFromAtoB("4", 1, 0, 5).nothing?()
        "12a234".lookBackNPartFromAtoB("4", 2, 0, 5).nothing?()
        "12a234".lookBackNPartFromAtoB("2", 1, 0, 5) == 3
        "12a234".lookBackNPartFromAtoB("2", 2, 0, 5) == 1
        "12a234".lookBackNPartFromAtoB("2", 1, 2, 5) == 3
        "12a234".lookBackNPartFromAtoB("2", 2, 2, 5).nothing?()
        "12a234".lookBackNPartFromAtoB("2", 3, 0, 5).nothing?()
        "12a234".lookBackNPartFromAtoB("12", 1, 0, 6) == 0
        "12a234".lookBackNPartFromAtoB("12", 2, 0, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("12", 1, 1, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("12", 2, 1, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("23", 1, 0, 6) == 3
        "12a234".lookBackNPartFromAtoB("23", 2, 0, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("23", 1, 0, 5) == 3
        "12a234".lookBackNPartFromAtoB("23", 2, 0, 5).nothing?()
        "12a234".lookBackNPartFromAtoB("23", 1, 1, 5) == 3
        "12a234".lookBackNPartFromAtoB("23", 2, 1, 5).nothing?()
        "12a234".lookBackNPartFromAtoB("23", 1, 3, 5) == 3
        "12a234".lookBackNPartFromAtoB("23", 2, 3, 5).nothing?()
        "12a234".lookBackNPartFromAtoB("23", 1, 3, 4).nothing?()
        "12a234".lookBackNPartFromAtoB("23", 2, 3, 4).nothing?()
        "12a234".lookBackNPartFromAtoB("23", 1, 4, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("23", 2, 4, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("234", 1, 0, 6) == 3
        "12a234".lookBackNPartFromAtoB("234", 2, 0, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("234", 1, 3, 6) == 3
        "12a234".lookBackNPartFromAtoB("234", 2, 3, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("234", 1, 0, 5).nothing?()
        "12a234".lookBackNPartFromAtoB("234", 2, 0, 5).nothing?()
        "12a234".lookBackNPartFromAtoB("234", 1, 4, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("234", 2, 4, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("22", 1, 0, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("22", 2, 0, 6).nothing?()
        "12a234".lookBackNPartFromAtoB("2", 1, -1, 2) : error_outOfRange
        "12a234".lookBackNPartFromAtoB("2", 1, 2, 1) : error_outOfRange
        "12a234".lookBackNPartFromAtoB("2", 1, -10, -1) : error_outOfRange
        "".lookBackNPartFromAtoB("", 1, 0, 0) : error_nothingToLook
        "12".lookBackNPartFromAtoB("", 1, 0, 0) : error_nothingToLook
        "123412b".lookBackNPartFromAtoB("12", 1, 0, 3) == 0
        "123412b".lookBackNPartFromAtoB("12", 2, 0, 3).nothing?()
        "123412b".lookBackNPartFromAtoB("12", 1, 0, 6) == 4
        "123412b".lookBackNPartFromAtoB("12", 2, 0, 6) == 0
        "123412b".lookBackNPartFromAtoB("12", 3, 0, 6).nothing?()
        "222222b".lookBackNPartFromAtoB("222", 1, 0, 7) == 3
        "222222b".lookBackNPartFromAtoB("222", 2, 0, 7) == 0
        "222222b".lookBackNPartFromAtoB("222", 3, 0, 7).nothing?()
        "222222b".lookBackNPartFromAtoB("222", 1, 1, 6) == 3
        "222222b".lookBackNPartFromAtoB("222", 2, 1, 6).nothing?()
        "222222b".lookBackNPartFromAtoB("222", 1, 2, 5) == 2
        "22222222".lookBackNPartFromAtoB("222", 1, 0, 8) == 5
        "22222222".lookBackNPartFromAtoB("222", 2, 0, 8) == 2
        "22222222".lookBackNPartFromAtoB("222", 3, 0, 8).nothing?()
        "22222222".lookBackNPartFromAtoB("222", 1, 1, 7) == 4
        "22222222".lookBackNPartFromAtoB("222", 2, 1, 7) == 1
        "22222222".lookBackNPartFromAtoB("222", 3, 1, 7).nothing?()
        "1234567890123456789012345678901".lookBackNPartFromAtoB("1", 1, 0, 31) == 30
        "1234567890123456789012345678901".lookBackNPartFromAtoB("1", 2, 0, 31) == 20
        "1234567890123456789012345678901".lookBackNPartFromAtoB("1", 3, 0, 31) == 10
        "1234567890123456789012345678901".lookBackNPartFromAtoB("1", 4, 0, 31) == 0
        "1234567890123456789012345678901".lookBackNPartFromAtoB("1", 5, 0, 31).nothing?()
        "1234567890123456789012345678901".lookBackNPartFromAtoB("1", 1, 1, 30) == 20
        "1234567890123456789012345678901".lookBackNPartFromAtoB("1", 2, 1, 30) == 10
        "1234567890123456789012345678901".lookBackNPartFromAtoB("1", 3, 1, 30).nothing?()
        "1234567890123456789012345678901".lookBackNPartFromAtoB("12", 1, 0, 31) == 20
        "1234567890123456789012345678901".lookBackNPartFromAtoB("12", 2, 0, 31) == 10
        "1234567890123456789012345678901".lookBackNPartFromAtoB("12", 3, 0, 31) == 0
        "1234567890123456789012345678901".lookBackNPartFromAtoB("12", 4, 0, 31).nothing?()
        "1234567890123456789012345678901".lookBackNPartFromAtoB("1", 1, 0, 15) == 10
        "1234567890123456789012345678901".lookBackNPartFromAtoB("1", 2, 0, 15) == 0
        "1234567890123456789012345678901".lookBackNPartFromAtoB("1", 3, 0, 15).nothing?()
        "12345678901234567890123456789012".lookBackNPartFromAtoB("1", 1, 0, 32) == 30
        "12345678901234567890123456789012".lookBackNPartFromAtoB("1", 2, 0, 32) == 20
        "12345678901234567890123456789012".lookBackNPartFromAtoB("1", 3, 0, 32) == 10
        "12345678901234567890123456789012".lookBackNPartFromAtoB("1", 4, 0, 32) == 0
        "12345678901234567890123456789012".lookBackNPartFromAtoB("1", 5, 0, 32).nothing?()
        "12345678901234567890123456789012".lookBackNPartFromAtoB("2", 1, 0, 32) == 31
        "12345678901234567890123456789012".lookBackNPartFromAtoB("2", 2, 0, 32) == 21
        "12345678901234567890123456789012".lookBackNPartFromAtoB("2", 3, 0, 32) == 11
        "12345678901234567890123456789012".lookBackNPartFromAtoB("2", 4, 0, 32) == 1
        "12345678901234567890123456789012".lookBackNPartFromAtoB("2", 5, 0, 32).nothing?()
        "12345678901234567890123456789012".lookBackNPartFromAtoB("1", 1, 1, 30) == 20
        "12345678901234567890123456789012".lookBackNPartFromAtoB("1", 2, 1, 30) == 10
        "12345678901234567890123456789012".lookBackNPartFromAtoB("1", 3, 1, 30).nothing?()
        "12345678901234567890123456789012".lookBackNPartFromAtoB("12", 1, 0, 32) == 30
        "12345678901234567890123456789012".lookBackNPartFromAtoB("12", 2, 0, 32) == 20
        "12345678901234567890123456789012".lookBackNPartFromAtoB("12", 3, 0, 32) == 10
        "12345678901234567890123456789012".lookBackNPartFromAtoB("12", 4, 0, 32) == 0
        "12345678901234567890123456789012".lookBackNPartFromAtoB("12", 5, 0, 32).nothing?()
        "12345678901234567890123456789012".lookBackNPartFromAtoB("1", 1, 0, 15) == 10
        "12345678901234567890123456789012".lookBackNPartFromAtoB("1", 2, 0, 15) == 0
        "12345678901234567890123456789012".lookBackNPartFromAtoB("1", 3, 0, 15).nothing?()
        "123456789012345678901234567890123".lookBackNPartFromAtoB("1", 1, 0, 33) == 30
        "123456789012345678901234567890123".lookBackNPartFromAtoB("1", 2, 0, 33) == 20
        "123456789012345678901234567890123".lookBackNPartFromAtoB("1", 3, 0, 33) == 10
        "123456789012345678901234567890123".lookBackNPartFromAtoB("1", 4, 0, 33) == 0
        "123456789012345678901234567890123".lookBackNPartFromAtoB("1", 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookBackNPartFromAtoB("3", 1, 0, 33) == 32
        "123456789012345678901234567890123".lookBackNPartFromAtoB("3", 2, 0, 33) == 22
        "123456789012345678901234567890123".lookBackNPartFromAtoB("3", 3, 0, 33) == 12
        "123456789012345678901234567890123".lookBackNPartFromAtoB("3", 4, 0, 33) == 2
        "123456789012345678901234567890123".lookBackNPartFromAtoB("3", 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookBackNPartFromAtoB("1", 1, 1, 30) == 20
        "123456789012345678901234567890123".lookBackNPartFromAtoB("1", 2, 1, 30) == 10
        "123456789012345678901234567890123".lookBackNPartFromAtoB("1", 3, 1, 30).nothing?()
        "123456789012345678901234567890123".lookBackNPartFromAtoB("12", 1, 0, 33) == 30
        "123456789012345678901234567890123".lookBackNPartFromAtoB("12", 2, 0, 33) == 20
        "123456789012345678901234567890123".lookBackNPartFromAtoB("12", 3, 0, 33) == 10
        "123456789012345678901234567890123".lookBackNPartFromAtoB("12", 4, 0, 33) == 0
        "123456789012345678901234567890123".lookBackNPartFromAtoB("12", 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookBackNPartFromAtoB("123", 1, 0, 33) == 30
        "123456789012345678901234567890123".lookBackNPartFromAtoB("123", 2, 0, 33) == 20
        "123456789012345678901234567890123".lookBackNPartFromAtoB("123", 3, 0, 33) == 10
        "123456789012345678901234567890123".lookBackNPartFromAtoB("123", 4, 0, 33) == 0
        "123456789012345678901234567890123".lookBackNPartFromAtoB("123", 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookBackNPartFromAtoB("23", 1, 0, 33) == 31
        "123456789012345678901234567890123".lookBackNPartFromAtoB("23", 2, 0, 33) == 21
        "123456789012345678901234567890123".lookBackNPartFromAtoB("23", 3, 0, 33) == 11
        "123456789012345678901234567890123".lookBackNPartFromAtoB("23", 4, 0, 33) == 1
        "123456789012345678901234567890123".lookBackNPartFromAtoB("23", 5, 0, 33).nothing?()
        "123456789012345678901234567890123".lookBackNPartFromAtoB("1", 1, 0, 15) == 10
        "123456789012345678901234567890123".lookBackNPartFromAtoB("1", 2, 0, 15) == 0
        "123456789012345678901234567890123".lookBackNPartFromAtoB("1", 3, 0, 15).nothing?()
        "1111111111111111111111111111111".lookBackNPartFromAtoB("11", 1, 0, 31) == 29
        "1111111111111111111111111111111".lookBackNPartFromAtoB("11", 2, 0, 31) == 27
        "1111111111111111111111111111111".lookBackNPartFromAtoB("11", 15, 0, 31) == 1
        "1111111111111111111111111111111".lookBackNPartFromAtoB("11", 16, 0, 31).nothing?()
        "1111111111111111111111111111111".lookBackNPartFromAtoB("11", 1, 1, 30) == 28
        "1111111111111111111111111111111".lookBackNPartFromAtoB("11", 2, 1, 30) == 26
        "1111111111111111111111111111111".lookBackNPartFromAtoB("11", 14, 1, 30) == 2
        "1111111111111111111111111111111".lookBackNPartFromAtoB("11", 15, 1, 30).nothing?()
        "11111111111111111111111111111111".lookBackNPartFromAtoB("11", 1, 0, 32) == 30
        "11111111111111111111111111111111".lookBackNPartFromAtoB("11", 2, 0, 32) == 28
        "11111111111111111111111111111111".lookBackNPartFromAtoB("11", 16, 0, 32) == 0
        "11111111111111111111111111111111".lookBackNPartFromAtoB("11", 17, 0, 32).nothing?()
        "11111111111111111111111111111111".lookBackNPartFromAtoB("11", 1, 1, 31) == 29
        "11111111111111111111111111111111".lookBackNPartFromAtoB("11", 2, 1, 31) == 27
        "11111111111111111111111111111111".lookBackNPartFromAtoB("11", 15, 1, 31) == 1
        "11111111111111111111111111111111".lookBackNPartFromAtoB("11", 16, 1, 31).nothing?()
        "111111111111111111111111111111111".lookBackNPartFromAtoB("11", 1, 0, 33) == 31
        "111111111111111111111111111111111".lookBackNPartFromAtoB("11", 2, 0, 33) == 29
        "111111111111111111111111111111111".lookBackNPartFromAtoB("11", 16, 0, 33) == 1
        "111111111111111111111111111111111".lookBackNPartFromAtoB("11", 17, 0, 33).nothing?()
        "111111111111111111111111111111111".lookBackNPartFromAtoB("11", 1, 1, 32) == 30
        "111111111111111111111111111111111".lookBackNPartFromAtoB("11", 2, 1, 32) == 28
        "111111111111111111111111111111111".lookBackNPartFromAtoB("11", 15, 1, 32) == 2
        "111111111111111111111111111111111".lookBackNPartFromAtoB("11", 16, 1, 32).nothing?()

#noinline
def testString_Delete$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".delete$(0, 0) == ""
        "".delete$(1, 0) : error_outOfRange
        "".delete$(9223372036854775807, 0) : error_outOfRange
        "".delete$(-1, 0) : error_outOfRange
        "".delete$(-9223372036854775808, 0) : error_outOfRange
        "".delete$(0, 1) : error_outOfRange
        "".delete$(0, 9223372036854775807) : error_outOfRange
        "".delete$(0, -1) : error_outOfRange
        "".delete$(0, -9223372036854775808) : error_outOfRange
        "1".delete$(0, 0) == "1"
        "1".delete$(1, 0) == "1"
        "1".delete$(0, 1) == ""
        "1".delete$(1, 1) : error_outOfRange
        "1".delete$(9223372036854775807, 0) : error_outOfRange
        "1".delete$(-1, 0) : error_outOfRange
        "1".delete$(-9223372036854775808, 0) : error_outOfRange
        "1".delete$(0, 2) : error_outOfRange
        "1".delete$(0, 9223372036854775807) : error_outOfRange
        "1".delete$(0, -1) : error_outOfRange
        "1".delete$(0, -9223372036854775808) : error_outOfRange
        "123456789".delete$(0, 0) == "123456789"
        "123456789".delete$(0, 1) == "23456789"
        "123456789".delete$(0, 2) == "3456789"
        "123456789".delete$(0, 9) == ""
        "123456789".delete$(0, 10) : error_outOfRange
        "123456789".delete$(1, 0) == "123456789"
        "123456789".delete$(1, 1) == "13456789"
        "123456789".delete$(1, 2) == "1456789"
        "123456789".delete$(1, 8) == "1"
        "123456789".delete$(1, 9) : error_outOfRange
        "123456789".delete$(4, 0) == "123456789"
        "123456789".delete$(4, 1) == "12346789"
        "123456789".delete$(4, 2) == "1234789"
        "123456789".delete$(4, 5) == "1234"
        "123456789".delete$(4, 6) : error_outOfRange
        "123456789".delete$(8, 0) == "123456789"
        "123456789".delete$(8, 1) == "12345678"
        "123456789".delete$(8, 2) : error_outOfRange
        "123456789".delete$(9, 0) == "123456789"
        "123456789".delete$(9, 1) : error_outOfRange

#noinline
def testString_Delete(write ok Int, write errorsCoordinates List)
    var c1 String = ""
    var c2 String = "1"
    var c3 String = "123456789"
    var c4 String = "123456789"
    var c5 String = "123456789".clone()
    var c6 String = "123456789".clone()
    var c7 String = c6
    test: ok, errorsCoordinates
        c1.delete(0, 0).nothing?()
        c1 == ""
        c1.delete(1, 0) : error_outOfRange
        c1 == ""
        c1.delete(9223372036854775807, 0) : error_outOfRange
        c1 == ""
        c1.delete(-1, 0) : error_outOfRange
        c1 == ""
        c1.delete(-9223372036854775808, 0) : error_outOfRange
        c1 == ""
        c1.delete(0, 1) : error_outOfRange
        c1 == ""
        c1.delete(0, 9223372036854775807) : error_outOfRange
        c1 == ""
        c1.delete(0, -1) : error_outOfRange
        c1 == ""
        c1.delete(0, -9223372036854775808) : error_outOfRange
        c1 == ""
        c2.delete(0, 0).nothing?()
        c2 == "1"
        c2.delete(1, 0).nothing?()
        c2 == "1"
        c2.delete(0, 2) : error_outOfRange
        c2 == "1"
        c2.delete(0, 9223372036854775807) : error_outOfRange
        c2 == "1"
        c2.delete(0, -1) : error_outOfRange
        c2 == "1"
        c2.delete(0, -9223372036854775807) : error_outOfRange
        c2 == "1"
        c2.delete(2, 0) : error_outOfRange
        c2 == "1"
        c2.delete(9223372036854775807, 0) : error_outOfRange
        c2 == "1"
        c2.delete(-1, 0) : error_outOfRange
        c2 == "1"
        c2.delete(-9223372036854775808, 0) : error_outOfRange
        c2 == "1"
        c3.delete(0, 10) : error_outOfRange
        c3 == "123456789"
        c3.delete(1, 9) : error_outOfRange
        c3 == "123456789"
        c3.delete(4, 6) : error_outOfRange
        c3 == "123456789"
        c3.delete(9, 1) : error_outOfRange
        c3 == "123456789"
        c3.delete(0, 0).nothing?()
        c3 == "123456789"
        c3.delete(0, 1).nothing?()
        c3 == "23456789"
        c3.delete(0, 2).nothing?()
        c3 == "456789"
        c3.delete(0, 6).nothing?()
        c3 == ""
        c4.delete(1, 0).nothing?()
        c4 == "123456789"
        c4.delete(1, 1).nothing?()
        c4 == "13456789"
        c4.delete(1, 2).nothing?()
        c4 == "156789"
        c4.delete(1, 5).nothing?()
        c4 == "1"
        c5.delete(4, 0).nothing?()
        c5 == "123456789"
        c5.delete(4, 1).nothing?()
        c5 == "12346789"
        c5.delete(4, 2).nothing?()
        c5 == "123489"
        c5.delete(4, 2).nothing?()
        c5 == "1234"
        c6.delete(8, 0).nothing?()
        c6 == "123456789"
        c6.delete(8, 1).nothing?()
        c6 == "12345678"
        c6.delete(8, 0).nothing?()
        c6 == "12345678"
        c7 == "123456789"

#noinline
def testString_Replace$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".replace$('1', '0') == ""
        "".replace$('1', '1') == ""
        "1".replace$('1', '0') == "0"
        "1".replace$('1', '1') == "1"
        "1".replace$('2', '0') == "1"
        "12abc21".replace$('1', '0') == "02abc20"
        "12abc21".replace$('2', '!') == "1!abc!1"
        "12abc21".replace$('3', '0') == "12abc21"
        "1212121212121212121212121212121".replace$('1', '0') == "0202020202020202020202020202020"
        "1212121212121212121212121212121".replace$('2', '!') == "1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1"
        "1212121212121212121212121212121".replace$('3', '0') == "1212121212121212121212121212121"
        "12121212121212121212121212121212".replace$('1', '0') == "02020202020202020202020202020202"
        "12121212121212121212121212121212".replace$('2', '!') == "1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!"
        "12121212121212121212121212121212".replace$('3', '0') == "12121212121212121212121212121212"
        "121212121212121212121212121212121".replace$('1', '0') == "020202020202020202020202020202020"
        "121212121212121212121212121212121".replace$('2', '!') == "1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1!1"
        "121212121212121212121212121212121".replace$('3', '0') == "121212121212121212121212121212121"

#noinline
def testString_Replace(write ok Int, write errorsCoordinates List)
    var c1 String = ""
    var c2 String = "1"
    var c3 String = "123_?21"
    var c4 String = "1212121212121212121212121212121"
    var c5 String = "12121212121212121212121212121212".clone()
    var c6 String = "121212121212121212121212121212121".clone()
    var c7 String = c6
    test: ok, errorsCoordinates
        c1.replace('1', '0').nothing?()
        c1 == ""
        c1.replace('2', '0').nothing?()
        c1 == ""
        c2.replace('1', '0').nothing?()
        c2 == "0"
        c2.replace('0', '3').nothing?()
        c2 == "3"
        c2.replace('2', '0').nothing?()
        c2 == "3"
        c3.replace('1', '0').nothing?()
        c3  == "023_?20"
        c3.replace('1', '4').nothing?()
        c3  == "023_?20"
        c3.replace('2', 'b').nothing?()
        c3  == "0b3_?b0"
        c3.replace('_', 'f').nothing?()
        c3  == "0b3f?b0"
        c4.replace('1', '0').nothing?()
        c4  == "0202020202020202020202020202020"
        c4.replace('2', '1').nothing?()
        c4  == "0101010101010101010101010101010"
        c4.replace('3', 'c').nothing?()
        c4  == "0101010101010101010101010101010"
        c5.replace('1', '0').nothing?()
        c5  == "02020202020202020202020202020202"
        c5.replace('2', '1').nothing?()
        c5  == "01010101010101010101010101010101"
        c5.replace('3', 'c').nothing?()
        c5  == "01010101010101010101010101010101"
        c6.replace('1', '0').nothing?()
        c6  == "020202020202020202020202020202020"
        c6.replace('2', '1').nothing?()
        c6  == "010101010101010101010101010101010"
        c6.replace('3', 'c').nothing?()
        c6  == "010101010101010101010101010101010"
        c7 == "121212121212121212121212121212121"

#noinline
def testString_Insert$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".insert$(1, '1') : error_outOfRange
        "".insert$(9223372036854775807, '1') : error_outOfRange
        "".insert$(-1, '1') : error_outOfRange
        "".insert$(-9223372036854775808, '1') : error_outOfRange
        "".insert$(0, '1') == "1"
        "1".insert$(2, '1') : error_outOfRange
        "1".insert$(9223372036854775807, '1') : error_outOfRange
        "1".insert$(-1, '1') : error_outOfRange
        "1".insert$(-9223372036854775808, '1') : error_outOfRange
        "1".insert$(0, '2') == "21"
        "1".insert$(1, '2') == "12"
        "12345".insert$(0, 'a') == "a12345"
        "12345".insert$(2, 'a') == "12a345"
        "12345".insert$(3, 'a') == "123a45"
        "12345".insert$(5, 'a') == "12345a"

#noinline
def testString_Insert(write ok Int, write errorsCoordinates List)
    var c1 String = ""
    var c2 String = "1"
    var c3 String = c2
    test: ok, errorsCoordinates
        c1.insert(1, '1') : error_outOfRange
        c1 == ""
        c1.insert(9223372036854775807, '1') : error_outOfRange
        c1 == ""
        c1.insert(-1, '1') : error_outOfRange
        c1 == ""
        c1.insert(-9223372036854775808, '1') : error_outOfRange
        c1 == ""
        c1.insert(0, '1').nothing?()
        c1 == "1"
        c1.insert(2, '1') : error_outOfRange
        c1 == "1"
        c1.insert(9223372036854775807, '1') : error_outOfRange
        c1 == "1"
        c1.insert(-1, '1') : error_outOfRange
        c1 == "1"
        c1.insert(-9223372036854775808, '1') : error_outOfRange
        c1 == "1"
        c1.insert(0, '2').nothing?()
        c1 == "21"
        c2.insert(1, '2').nothing?()
        c2 == "12"
        c2.insert(0, 'a').nothing?()
        c2 == "a12"
        c2.insert(2, 'f').nothing?()
        c2 == "a1f2"
        c2.insert(1, '3').nothing?()
        c2 == "a31f2"
        c2.insert(3, '1').nothing?()
        c2 == "a311f2"
        c2.insert(7, '1') : error_outOfRange
        c2 == "a311f2"
        c2.insert(9223372036854775807, '1') : error_outOfRange
        c2 == "a311f2"
        c2.insert(-1, '1') : error_outOfRange
        c2 == "a311f2"
        c2.insert(-9223372036854775808, '1') : error_outOfRange
        c2 == "a311f2"
        c3 == "1"

#noinline
def testString_InsertPart$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".insertPart$(1, "1") : error_outOfRange
        "".insertPart$(9223372036854775807, "1") : error_outOfRange
        "".insertPart$(-1, "1") : error_outOfRange
        "".insertPart$(-9223372036854775808, "1") : error_outOfRange
        "".insertPart$(0, "") == ""
        "".insertPart$(0, "1") == "1"
        "".insertPart$(0, "123") == "123"
        "1".insertPart$(2, "1") : error_outOfRange
        "1".insertPart$(9223372036854775807, "1") : error_outOfRange
        "1".insertPart$(-1, "1") : error_outOfRange
        "1".insertPart$(-9223372036854775808, "1") : error_outOfRange
        "1".insertPart$(0, "") == "1"
        "1".insertPart$(1, "") == "1"
        "1".insertPart$(0, "2") == "21"
        "1".insertPart$(0, "23") == "231"
        "1".insertPart$(1, "13") == "113"
        "12345".insertPart$(0, "!@") == "!@12345"
        "12345".insertPart$(2, "!@") == "12!@345"
        "12345".insertPart$(3, "!@") == "123!@45"
        "12345".insertPart$(5, "!@") == "12345!@"

#noinline
def testString_InsertPart(write ok Int, write errorsCoordinates List)
    var c1 String = ""
    var c2 String = "1"
    test: ok, errorsCoordinates
        c1.insertPart(1, "1") : error_outOfRange
        c1 == ""
        c1.insertPart(9223372036854775807, "1") : error_outOfRange
        c1 == ""
        c1.insertPart(-1, "1") : error_outOfRange
        c1 == ""
        c1.insertPart(-9223372036854775808, "1") : error_outOfRange
        c1 == ""
        c1.insertPart(0, "").nothing?()
        c1 == ""
        c1.insertPart(0, "1").nothing?()
        c1 == "1"
        c1.insertPart(2, "1") : error_outOfRange
        c1 == "1"
        c1.insertPart(9223372036854775807, "1") : error_outOfRange
        c1 == "1"
        c1.insertPart(-1, "1") : error_outOfRange
        c1 == "1"
        c1.insertPart(-9223372036854775808, "1") : error_outOfRange
        c1 == "1"
        c1.insertPart(0, "").nothing?()
        c1 == "1"
        c1.insertPart(1, "").nothing?()
        c1 == "1"
        c1.insertPart(0, "2").nothing?()
        c1 == "21"
        c2.insertPart(1, "2").nothing?()
        c2 == "12"
        c2.insertPart(0, "23").nothing?()
        c2 == "2312"
        c2.insertPart(1, "13").nothing?()
        c2 == "213312"
        c2.insertPart(2, "").nothing?()
        c2 == "213312"
        c2.insertPart(3, "").nothing?()
        c2 == "213312"
        c2.insertPart(0, "").nothing?()
        c2 == "213312"
        c2.insertPart(6, "").nothing?()
        c2 == "213312"
        c2.insertPart(6, "!@").nothing?()
        c2 == "213312!@"

#noinline
def testString_Repeat(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        String.repeat('c', 0) == ""
        String.repeat('c', 1) == "c"
        String.repeat('c', 2) == "cc"
        String.repeat('c', 10) == "cccccccccc"
        String.repeat('c', 11) == "ccccccccccc"
        String.repeat('c', 16) == "cccccccccccccccc"
        String.repeat('c', -1) : error_outOfRange
        String.repeat('c', -2) : error_outOfRange
        String.repeat('c', -9223372036854775808) : error_outOfRange

#noinline
def testString_RepeatPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".repeatPart(0) == ""
        "".repeatPart(120) == ""
        "".repeatPart(-1) : error_outOfRange
        "".repeatPart(-9223372036854775808) : error_outOfRange
        "13".repeatPart(0) == ""
        "13".repeatPart(1) == "13"
        "13".repeatPart(2) == "1313"
        "13".repeatPart(10) == "13131313131313131313"
        "13".repeatPart(11) == "1313131313131313131313"
        "13".repeatPart(16) == "13131313131313131313131313131313"
        "13".repeatPart(-1) : error_outOfRange
        "13".repeatPart(-9223372036854775808) : error_outOfRange
        "13110100".repeatPart(0) == ""
        "13110100".repeatPart(1) == "13110100"
        "13110100".repeatPart(2) == "1311010013110100"
        "13110100".repeatPart(10) == "13110100131101001311010013110100131101001311010013110100131101001311010013110100"
        "13110100".repeatPart(11) == "1311010013110100131101001311010013110100131101001311010013110100131101001311010013110100"
        "13110100".repeatPart(16) == "13110100131101001311010013110100131101001311010013110100131101001311010013110100131101001311010013110100131101001311010013110100"
        "13110100".repeatPart(-1) : error_outOfRange
        "13110100".repeatPart(-9223372036854775808) : error_outOfRange

#noinline
def testString_ReversePart(write ok Int, write errorsCoordinates List)
    var c String = ""
    test: ok, errorsCoordinates
        c.reversePart(0, 0).nothing?()
        c == ""
        c.reversePart(0, 1) : error_outOfRange
        c == ""
        c.reversePart(1, 1) : error_outOfRange
        c == ""
        c.reversePart(1, 0) : error_outOfRange
        c == ""
        c.reversePart(-1, -1) : error_outOfRange
        c == ""
        c.reversePart(-9223372036854775808, 0) : error_outOfRange
        c == ""
        c.reversePart(0, -9223372036854775808) : error_outOfRange
        c == ""
        c.reversePart(0, 9223372036854775807) : error_outOfRange
        c == ""
        c.reversePart(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == ""
    c = "1"
    test: ok, errorsCoordinates
        c.reversePart(0, 0).nothing?()
        c == "1"
        c.reversePart(0, 1).nothing?()
        c == "1"
        c.reversePart(1, 1).nothing?()
        c == "1"
        c.reversePart(0, 2) : error_outOfRange
        c == "1"
        c.reversePart(2, 1) : error_outOfRange
        c == "1"
        c.reversePart(1, 2) : error_outOfRange
        c == "1"
        c.reversePart(2, 2) : error_outOfRange
        c == "1"
        c.reversePart(1, 0) : error_outOfRange
        c == "1"
        c.reversePart(-1, -1) : error_outOfRange
        c == "1"
        c.reversePart(-9223372036854775808, 1) : error_outOfRange
        c == "1"
        c.reversePart(0, -9223372036854775808) : error_outOfRange
        c == "1"
        c.reversePart(0, 9223372036854775807) : error_outOfRange
        c == "1"
        c.reversePart(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == "1"
    c = "12"
    test: ok, errorsCoordinates
        c.reversePart(0, 0).nothing?()
        c == "12"
        c.reversePart(0, 1).nothing?()
        c == "12"
        c.reversePart(1, 1).nothing?()
        c == "12"
        c.reversePart(1, 2).nothing?()
        c == "12"
        c.reversePart(2, 2).nothing?()
        c == "12"
        c.reversePart(0, 2).nothing?()
        c == "21"
        c.reversePart(0, 3) : error_outOfRange
        c == "21"
        c.reversePart(3, 0) : error_outOfRange
        c == "21"
        c.reversePart(1, 3) : error_outOfRange
        c == "21"
        c.reversePart(3, 3) : error_outOfRange
        c == "21"
        c.reversePart(1, 0) : error_outOfRange
        c == "21"
        c.reversePart(-1, -1) : error_outOfRange
        c == "21"
        c.reversePart(-9223372036854775808, 0) : error_outOfRange
        c == "21"
        c.reversePart(0, -9223372036854775808) : error_outOfRange
        c == "21"
        c.reversePart(0, 9223372036854775807) : error_outOfRange
        c == "21"
        c.reversePart(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == "21"
    c = "123456789"
    test: ok, errorsCoordinates
        c.reversePart(0, 0).nothing?()
        c == "123456789"
        c.reversePart(0, 1).nothing?()
        c == "123456789"
        c.reversePart(1, 1).nothing?()
        c == "123456789"
        c.reversePart(1, 2).nothing?()
        c == "123456789"
        c.reversePart(0, 5).nothing?()
        c == "543216789"
        c.reversePart(5, 9).nothing?()
        c == "543219876"
        c.reversePart(0, 9).nothing?()
        c == "678912345"
        c.reversePart(3, 7).nothing?()
        c == "678321945"
        c.reversePart(0, 10) : error_outOfRange
        c == "678321945"
        c.reversePart(3, 0) : error_outOfRange
        c == "678321945"
        c.reversePart(9, 0) : error_outOfRange
        c == "678321945"
        c.reversePart(10, 0) : error_outOfRange
        c == "678321945"
        c.reversePart(3, -1) : error_outOfRange
        c == "678321945"
        c.reversePart(-1, -1) : error_outOfRange
        c == "678321945"
        c.reversePart(-9223372036854775808, 0) : error_outOfRange
        c == "678321945"
        c.reversePart(0, -9223372036854775808) : error_outOfRange
        c == "678321945"
        c.reversePart(0, 9223372036854775807) : error_outOfRange
        c == "678321945"
        c.reversePart(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == "678321945"
        c.reversePart(9223372036854775807, -9223372036854775808) : error_outOfRange
        c == "678321945"
    c = ""
    for :(i Int = 0) i < 128; i++
        c.addItem(i.intToChar())
    var c1 String = ""
    for :(i Int = 63) i >= 0; i--
        c1.addItem(i.intToChar())
    var c2 String = ""
    c2.addItem(64.intToChar())
    for :(i Int = 0) i < 64; i++
        c2.addItem(i.intToChar())
    test: ok, errorsCoordinates
        c.reversePart(0, 64).nothing?()
        c[0 : 64] == c1
        c.reversePart(0, 65).nothing?()
        c[0 : 65] == c2

#noinline
def testString_Dump(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        "".dump(0) == "Type: STD::String = \n"
        "".dump(1) == "  Type: STD::String = \n"
        "1".dump(0) == "Type: STD::String = 1\n"
        "1".dump(1) == "  Type: STD::String = 1\n"
