module Main

#inline
def unsafe_bytes_getCounter(bytes $Any) Int
    return bytes.unsafe_getI64(0)

def testBytes(write ok Int, write errorsCoordinates List)
    testBytes_MemoryManagement(ok, errorsCoordinates)
    testBytes_Equal(ok, errorsCoordinates)
    testBytes_Ordered(ok, errorsCoordinates)
    testBytes_GetFromAToLast(ok, errorsCoordinates)
    testBytes_GetFromFirstToA(ok, errorsCoordinates)
    testBytes_GetRange(ok, errorsCoordinates)
    testBytes_GetItem(ok, errorsCoordinates)
    testBytes_Add(ok, errorsCoordinates)
    testBytes_StringWriter(ok, errorsCoordinates)
    testBytes_StringReader(ok, errorsCoordinates)
    testBytes_Hashed(ok, errorsCoordinates)
    testBytes_Long(ok, errorsCoordinates)
    testBytes_Container(ok, errorsCoordinates)
    testBytes_Copy(ok, errorsCoordinates)
    testBytes_Put(ok, errorsCoordinates)
    testBytes_Iterator(ok, errorsCoordinates)
    testBytes_BinarySerializable(ok, errorsCoordinates)
    testBytes_Swap(ok, errorsCoordinates)
    testBytes_SetItem(ok, errorsCoordinates)
    testBytes_ContainFromAtoB?(ok, errorsCoordinates)
    testBytes_CountFromAtoB(ok, errorsCoordinates)
    testBytes_CountPartFromAtoB(ok, errorsCoordinates)
    testBytes_PartsEqual?(ok, errorsCoordinates)
    testBytes_LookNFromAtoB(ok, errorsCoordinates)
    testBytes_LookNPartFromAtoB(ok, errorsCoordinates)
    testBytes_LookAllFromAtoB(ok, errorsCoordinates)
    testBytes_LookAllPartsFromAtoB(ok, errorsCoordinates)
    testBytes_LookBackNFromAtoB(ok, errorsCoordinates)
    testBytes_LookBackNPartFromAtoB(ok, errorsCoordinates)
    testBytes_Delete$(ok, errorsCoordinates)
    testBytes_Delete(ok, errorsCoordinates)
    testBytes_Replace$(ok, errorsCoordinates)
    testBytes_Replace(ok, errorsCoordinates)
    testBytes_Insert$(ok, errorsCoordinates)
    testBytes_Insert(ok, errorsCoordinates)
    testBytes_InsertPart$(ok, errorsCoordinates)
    testBytes_InsertPart(ok, errorsCoordinates)
    testBytes_Repeat(ok, errorsCoordinates)
    testBytes_RepeatPart(ok, errorsCoordinates)
    testBytes_ReverseFromAtoB(ok, errorsCoordinates)
    testBytes_Dump(ok, errorsCoordinates)

#noinline
def testBytes_MemoryManagement(write ok Int, write errorsCoordinates List)
    var byte Int = 1
    var bytes1 Bytes = [byte, 2, 3].repackTo(Bytes)
    var bytes2 Bytes = bytes1
    var bytes3 Bytes = [byte, 2, 3].repackTo(Bytes)
    test: ok, errorsCoordinates
        unsafe_bytes_getCounter(bytes1) == 2
        unsafe_bytes_getCounter(bytes2) == 2
        unsafe_bytes_getCounter(bytes3) == 1
    var allOk Bool = false
    var count Int = 0
    try
        parse :(parse) index, byte_ = bytes1
            count++
            allOk = index.inRange?(0, 3) && byte_.type?(Int)
            if !allOk
                end parse
    catch
        count = 0
    test: ok, errorsCoordinates
        allOk
        count == 3
        unsafe_bytes_getCounter(bytes1) == 2
    bytes1.shar__rc_free()
    test: ok, errorsCoordinates
        unsafe_bytes_getCounter(bytes1) == 1
        unsafe_bytes_getCounter(bytes2) == 1
    bytes1.shar__rc_use()
    test: ok, errorsCoordinates
        unsafe_bytes_getCounter(bytes1) == 2
        unsafe_bytes_getCounter(bytes2) == 2
    bytes2 = [1, 2, 3].repackTo(Bytes)
    test: ok, errorsCoordinates
        unsafe_bytes_getCounter(bytes1) == 1
        unsafe_bytes_getCounter(bytes2) == 1
    bytes1.shar__to_const()
    var bytes4 Bytes = bytes3
    var bytes5 Bytes = [1].repackTo(Bytes)
    test: ok, errorsCoordinates
        unsafe_bytes_getCounter(bytes1) == 0
        unsafe_bytes_getCounter(bytes2) == 1
        unsafe_bytes_getCounter(bytes3) == 2
        unsafe_bytes_getCounter(bytes4) == 2
        bytes1.use?()
        !bytes2.use?()
        bytes3.use?()
        bytes4.use?()
        !bytes5.use?()
        bytes1.constant?()
        !bytes2.constant?()
        !bytes3.constant?()
        !bytes4.constant?()
        !bytes5.constant?()
    bytes1 = bytes1.clone()
    bytes2 = bytes3.clone()
    test: ok, errorsCoordinates
        unsafe_bytes_getCounter(bytes1) == 1
        unsafe_bytes_getCounter(bytes2) == 1
        unsafe_bytes_getCounter(bytes3) == 2
        unsafe_bytes_getCounter(bytes4) == 2
        unsafe_bytes_getCounter(bytes5) == 1
        !bytes1.use?()
        !bytes1.constant?()
        !bytes2.use?()
        !bytes2.constant?()
    test: ok, errorsCoordinates
        unsafe_bytes_getCounter(bytes1) == 1
        unsafe_bytes_getCounter(bytes2) == 1
        unsafe_bytes_getCounter(bytes3) == 2
        unsafe_bytes_getCounter(bytes4) == 2
        unsafe_bytes_getCounter(bytes5) == 1
        !bytes1.use?()
        !bytes1.constant?()
        !bytes2.use?()
        !bytes2.constant?()
    allOk = false
    bytes1 = Bytes()
    try
        for :(i Int = 0) i < 300; i++
            bytes1.addItem(i)
        bytes2 = bytes1
        for :(i Int = 1) i < 150; i++
            bytes1.setItem(i, i + 1)
        allOk = bytes1[0] == 0
        if allOk
            for :(i Int = 1) i < 150; i++
                allOk = bytes1[i] == i + 1
                if !allOk
                    end i
        if allOk
            for :(i Int = 150) i < 300; i++
                allOk = bytes1[i] == i % 256
                if !allOk
                    end i
        if allOk
            for :(i Int = 0) i < 300; i++
                allOk = bytes2[i] == i % 256
                if !allOk
                    end i
        bytes3 = bytes2
        for :(i Int = 300) i < 400; i++
            bytes2.addItem(i)
        allOk = allOk && bytes1[0] == 0
        if allOk
            for :(i Int = 1) i < 150; i++
                allOk = bytes1[i] == i + 1
                if !allOk
                    end i
        if allOk
            for :(i Int = 150) i < 300; i++
                allOk = bytes1[i] == i % 256
                if !allOk
                    end i
        if allOk
            for :(i Int = 0) i < 400; i++
                allOk = bytes2[i] == i % 256
                if !allOk
                    end i
    catch
        nothing
    test: ok, errorsCoordinates
        allOk
        bytes1.length~() == 300
        bytes2.length~() == 400
        bytes3.length~() == 300

#noinline
def testBytes_Equal(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Bytes() == Bytes()
        Bytes() != [1].repackTo(Bytes)
        [1].repackTo(Bytes) != Bytes()
        [1].repackTo(Bytes) == [1].repackTo(Bytes)
        [0].repackTo(Bytes) == [0].repackTo(Bytes)
        [1].repackTo(Bytes) != [11].repackTo(Bytes)
        [1].repackTo(Bytes) != [2].repackTo(Bytes)
        [1].repackTo(Bytes) != [21].repackTo(Bytes)
        [1].repackTo(Bytes) != [12].repackTo(Bytes)
        [11].repackTo(Bytes) != [1].repackTo(Bytes)
        [2].repackTo(Bytes) != [1].repackTo(Bytes)
        [21].repackTo(Bytes) != [1].repackTo(Bytes)
        [12].repackTo(Bytes) != [1].repackTo(Bytes)
        [12, 13, 14].repackTo(Bytes) == [12, 13, 14].repackTo(Bytes)
        [12, 13, 14].repackTo(Bytes) != [12, 13, 13].repackTo(Bytes)
        [12, 13, 14].repackTo(Bytes) != [12, 13].repackTo(Bytes)

#noinline
def testBytes_Ordered(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [2, 2, 2].repackTo(Bytes)  > [1, 2, 2].repackTo(Bytes)
        [2, 2, 3].repackTo(Bytes)  > [2, 2, 2].repackTo(Bytes)
        [2, 2, 2, 2].repackTo(Bytes)  > [2, 2, 2].repackTo(Bytes)
        [2, 2, 2, 2].repackTo(Bytes)  > [2, 2, 2].repackTo(Bytes)
        [1, 1, 2].repackTo(Bytes)  > [1, 1, 1, 2].repackTo(Bytes)
        [2, 2, 2, 2].repackTo(Bytes)  > [2, 2, 2].repackTo(Bytes)
        [2].repackTo(Bytes) > Bytes()
        [2, 2, 2].repackTo(Bytes)  > [1, 2, 2].repackTo(Bytes)
        !([1, 2, 2].repackTo(Bytes)  > [2, 2, 2].repackTo(Bytes) )
        !([2, 2, 2].repackTo(Bytes)  > [2, 2, 2].repackTo(Bytes) )
        !([2, 2, 2].repackTo(Bytes)  > [2, 2, 2, 2].repackTo(Bytes) )
        !([2, 2, 2].repackTo(Bytes)  > [2, 2, 2, 2].repackTo(Bytes) )
        !([1, 1, 1, 2].repackTo(Bytes)  > [1, 1, 2].repackTo(Bytes) )
        !([2, 2, 2].repackTo(Bytes)  > [2, 2, 2, 2].repackTo(Bytes) )
        !([2, 2].repackTo(Bytes)  > [2, 2].repackTo(Bytes) )
        !(Bytes() > [2].repackTo(Bytes))
        !(Bytes() > Bytes())
        [1, 2, 2].repackTo(Bytes)  < [2, 2, 2].repackTo(Bytes)
        [2, 2, 2].repackTo(Bytes)  < [2, 2, 3].repackTo(Bytes)
        [2, 2, 2].repackTo(Bytes)  < [2, 2, 2, 2].repackTo(Bytes)
        [2, 2, 2].repackTo(Bytes)  < [2, 2, 2, 2].repackTo(Bytes)
        [1, 1, 1, 2].repackTo(Bytes)  < [1, 1, 2].repackTo(Bytes)
        [2, 2, 2].repackTo(Bytes)  < [2, 2, 2, 2].repackTo(Bytes)
        Bytes() < [2].repackTo(Bytes)
        [1, 2, 2].repackTo(Bytes)  < [2, 2, 2].repackTo(Bytes)
        !([2, 2, 2].repackTo(Bytes)  < [1, 2, 2].repackTo(Bytes) )
        !([2, 2, 2].repackTo(Bytes)  < [2, 2, 2].repackTo(Bytes) )
        !([2, 2, 2, 2].repackTo(Bytes)  < [2, 2, 2].repackTo(Bytes) )
        !([2, 2, 2, 2].repackTo(Bytes)  < [2, 2, 2].repackTo(Bytes) )
        !([1, 1, 2].repackTo(Bytes)  < [1, 1, 1, 2].repackTo(Bytes) )
        !([2, 2, 2, 2].repackTo(Bytes)  < [2, 2, 2].repackTo(Bytes) )
        !([2, 2].repackTo(Bytes)  < [2, 2].repackTo(Bytes) )
        !([2].repackTo(Bytes) < Bytes())
        !(Bytes() < Bytes())
        [2, 2, 2].repackTo(Bytes)  >= [1, 2, 2].repackTo(Bytes)
        [2, 2, 2].repackTo(Bytes)  >= [2, 2, 2].repackTo(Bytes)
        [2, 2, 2, 2].repackTo(Bytes)  >= [2, 2, 2].repackTo(Bytes)
        [2, 2, 2, 2].repackTo(Bytes)  >= [2, 2, 2].repackTo(Bytes)
        [1, 1, 2].repackTo(Bytes)  >= [1, 1, 1, 2].repackTo(Bytes)
        [2, 2, 2, 2].repackTo(Bytes)  >= [2, 2, 2].repackTo(Bytes)
        [2].repackTo(Bytes) >= Bytes()
        [2, 2, 2].repackTo(Bytes)  >= [1, 2, 2].repackTo(Bytes)
        [2, 2].repackTo(Bytes)  >= [2, 2].repackTo(Bytes)
        Bytes() >= Bytes()
        !([1, 2, 2].repackTo(Bytes)  >= [2, 2, 2].repackTo(Bytes) )
        !([2, 2, 1].repackTo(Bytes)  >= [2, 2, 2].repackTo(Bytes) )
        !([2, 2, 2].repackTo(Bytes)  >= [2, 2, 2, 2].repackTo(Bytes) )
        !([2, 2, 2].repackTo(Bytes)  >= [2, 2, 2, 2].repackTo(Bytes) )
        !([1, 1, 1, 2].repackTo(Bytes)  >= [1, 1, 2].repackTo(Bytes) )
        !([2, 2, 2].repackTo(Bytes)  >= [2, 2, 2, 2].repackTo(Bytes) )
        !(Bytes() >= [2].repackTo(Bytes))
        [1, 2, 2].repackTo(Bytes)  <= [2, 2, 2].repackTo(Bytes)
        [2, 2, 2].repackTo(Bytes)  <= [2, 2, 2].repackTo(Bytes)
        [2, 2, 2].repackTo(Bytes)  <= [2, 2, 2, 2].repackTo(Bytes)
        [2, 2, 2].repackTo(Bytes)  <= [2, 2, 2, 2].repackTo(Bytes)
        [1, 1, 1, 2].repackTo(Bytes)  <= [1, 1, 2].repackTo(Bytes)
        [2, 2, 2].repackTo(Bytes)  <= [2, 2, 2, 2].repackTo(Bytes)
        Bytes() <= [2].repackTo(Bytes)
        [1, 2, 2].repackTo(Bytes)  <= [2, 2, 2].repackTo(Bytes)
        [2, 2].repackTo(Bytes)  <= [2, 2].repackTo(Bytes)
        Bytes() <= Bytes()
        !([2, 2, 2].repackTo(Bytes)  <= [1, 2, 2].repackTo(Bytes) )
        !([2, 2, 2].repackTo(Bytes)  <= [2, 2, 1].repackTo(Bytes) )
        !([2, 2, 2, 2].repackTo(Bytes)  <= [2, 2, 2].repackTo(Bytes) )
        !([2, 2, 2, 2].repackTo(Bytes)  <= [2, 2, 2].repackTo(Bytes) )
        !([1, 1, 2].repackTo(Bytes)  <= [1, 1, 1, 2].repackTo(Bytes) )
        !([2, 2, 2, 2].repackTo(Bytes)  <= [2, 2, 2].repackTo(Bytes) )
        !([2].repackTo(Bytes) <= Bytes())
        [0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 6].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 8].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        [0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 6].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        !([2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 8].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        [2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 8].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 6].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        [2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 8].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)
        !([0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 6].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes))
        [0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        [0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        !([2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        [2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        [2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        !([0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes))
        [0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 0].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 2].repackTo(Bytes) < [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        [0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 0].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        !([2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 2].repackTo(Bytes) <= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        [2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 2].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 0].repackTo(Bytes) > [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        [2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 2].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)
        !([0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        !([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 0].repackTo(Bytes) >= [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes))
        compare([0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)) == enum::ord_less
        compare([1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)) == enum::ord_less
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)) == enum::ord_less
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 6].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)) == enum::ord_less
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)) == enum::ord_equal
        compare([2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)) == enum::ord_great
        compare([1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)) == enum::ord_great
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)) == enum::ord_great
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 8].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7].repackTo(Bytes)) == enum::ord_great
        compare([0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)) == enum::ord_less
        compare([1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)) == enum::ord_less
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)) == enum::ord_less
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)) == enum::ord_less
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)) == enum::ord_equal
        compare([2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)) == enum::ord_great
        compare([1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)) == enum::ord_great
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)) == enum::ord_great
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)) == enum::ord_great
        compare([0, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)) == enum::ord_less
        compare([1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)) == enum::ord_less
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)) == enum::ord_less
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 0].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)) == enum::ord_less
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)) == enum::ord_equal
        compare([2, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)) == enum::ord_great
        compare([1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)) == enum::ord_great
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)) == enum::ord_great
        compare([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 2].repackTo(Bytes), [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1].repackTo(Bytes)) == enum::ord_great

#noinline
def testBytes_GetFromAToLast(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes)[0:] == [].repackTo(Bytes)
        [1].repackTo(Bytes)[1:] == [].repackTo(Bytes)
        [1].repackTo(Bytes)[0:] == [1].repackTo(Bytes)
        [1, 2].repackTo(Bytes)[2:] == [].repackTo(Bytes)
        [1, 2].repackTo(Bytes)[1:] == [2].repackTo(Bytes)
        [1, 2].repackTo(Bytes)[0:] == [1, 2].repackTo(Bytes)
        [].repackTo(Bytes)[-9223372036854775808:] : error_outOfRange
        [].repackTo(Bytes)[9223372036854775807:] : error_outOfRange
        [].repackTo(Bytes)[-1:] : error_outOfRange
        [].repackTo(Bytes)[1:] : error_outOfRange
        [].repackTo(Bytes)[2:] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[0:] == [1, 2, 3].repackTo(Bytes)
        [1, 2, 3].repackTo(Bytes)[1:] == [2, 3].repackTo(Bytes)
        [1, 2, 3].repackTo(Bytes)[2:] == [3].repackTo(Bytes)
        [1, 2, 3].repackTo(Bytes)[3:] == [].repackTo(Bytes)
        [1, 2, 3].repackTo(Bytes)[-9223372036854775808:] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[9223372036854775807:] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[-1:] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[4:] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[5:] : error_outOfRange

#noinline
def testBytes_GetFromFirstToA(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes)[:0] == [].repackTo(Bytes)
        [1].repackTo(Bytes)[:1] == [1].repackTo(Bytes)
        [1].repackTo(Bytes)[:0] == [].repackTo(Bytes)
        [1, 2].repackTo(Bytes)[:2] == [1, 2].repackTo(Bytes)
        [1, 2].repackTo(Bytes)[:1] == [1].repackTo(Bytes)
        [1, 2].repackTo(Bytes)[:0] == [].repackTo(Bytes)
        [].repackTo(Bytes)[:-9223372036854775808] : error_outOfRange
        [].repackTo(Bytes)[:9223372036854775807] : error_outOfRange
        [].repackTo(Bytes)[:-1] : error_outOfRange
        [].repackTo(Bytes)[:1] : error_outOfRange
        [].repackTo(Bytes)[:2] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[:0] == [].repackTo(Bytes)
        [1, 2, 3].repackTo(Bytes)[:1] == [1].repackTo(Bytes)
        [1, 2, 3].repackTo(Bytes)[:2] == [1, 2].repackTo(Bytes)
        [1, 2, 3].repackTo(Bytes)[:3] == [1, 2, 3].repackTo(Bytes)
        [1, 2, 3].repackTo(Bytes)[:-9223372036854775808] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[:9223372036854775807] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[:-1] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[:4] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[:5] : error_outOfRange

#noinline
def testBytes_GetRange(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Bytes()[0:0] == Bytes()
        [1].repackTo(Bytes)[0:0] == Bytes()
        [1].repackTo(Bytes)[0:1] == [1].repackTo(Bytes)
        [1, 2].repackTo(Bytes)[0:0] == Bytes()
        [1, 2].repackTo(Bytes)[0:1] == [1].repackTo(Bytes)
        [1, 2].repackTo(Bytes)[1:2] == [2].repackTo(Bytes)
        [1, 2].repackTo(Bytes)[0:2] == [1, 2].repackTo(Bytes)
        [1, 2].repackTo(Bytes)[2:2] == Bytes()
        Bytes()[-9223372036854775808:-9223372036854775808] : error_outOfRange
        Bytes()[-9223372036854775808:-1] : error_outOfRange
        Bytes()[-9223372036854775808:9223372036854775807] : error_outOfRange
        Bytes()[9223372036854775807:9223372036854775807] : error_outOfRange
        Bytes()[-1:-1] : error_outOfRange
        Bytes()[-1:0] : error_outOfRange
        Bytes()[0:-1] : error_outOfRange
        Bytes()[0:1] : error_outOfRange
        Bytes()[1:0] : error_outOfRange
        Bytes()[1:1] : error_outOfRange
        Bytes()[2:1] : error_outOfRange
        Bytes()[2:0] : error_outOfRange
        Bytes()[2:-1] : error_outOfRange
        Bytes()[2:-9223372036854775808] : error_outOfRange
        Bytes()[2:9223372036854775807] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[0:3] == [1, 2, 3].repackTo(Bytes)
        [1, 2, 3].repackTo(Bytes)[1:3] == [2, 3].repackTo(Bytes)
        [1, 2, 3].repackTo(Bytes)[0:2] == [1, 2].repackTo(Bytes)
        [1, 2, 3].repackTo(Bytes)[-9223372036854775808:-9223372036854775808] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[-9223372036854775808:-1] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[-9223372036854775808:9223372036854775807] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[9223372036854775807:9223372036854775807] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[-1:-1] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[-1:0] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[0:-1] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[1:0] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[2:1] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[2:0] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[2:-1] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[2:-9223372036854775808] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[2:9223372036854775807] : error_outOfRange

#noinline
def testBytes_GetItem(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Bytes()[0] : error_outOfRange
        Bytes()[1] : error_outOfRange
        Bytes()[-1] : error_outOfRange
        Bytes()[-9223372036854775808] : error_outOfRange
        Bytes()[9223372036854775807] : error_outOfRange
        [1].repackTo(Bytes)[0] == 1
        [1].repackTo(Bytes)[1] : error_outOfRange
        [1].repackTo(Bytes)[-1] : error_outOfRange
        [1].repackTo(Bytes)[-9223372036854775808] : error_outOfRange
        [1].repackTo(Bytes)[9223372036854775807] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[0] == 1
        [1, 2, 3].repackTo(Bytes)[1] == 2
        [1, 2, 3].repackTo(Bytes)[2] == 3
        [256].repackTo(Bytes)[0] == 0
        [257].repackTo(Bytes)[0] == 1
        [1, 2, 3].repackTo(Bytes)[3] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[-1] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[-9223372036854775808] : error_outOfRange
        [1, 2, 3].repackTo(Bytes)[9223372036854775807] : error_outOfRange

#noinline
def testBytes_Add(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Bytes() + Bytes() == Bytes()
        Bytes() + [1].repackTo(Bytes) == [1].repackTo(Bytes)
        [1].repackTo(Bytes) + Bytes() == [1].repackTo(Bytes)
        Bytes() + [1, 2].repackTo(Bytes) == [1, 2].repackTo(Bytes)
        [1, 2].repackTo(Bytes) + Bytes() == [1, 2].repackTo(Bytes)
        [1, 2].repackTo(Bytes) + [3].repackTo(Bytes) == [1, 2, 3].repackTo(Bytes)
        [0].repackTo(Bytes) + [1, 2].repackTo(Bytes) == [0, 1, 2].repackTo(Bytes)
        [1, 2].repackTo(Bytes) + [3, 4].repackTo(Bytes) == [1, 2, 3, 4].repackTo(Bytes)
        [1, 0].repackTo(Bytes) + [1, 2].repackTo(Bytes) == [1, 0, 1, 2].repackTo(Bytes)
    var bytes1 Bytes  = Bytes()
    var bytes2 Bytes  = Bytes()
    var bytes3 Bytes  = Bytes()
    var bytes4 Bytes  = [1, 2].repackTo(Bytes)
    var bytes5 Bytes  = [1, 2].repackTo(Bytes)
    var bytes6 Bytes = [0].repackTo(Bytes)
    var bytes7 Bytes = Bytes()
    var bytes8 Bytes = [1, 2].repackTo(Bytes)
    var bytes9 Bytes = [1, 0].repackTo(Bytes)
    test: ok, errorsCoordinates
        (bytes1 += Bytes()).nothing?()
        bytes1 == Bytes()
        (bytes2 += [1].repackTo(Bytes)).nothing?()
        bytes2 == [1].repackTo(Bytes)
        (bytes3 += [1].repackTo(Bytes)).nothing?()
        bytes3 == [1].repackTo(Bytes)
        (bytes4 += Bytes()).nothing?()
        bytes4 == [1, 2].repackTo(Bytes)
        (bytes5 += [3].repackTo(Bytes)).nothing?()
        bytes5 == [1, 2, 3].repackTo(Bytes)
        (bytes6 += [1, 2].repackTo(Bytes)).nothing?()
        bytes6 == [0, 1, 2].repackTo(Bytes)
        (bytes7 += [1, 2].repackTo(Bytes)).nothing?()
        bytes7 == [1, 2].repackTo(Bytes)
        (bytes8 += [3, 4].repackTo(Bytes)).nothing?()
        bytes8 == [1, 2, 3, 4].repackTo(Bytes)
        (bytes9 += [1, 2].repackTo(Bytes)).nothing?()
        bytes9 == [1, 0, 1, 2].repackTo(Bytes)
    bytes1 = Bytes().clone()
    bytes2 = Bytes().clone()
    bytes3 = [1].repackTo(Bytes).clone()
    bytes4 = [1, 2].repackTo(Bytes).clone()
    bytes5 = [1, 2].repackTo(Bytes).clone()
    bytes6 = [0].repackTo(Bytes).clone()
    bytes7 = Bytes().clone()
    bytes8 = [1, 2].repackTo(Bytes).clone()
    bytes9 = [1, 0].repackTo(Bytes).clone()
    test: ok, errorsCoordinates
        (bytes1 += Bytes()).nothing?()
        bytes1 == Bytes()
        (bytes2 += [1].repackTo(Bytes)).nothing?()
        bytes2 == [1].repackTo(Bytes)
        (bytes3 += Bytes()).nothing?()
        bytes3 == [1].repackTo(Bytes)
        (bytes4 += Bytes()).nothing?()
        bytes4 == [1, 2].repackTo(Bytes)
        (bytes5 += [3].repackTo(Bytes)).nothing?()
        bytes5 == [1, 2, 3].repackTo(Bytes)
        (bytes6 += [1, 2].repackTo(Bytes)).nothing?()
        bytes6 == [0, 1, 2].repackTo(Bytes)
        (bytes7 += [1, 2].repackTo(Bytes)).nothing?()
        bytes7 == [1, 2].repackTo(Bytes)
        (bytes8 += [3, 4].repackTo(Bytes)).nothing?()
        bytes8 == [1, 2, 3, 4].repackTo(Bytes)
        (bytes9 += [1, 2].repackTo(Bytes)).nothing?()
        bytes9 == [1, 0, 1, 2].repackTo(Bytes)

#noinline
def testBytes_StringWriter(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Bytes().toString() == ""
        [1].repackTo(Bytes).toString() == "01"
        [1, 10].repackTo(Bytes).toString() == "010A"
        [1, 255].repackTo(Bytes).toString() == "01FF"
        [1, 511].repackTo(Bytes).toString() == "01FF"
        [1, 12, 13, 0xf].repackTo(Bytes).toString() == "010C0D0F"

#noinline
def testBytes_StringReader(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Bytes.fromString("") == Bytes()
        Bytes.fromString("01") == [1].repackTo(Bytes)
        Bytes.fromString("010A") == [1, 10].repackTo(Bytes)
        Bytes.fromString("01FF") == [1, 255].repackTo(Bytes)
        Bytes.fromString("010C0D0F") == [1, 12, 13, 15].repackTo(Bytes)
        Bytes.fromString("010c0d0f") == [1, 12, 13, 15].repackTo(Bytes)
        Bytes.fromString("0") : error_readFromString
        Bytes.fromString("010") : error_readFromString
        Bytes.fromString("1g") : error_readFromString
        Bytes.fromString("F") : error_readFromString
        Bytes.fromString("GG") : error_readFromString

#noinline
def testBytes_Hashed(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Bytes().getHash() == Bytes().getHash()
        Bytes().getRandomizedHash() == Bytes().getRandomizedHash()
        [1].repackTo(Bytes).getHash() == [1].repackTo(Bytes).getHash()
        [1].repackTo(Bytes).getRandomizedHash() == [1].repackTo(Bytes).getRandomizedHash()
        [1, 0, 1, 2].repackTo(Bytes).getHash() == [1, 0, 1, 2].repackTo(Bytes).getHash()
        [1, 0, 1, 2].repackTo(Bytes).getRandomizedHash() == [1, 0, 1, 2].repackTo(Bytes).getRandomizedHash()

#noinline
def testBytes_Long(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Bytes().length~() == 0
        [1].repackTo(Bytes).length~() == 1
        [1, 2].repackTo(Bytes).length~() == 2
        [1, 2, 3].repackTo(Bytes).length~() == 3
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0].repackTo(Bytes).length~() == 10

#noinline
def testBytes_Container(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Bytes().addItem$(1) == [1].repackTo(Bytes)
        [1].repackTo(Bytes).addItem$(2) == [1, 2].repackTo(Bytes)
        [1, 2].repackTo(Bytes).addItem$(3) == [1, 2, 3].repackTo(Bytes)
    var bytes1 Bytes = Bytes()
    var bytes2 Bytes = [1, 2].repackTo(Bytes)
    var bytes3 Bytes = [1].repackTo(Bytes)
    var bytes4 Bytes = [1, 2].repackTo(Bytes)
    var bytes5 Bytes = [1, 2].repackTo(Bytes)
    test: ok, errorsCoordinates
        bytes1.addItem(2).nothing?()
        bytes1 == [2].repackTo(Bytes)
        bytes2.addItem(3).nothing?()
        bytes2 == [1, 2, 3].repackTo(Bytes)
        bytes3.addItem(4).nothing?()
        bytes3 == [1, 4].repackTo(Bytes)
        bytes4.addItem(2).nothing?()
        bytes4 == [1, 2, 2].repackTo(Bytes)
        bytes5.addItem(3).nothing?()
        bytes5 == [1, 2, 3].repackTo(Bytes)
    bytes1 = Bytes().clone()
    bytes2 = [1, 2].repackTo(Bytes).clone()
    bytes3 = [1].repackTo(Bytes).clone()
    bytes4 = [1, 2].repackTo(Bytes).clone()
    bytes5 = [1, 2].repackTo(Bytes).clone()
    test: ok, errorsCoordinates
        bytes1.addItem(2).nothing?()
        bytes1 == [2].repackTo(Bytes)
        bytes2.addItem(3).nothing?()
        bytes2 == [1, 2, 3].repackTo(Bytes)
        bytes3.addItem(4).nothing?()
        bytes3 == [1, 4].repackTo(Bytes)
        bytes4.addItem(2).nothing?()
        bytes4 == [1, 2, 2].repackTo(Bytes)
        bytes5.addItem(3).nothing?()
        bytes5 == [1, 2, 3].repackTo(Bytes)
    bytes1 = [1].repackTo(Bytes)
    bytes2 = [1, 2].repackTo(Bytes)
    bytes3 = [1, 2].repackTo(Bytes)
    bytes4 = [1, 2].repackTo(Bytes)
    bytes5 = [1, 2, 3].repackTo(Bytes)
    var bytes6 Bytes = Bytes()
    test: ok, errorsCoordinates
        bytes1.setItem(0, 17).nothing?()
        bytes1 == [17].repackTo(Bytes)
        bytes2.setItem(0, 14).nothing?()
        bytes2 == [14, 2].repackTo(Bytes)
        bytes3.setItem(1, 0).nothing?()
        bytes3 == [1, 0].repackTo(Bytes)
        bytes4.setItem(0, 6).nothing?()
        bytes4.setItem(1, 5).nothing?()
        bytes4 == [6, 5].repackTo(Bytes)
        bytes5.setItem(2, 10).nothing?()
        bytes5 == [1, 2, 10].repackTo(Bytes)
        bytes6.setItem(0, 1) : error_outOfRange
        bytes6 == Bytes()
        bytes6.setItem(-1, 1) : error_outOfRange
        bytes6 == Bytes()
        bytes6.setItem(1, 1) : error_outOfRange
        bytes6 == Bytes()
        bytes6.setItem(-9223372036854775808, 1) : error_outOfRange
        bytes6 == Bytes()
        bytes6.setItem(9223372036854775807, 1) : error_outOfRange
        bytes6 == Bytes()
        bytes1.setItem(-1, 1) : error_outOfRange
        bytes1 == [17].repackTo(Bytes)
        bytes1.setItem(1, 1) : error_outOfRange
        bytes1 == [17].repackTo(Bytes)
        bytes1.setItem(-9223372036854775808, 1) : error_outOfRange
        bytes1 == [17].repackTo(Bytes)
        bytes1.setItem(9223372036854775807, 1) : error_outOfRange
        bytes1 == [17].repackTo(Bytes)
        bytes2.setItem(-1, 1) : error_outOfRange
        bytes2 == [14, 2].repackTo(Bytes)
        bytes2.setItem(2, 1) : error_outOfRange
        bytes2 == [14, 2].repackTo(Bytes)
        bytes2.setItem(-9223372036854775808, 1) : error_outOfRange
        bytes2 == [14, 2].repackTo(Bytes)
        bytes2.setItem(9223372036854775807, 1) : error_outOfRange
        bytes2 == [14, 2].repackTo(Bytes)
    bytes1 = [1].repackTo(Bytes).clone()
    bytes2 = [1, 2].repackTo(Bytes).clone()
    bytes3 = [1, 2].repackTo(Bytes).clone()
    bytes4 = [1, 2].repackTo(Bytes).clone()
    bytes5 = [1, 2, 3].repackTo(Bytes).clone()
    bytes6 = Bytes().clone()
    test: ok, errorsCoordinates
        bytes1.setItem(0, 17).nothing?()
        bytes1 == [17].repackTo(Bytes)
        bytes2.setItem(0, 14).nothing?()
        bytes2 == [14, 2].repackTo(Bytes)
        bytes3.setItem(1, 0).nothing?()
        bytes3 == [1, 0].repackTo(Bytes)
        bytes4.setItem(0, 6).nothing?()
        bytes4.setItem(1, 5).nothing?()
        bytes4 == [6, 5].repackTo(Bytes)
        bytes5.setItem(2, 10).nothing?()
        bytes5 == [1, 2, 10].repackTo(Bytes)
        bytes6.setItem(0, 1) : error_outOfRange
        bytes6 == Bytes()
        bytes6.setItem(-1, 1) : error_outOfRange
        bytes6 == Bytes()
        bytes6.setItem(1, 1) : error_outOfRange
        bytes6 == Bytes()
        bytes6.setItem(-9223372036854775808, 1) : error_outOfRange
        bytes6 == Bytes()
        bytes6.setItem(9223372036854775807, 1) : error_outOfRange
        bytes6 == Bytes()
        bytes1.setItem(-1, 1) : error_outOfRange
        bytes1 == [17].repackTo(Bytes)
        bytes1.setItem(1, 1) : error_outOfRange
        bytes1 == [17].repackTo(Bytes)
        bytes1.setItem(-9223372036854775808, 1) : error_outOfRange
        bytes1 == [17].repackTo(Bytes)
        bytes1.setItem(9223372036854775807, 1) : error_outOfRange
        bytes1 == [17].repackTo(Bytes)
        bytes2.setItem(-1, 1) : error_outOfRange
        bytes2 == [14, 2].repackTo(Bytes)
        bytes2.setItem(2, 1) : error_outOfRange
        bytes2 == [14, 2].repackTo(Bytes)
        bytes2.setItem(-9223372036854775808, 1) : error_outOfRange
        bytes2 == [14, 2].repackTo(Bytes)
        bytes2.setItem(9223372036854775807, 1) : error_outOfRange
        bytes2 == [14, 2].repackTo(Bytes)

#noinline
def testBytes_Copy(write ok Int, write errorsCoordinates List)
    var s1 Bytes = Bytes()
    var s2 Bytes = [1].repackTo(Bytes)
    var s3 Bytes = [1, 10, 3, 0, 0].repackTo(Bytes)
    test: ok, errorsCoordinates
        copy(s1, 0, Bytes(), 0, 0).nothing?()
        s1 == Bytes()
        copy(s1, 0, [1].repackTo(Bytes), 0, 0).nothing?()
        s1 == Bytes()
        copy(s1, 0, [1, 2].repackTo(Bytes), 1, 0).nothing?()
        s1 == Bytes()
        copy(s1, -1, Bytes(), 0, 0) :error_outOfRange
        s1 == Bytes()
        copy(s1, -9223372036854775808, Bytes(), 0, 0) :error_outOfRange
        s1 == Bytes()
        copy(s1, 1, Bytes(), 0, 0) :error_outOfRange
        s1 == Bytes()
        copy(s1, 9223372036854775807, Bytes(), 0, 0) :error_outOfRange
        s1 == Bytes()
        copy(s1, 0, Bytes(), -1, 0) :error_outOfRange
        s1 == Bytes()
        copy(s1, 0, Bytes(), -9223372036854775808, 0) :error_outOfRange
        s1 == Bytes()
        copy(s1, 0, Bytes(), 1, 0) :error_outOfRange
        s1 == Bytes()
        copy(s1, 0, Bytes(), 9223372036854775807, 0) :error_outOfRange
        s1 == Bytes()
        copy(s1, 0, Bytes(), 0, -1) :error_outOfRange
        s1 == Bytes()
        copy(s1, 0, Bytes(), 0, -9223372036854775808) :error_outOfRange
        s1 == Bytes()
        copy(s1, 0, Bytes(), 0, 1) :error_outOfRange
        s1 == Bytes()
        copy(s1, 0, Bytes(), 0, 9223372036854775807) :error_outOfRange
        s1 == Bytes()
        copy(s2, 0, Bytes(), 0, 0).nothing?()
        s2 == [1].repackTo(Bytes)
        copy(s2, 1, Bytes(), 0, 0).nothing?()
        s2 == [1].repackTo(Bytes)
        copy(s2, 1, [2].repackTo(Bytes), 1, 0).nothing?()
        s2 == [1].repackTo(Bytes)
        copy(s2, 0, [2].repackTo(Bytes), 0, 1).nothing?()
        s2 == [2].repackTo(Bytes)
        copy(s2, 0, [3, 4, 5].repackTo(Bytes), 0, 1).nothing?()
        s2 == [3].repackTo(Bytes)
        copy(s2, 0, [3, 4, 5].repackTo(Bytes), 1, 1).nothing?()
        s2 == [4].repackTo(Bytes)
        copy(s2, 0, [3, 4, 5].repackTo(Bytes), 2, 1).nothing?()
        s2 == [5].repackTo(Bytes)
        copy(s2, 0, [3, 4, 5].repackTo(Bytes), 0, 2) : error_outOfRange
        s2 == [5].repackTo(Bytes)
        copy(s2, 1, [3, 4, 5].repackTo(Bytes), 0, 1) : error_outOfRange
        s2 == [5].repackTo(Bytes)
        copy(s2, 0, [3, 4, 5].repackTo(Bytes), 2, 2) : error_outOfRange
        s2 == [5].repackTo(Bytes)
        copy(s2, -1, [3, 4, 5].repackTo(Bytes), 0, 1) : error_outOfRange
        s2 == [5].repackTo(Bytes)
        copy(s2, 2, [3, 4, 5].repackTo(Bytes), 0, 0) : error_outOfRange
        s2 == [5].repackTo(Bytes)
        copy(s2, 0, [3, 4, 5].repackTo(Bytes), -1, 0) : error_outOfRange
        s2 == [5].repackTo(Bytes)
        copy(s2, 0, [3, 4, 5].repackTo(Bytes), 0, -1) : error_outOfRange
        s2 == [5].repackTo(Bytes)
        copy(s3, 0, Bytes(), 0, 0).nothing?()
        s3 == [1, 10, 3, 0, 0].repackTo(Bytes)
        copy(s3, 1, Bytes(), 0, 0).nothing?()
        s3 == [1, 10, 3, 0, 0].repackTo(Bytes)
        copy(s3, 4, Bytes(), 0, 0).nothing?()
        s3 == [1, 10, 3, 0, 0].repackTo(Bytes)
        copy(s3, 0, [1, 2, 3, 4].repackTo(Bytes), 0, 0).nothing?()
        s3 == [1, 10, 3, 0, 0].repackTo(Bytes)
        copy(s3, 0, [7, 2, 3, 4].repackTo(Bytes), 0, 1).nothing?()
        s3 == [7, 10, 3, 0, 0].repackTo(Bytes)
        copy(s3, 1, [7, 2, 3, 4].repackTo(Bytes), 0, 4).nothing?()
        s3 == [7, 7, 2, 3, 4].repackTo(Bytes)
        copy(s3, 2, [7, 2, 3, 4].repackTo(Bytes), 2, 2).nothing?()
        s3 == [7, 7, 3, 4, 4].repackTo(Bytes)
        copy(s3, 5, [7, 2, 3, 4].repackTo(Bytes), 4, 0).nothing?()
        s3 == [7, 7, 3, 4, 4].repackTo(Bytes)
        copy(s3, 5, [7, 2, 3, 4].repackTo(Bytes), 5, 0) : error_outOfRange
        s3 == [7, 7, 3, 4, 4].repackTo(Bytes)
        copy(s3, 6, [7, 2, 3, 4].repackTo(Bytes), 4, 0) : error_outOfRange
        s3 == [7, 7, 3, 4, 4].repackTo(Bytes)
        copy(s3, 5, [7, 2, 3, 4].repackTo(Bytes), 4, 1) : error_outOfRange
        s3 == [7, 7, 3, 4, 4].repackTo(Bytes)
        copy(s3, 5, [7, 2, 3, 4].repackTo(Bytes), 4, -1) : error_outOfRange
        s3 == [7, 7, 3, 4, 4].repackTo(Bytes)
        copy(s3, -1, [7, 2, 3, 4].repackTo(Bytes), 4, 0) : error_outOfRange
        s3 == [7, 7, 3, 4, 4].repackTo(Bytes)
        copy(s3, 0, [7, 2, 3, 4].repackTo(Bytes), -1, 0) : error_outOfRange
        s3 == [7, 7, 3, 4, 4].repackTo(Bytes)

#noinline
def testBytes_Put(write ok Int, write errorsCoordinates List)
    var s1 Bytes = Bytes()
    var s2 Bytes = [10].repackTo(Bytes)
    var s3 Bytes = [10, 11, 12, 13].repackTo(Bytes)
    test: ok, errorsCoordinates
        s1.put(0, 2) : error_outOfRange
        s1 == Bytes()
        s1.put(1, 2) : error_outOfRange
        s1 == Bytes()
        s1.put(9223372036854775807, 2) : error_outOfRange
        s1 == Bytes()
        s1.put(-1, 2) : error_outOfRange
        s1 == Bytes()
        s1.put(-9223372036854775808, 2) : error_outOfRange
        s1 == Bytes()
        s2.put(0, 2) == 10
        s2 == [2].repackTo(Bytes)
        s2.put(0, 3) == 2
        s2 == [3].repackTo(Bytes)
        s2.put(1, 0) : error_outOfRange
        s2 == [3].repackTo(Bytes)
        s2.put(9223372036854775807, 0) : error_outOfRange
        s2 == [3].repackTo(Bytes)
        s2.put(-1, 0) : error_outOfRange
        s2 == [3].repackTo(Bytes)
        s2.put(-9223372036854775808, 0) : error_outOfRange
        s2 == [3].repackTo(Bytes)
        s3.put(0, 17) == 10
        s3 == [17, 11, 12, 13].repackTo(Bytes)
        s3.put(1, 4) == 11
        s3 == [17, 4, 12, 13].repackTo(Bytes)
        s3.put(3, 0) == 13
        s3 == [17, 4, 12, 0].repackTo(Bytes)
        s3.put(4, 1) : error_outOfRange
        s3 == [17, 4, 12, 0].repackTo(Bytes)
        s3.put(9223372036854775807, 1) : error_outOfRange
        s3 == [17, 4, 12, 0].repackTo(Bytes)
        s3.put(-1, 1) : error_outOfRange
        s3 == [17, 4, 12, 0].repackTo(Bytes)
        s3.put(-9223372036854775808, 1) : error_outOfRange
        s3 == [17, 4, 12, 0].repackTo(Bytes)

#noinline
def testBytes_Iterator(write ok Int, write errorsCoordinates List)
    var allOk Bool = true
    try
        parse _, _ = Bytes()
            allOk = false
    catch
        allOk = false
    test: ok, errorsCoordinates
        allOk
    allOk = false
    var count Int = 0
    try
        parse :(parse) index, byte = [1, 2, 3, 4, 5].repackTo(Bytes)
            count++
            allOk = index.inRange?(0, 5) && byte.inRange?(1, 6)
            if !allOk
                end parse
    catch
        count = 0
    test: ok, errorsCoordinates
        allOk
        count == 5

#noinline
def testBytes_BinarySerializable(write ok Int, write errorsCoordinates List)
    var bytes Bytes = Bytes()
    var position Int = 0
    test: ok, errorsCoordinates
        [].repackTo(Bytes).serialize(bytes).nothing?()
        bytes == [0, 0, 0, 0, 0, 0, 0, 0].repackTo(Bytes)
        [12].repackTo(Bytes).serialize(bytes).nothing?()
        bytes == [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12].repackTo(Bytes)
        Bytes.deserialize(bytes, position) == [].repackTo(Bytes)
        position == 8
        Bytes.deserialize(bytes, position) == [12].repackTo(Bytes)
        position == 17
        Bytes.deserialize(bytes, position) : error_outOfRange
    position = 0
    test: ok, errorsCoordinates
        Bytes.deserialize([1, 0, 0, 0, 0, 0, 0, 0].repackTo(Bytes), position) : error_outOfRange
        position == 0
        Bytes.deserialize([2, 0, 0, 0, 0, 0, 0, 0, 0].repackTo(Bytes), position) : error_outOfRange
        position == 0
        Bytes.deserialize([0, 0, 0, 0, 0, 0, 0].repackTo(Bytes), position) : error_outOfRange
        position == 0
        Bytes.deserialize([].repackTo(Bytes), position) : error_outOfRange
        position == 0
    position = -1
    test: ok, errorsCoordinates
        Bytes.deserialize([0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 32, 0, 0, 0].repackTo(Bytes), position) : error_outOfRange
    position = -9223372036854775808
    test: ok, errorsCoordinates
        Bytes.deserialize([0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 32, 0, 0, 0].repackTo(Bytes), position) : error_outOfRange
    position = 9223372036854775807
    test: ok, errorsCoordinates
        Bytes.deserialize([0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 32, 0, 0, 0].repackTo(Bytes), position) : error_outOfRange

#noinline
def testBytes_Swap(write ok Int, write errorsCoordinates List)
    var a1 Bytes = Bytes()
    var a2 Bytes = [1].repackTo(Bytes)
    var a3 Bytes = [1, 2].repackTo(Bytes)
    var a4 Bytes = [1, 2, 3].repackTo(Bytes)
    var a5 Bytes = [1, 2, 3, 4, 5].repackTo(Bytes)
    test: ok, errorsCoordinates
        a1.swap(0, 0) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a1.swap(-1, 0) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a1.swap(-1, -1) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a1.swap(0, -1) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a1.swap(9223372036854775807, 0) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a1.swap(0, 9223372036854775807) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a1.swap(0, 1) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a1.swap(1, 1) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a1.swap(1, 0) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a1.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a2.swap(0, 0).nothing?()
        a2 == [1].repackTo(Bytes)
        a2.swap(1, 1) : error_outOfRange
        a2 == [1].repackTo(Bytes)
        a2.swap(-1, 0) : error_outOfRange
        a2 == [1].repackTo(Bytes)
        a2.swap(-1, -1) : error_outOfRange
        a2 == [1].repackTo(Bytes)
        a2.swap(0, -1) : error_outOfRange
        a2 == [1].repackTo(Bytes)
        a2.swap(9223372036854775807, 0) : error_outOfRange
        a2 == [1].repackTo(Bytes)
        a2.swap(0, 9223372036854775807) : error_outOfRange
        a2 == [1].repackTo(Bytes)
        a2.swap(0, 1) : error_outOfRange
        a2 == [1].repackTo(Bytes)
        a2.swap(1, 0) : error_outOfRange
        a2 == [1].repackTo(Bytes)
        a2.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a2 == [1].repackTo(Bytes)
        a3.swap(0, 0).nothing?()
        a3 == [1, 2].repackTo(Bytes)
        a3.swap(1, 1).nothing?()
        a3 == [1, 2].repackTo(Bytes)
        a3.swap(0, 1).nothing?()
        a3 == [2, 1].repackTo(Bytes)
        a3.swap(1, 0).nothing?()
        a3 == [1, 2].repackTo(Bytes)
        a3.swap(2, 2) : error_outOfRange
        a3 == [1, 2].repackTo(Bytes)
        a3.swap(-1, 0) : error_outOfRange
        a3 == [1, 2].repackTo(Bytes)
        a3.swap(-1, -1) : error_outOfRange
        a3 == [1, 2].repackTo(Bytes)
        a3.swap(0, -1) : error_outOfRange
        a3 == [1, 2].repackTo(Bytes)
        a3.swap(9223372036854775807, 0) : error_outOfRange
        a3 == [1, 2].repackTo(Bytes)
        a3.swap(0, 9223372036854775807) : error_outOfRange
        a3 == [1, 2].repackTo(Bytes)
        a3.swap(0, 2) : error_outOfRange
        a3 == [1, 2].repackTo(Bytes)
        a3.swap(2, 0) : error_outOfRange
        a3 == [1, 2].repackTo(Bytes)
        a3.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a3 == [1, 2].repackTo(Bytes)
        a4.swap(0, 0).nothing?()
        a4 == [1, 2, 3].repackTo(Bytes)
        a4.swap(1, 1).nothing?()
        a4 == [1, 2, 3].repackTo(Bytes)
        a4.swap(2, 2).nothing?()
        a4 == [1, 2, 3].repackTo(Bytes)
        a4.swap(0, 1).nothing?()
        a4 == [2, 1, 3].repackTo(Bytes)
        a4.swap(1, 0).nothing?()
        a4 == [1, 2, 3].repackTo(Bytes)
        a4.swap(1, 2).nothing?()
        a4 == [1, 3, 2].repackTo(Bytes)
        a4.swap(0, 2).nothing?()
        a4 == [2, 3, 1].repackTo(Bytes)
        a4.swap(2, 0).nothing?()
        a4 == [1, 3, 2].repackTo(Bytes)
        a4.swap(3, 3) : error_outOfRange
        a4 == [1, 3, 2].repackTo(Bytes)
        a4.swap(-1, 0) : error_outOfRange
        a4 == [1, 3, 2].repackTo(Bytes)
        a4.swap(-1, -1) : error_outOfRange
        a4 == [1, 3, 2].repackTo(Bytes)
        a4.swap(0, -1) : error_outOfRange
        a4 == [1, 3, 2].repackTo(Bytes)
        a4.swap(9223372036854775807, 0) : error_outOfRange
        a4 == [1, 3, 2].repackTo(Bytes)
        a4.swap(0, 9223372036854775807) : error_outOfRange
        a4 == [1, 3, 2].repackTo(Bytes)
        a4.swap(0, 3) : error_outOfRange
        a4 == [1, 3, 2].repackTo(Bytes)
        a4.swap(3, 0) : error_outOfRange
        a4 == [1, 3, 2].repackTo(Bytes)
        a4.swap(3, 1) : error_outOfRange
        a4 == [1, 3, 2].repackTo(Bytes)
        a4.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a4 == [1, 3, 2].repackTo(Bytes)
        a5.swap(0, 0).nothing?()
        a5 == [1, 2, 3, 4, 5].repackTo(Bytes)
        a5.swap(1, 1).nothing?()
        a5 == [1, 2, 3, 4, 5].repackTo(Bytes)
        a5.swap(2, 2).nothing?()
        a5 == [1, 2, 3, 4, 5].repackTo(Bytes)
        a5.swap(3, 3).nothing?()
        a5 == [1, 2, 3, 4, 5].repackTo(Bytes)
        a5.swap(4, 4).nothing?()
        a5 == [1, 2, 3, 4, 5].repackTo(Bytes)
        a5.swap(0, 1).nothing?()
        a5 == [2, 1, 3, 4, 5].repackTo(Bytes)
        a5.swap(1, 0).nothing?()
        a5 == [1, 2, 3, 4, 5].repackTo(Bytes)
        a5.swap(1, 2).nothing?()
        a5 == [1, 3, 2, 4, 5].repackTo(Bytes)
        a5.swap(0, 2).nothing?()
        a5 == [2, 3, 1, 4, 5].repackTo(Bytes)
        a5.swap(2, 0).nothing?()
        a5 == [1, 3, 2, 4, 5].repackTo(Bytes)
        a5.swap(0, 4).nothing?()
        a5 == [5, 3, 2, 4, 1].repackTo(Bytes)
        a5.swap(4, 0).nothing?()
        a5 == [1, 3, 2, 4, 5].repackTo(Bytes)
        a5.swap(5, 5) : error_outOfRange
        a5 == [1, 3, 2, 4, 5].repackTo(Bytes)
        a5.swap(-1, 0) : error_outOfRange
        a5 == [1, 3, 2, 4, 5].repackTo(Bytes)
        a5.swap(-1, -1) : error_outOfRange
        a5 == [1, 3, 2, 4, 5].repackTo(Bytes)
        a5.swap(0, -1) : error_outOfRange
        a5 == [1, 3, 2, 4, 5].repackTo(Bytes)
        a5.swap(9223372036854775807, 0) : error_outOfRange
        a5 == [1, 3, 2, 4, 5].repackTo(Bytes)
        a5.swap(0, 9223372036854775807) : error_outOfRange
        a5 == [1, 3, 2, 4, 5].repackTo(Bytes)
        a5.swap(0, 5) : error_outOfRange
        a5 == [1, 3, 2, 4, 5].repackTo(Bytes)
        a5.swap(5, 0) : error_outOfRange
        a5 == [1, 3, 2, 4, 5].repackTo(Bytes)
        a5.swap(5, 1) : error_outOfRange
        a5 == [1, 3, 2, 4, 5].repackTo(Bytes)
        a5.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a5 == [1, 3, 2, 4, 5].repackTo(Bytes)
    a1 = [1, 2, 3].repackTo(Bytes).clone()
    a2 = a1
    test: ok, errorsCoordinates
        a1.swap(0, 2).nothing?()
        a1 == [3, 2, 1].repackTo(Bytes)
        a2 == [1, 2, 3].repackTo(Bytes)
        a1.swap(0, -1) : error_outOfRange
        a1 == [3, 2, 1].repackTo(Bytes)
        a2 == [1, 2, 3].repackTo(Bytes)
        a1.swap(0, 3) : error_outOfRange
        a1 == [3, 2, 1].repackTo(Bytes)
        a2 == [1, 2, 3].repackTo(Bytes)
        a1.swap(3, 0) : error_outOfRange
        a1 == [3, 2, 1].repackTo(Bytes)
        a2 == [1, 2, 3].repackTo(Bytes)

#noinline
def testBytes_SetItem(write ok Int, write errorsCoordinates List)
    var a1 Bytes = Bytes()
    var a2 Bytes = [1].repackTo(Bytes)
    var a3 Bytes = [1, 2].repackTo(Bytes)
    var a4 Bytes = [1, 2, 3].repackTo(Bytes)
    test: ok, errorsCoordinates
        a1.setItem(0, 0) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a1.setItem(-1, 0) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a1.setItem(9223372036854775807, 0) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a1.setItem(1, 1) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a1.setItem(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a1 == [].repackTo(Bytes)
        a2.setItem(0, 0).nothing?()
        a2 == [0].repackTo(Bytes)
        a2.setItem(-1, 1) : error_outOfRange
        a2 == [0].repackTo(Bytes)
        a2.setItem(9223372036854775807, 0) : error_outOfRange
        a2 == [0].repackTo(Bytes)
        a2.setItem(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a2 == [0].repackTo(Bytes)
        a3.setItem(0, 0).nothing?()
        a3 == [0, 2].repackTo(Bytes)
        a3.setItem(1, 1).nothing?()
        a3 == [0, 1].repackTo(Bytes)
        a3.setItem(2, 2) : error_outOfRange
        a3 == [0, 1].repackTo(Bytes)
        a3.setItem(-1, 1) : error_outOfRange
        a3 == [0, 1].repackTo(Bytes)
        a3.setItem(9223372036854775807, 0) : error_outOfRange
        a3 == [0, 1].repackTo(Bytes)
        a3.setItem(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a3 == [0, 1].repackTo(Bytes)
        a4.setItem(0, 0).nothing?()
        a4 == [0, 2, 3].repackTo(Bytes)
        a4.setItem(1, 1).nothing?()
        a4 == [0, 1, 3].repackTo(Bytes)
        a4.setItem(2, 2).nothing?()
        a4 == [0, 1, 2].repackTo(Bytes)
        a4.setItem(3, 3) : error_outOfRange
        a4 == [0, 1, 2].repackTo(Bytes)
        a4.setItem(-1, -1) : error_outOfRange
        a4 == [0, 1, 2].repackTo(Bytes)
        a4.setItem(9223372036854775807, 0) : error_outOfRange
        a4 == [0, 1, 2].repackTo(Bytes)
        a4.setItem(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a4 == [0, 1, 2].repackTo(Bytes)
    a1 = [1, 2, 3].repackTo(Bytes).clone()
    a2 = a1
    test: ok, errorsCoordinates
        a1.setItem(0, 4).nothing?()
        a1 == [4, 2, 3].repackTo(Bytes)
        a2 == [1, 2, 3].repackTo(Bytes)
        a1.setItem(-1, 0) : error_outOfRange
        a1 == [4, 2, 3].repackTo(Bytes)
        a2 == [1, 2, 3].repackTo(Bytes)

#noinline
def testBytes_ContainFromAtoB?(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        ![].repackTo(Bytes).containFromAtoB?(1, 0, 0)
        ![].repackTo(Bytes).containFromAtoB?(0, 0, 0)
        ![].repackTo(Bytes).containFromAtoB?(0, 0, 1) : error_outOfRange
        ![].repackTo(Bytes).containFromAtoB?(0, 1, 0) : error_outOfRange
        ![].repackTo(Bytes).containFromAtoB?(0, -1, 0) : error_outOfRange
        ![].repackTo(Bytes).containFromAtoB?(0, 0, -1) : error_outOfRange
        ![].repackTo(Bytes).containFromAtoB?(0, 0, 9223372036854775807) : error_outOfRange
        ![].repackTo(Bytes).containFromAtoB?(0, 0, -9223372036854775808) : error_outOfRange
        ![].repackTo(Bytes).containFromAtoB?(0, -9223372036854775808, 0) : error_outOfRange
        ![].repackTo(Bytes).containFromAtoB?(0, -9223372036854775808, 9223372036854775807) : error_outOfRange
        ![0].repackTo(Bytes).containFromAtoB?(0, 0, 0)
        ![0].repackTo(Bytes).containFromAtoB?(0, 1, 1)
        ![0].repackTo(Bytes).containFromAtoB?(1, 0, 0)
        ![0].repackTo(Bytes).containFromAtoB?(1, 1, 1)
        ![0].repackTo(Bytes).containFromAtoB?(1, 0, 1)
        [0].repackTo(Bytes).containFromAtoB?(0, 0, 1)
        ![0].repackTo(Bytes).containFromAtoB?(0, 0, 2) : error_outOfRange
        ![0].repackTo(Bytes).containFromAtoB?(0, 2, 0) : error_outOfRange
        ![0].repackTo(Bytes).containFromAtoB?(0, -1, 0) : error_outOfRange
        ![0].repackTo(Bytes).containFromAtoB?(0, 0, -1) : error_outOfRange
        ![0].repackTo(Bytes).containFromAtoB?(0, 0, 9223372036854775807) : error_outOfRange
        ![0].repackTo(Bytes).containFromAtoB?(0, 0, -9223372036854775808) : error_outOfRange
        ![0].repackTo(Bytes).containFromAtoB?(0, -9223372036854775808, 0) : error_outOfRange
        ![0].repackTo(Bytes).containFromAtoB?(0, -9223372036854775808, 9223372036854775807) : error_outOfRange
        ![0, 1].repackTo(Bytes).containFromAtoB?(0, 0, 0)
        ![0, 1].repackTo(Bytes).containFromAtoB?(0, 1, 1)
        ![0, 1].repackTo(Bytes).containFromAtoB?(0, 2, 2)
        ![0, 1].repackTo(Bytes).containFromAtoB?(2, 0, 2)
        ![0, 1].repackTo(Bytes).containFromAtoB?(2, 0, 1)
        ![0, 1].repackTo(Bytes).containFromAtoB?(0, 1, 2)
        ![0, 1].repackTo(Bytes).containFromAtoB?(1, 0, 1)
        [0, 1].repackTo(Bytes).containFromAtoB?(0, 0, 2)
        [0, 1].repackTo(Bytes).containFromAtoB?(0, 0, 1)
        [0, 1].repackTo(Bytes).containFromAtoB?(1, 0, 2)
        [0, 1].repackTo(Bytes).containFromAtoB?(1, 1, 2)
        ![0, 1].repackTo(Bytes).containFromAtoB?(0, 0, 3) : error_outOfRange
        ![0, 1].repackTo(Bytes).containFromAtoB?(0, 3, 0) : error_outOfRange
        ![0, 1].repackTo(Bytes).containFromAtoB?(0, -1, 0) : error_outOfRange
        ![0, 1].repackTo(Bytes).containFromAtoB?(0, 0, -1) : error_outOfRange
        ![0, 1].repackTo(Bytes).containFromAtoB?(0, 0, 9223372036854775807) : error_outOfRange
        ![0, 1].repackTo(Bytes).containFromAtoB?(0, 0, -9223372036854775808) : error_outOfRange
        ![0, 1].repackTo(Bytes).containFromAtoB?(0, -9223372036854775808, 0) : error_outOfRange
        ![0, 1].repackTo(Bytes).containFromAtoB?(0, -9223372036854775808, 9223372036854775807) : error_outOfRange
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(1, 0, 31)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(1, 0, 1)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(1, 1, 31)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(1, 1, 2)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(31, 0, 31)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(31, 30, 31)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(31, 0, 30)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(31, 31, 31)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(15, 0, 31)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(15, 0, 15)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(15, 14, 31)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(15, 14, 15)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(15, 0, 14)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(15, 15, 31)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(15, 15, 15)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(16, 0, 31)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(16, 0, 16)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(16, 15, 31)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(16, 15, 16)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(16, 0, 15)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(16, 16, 31)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(16, 16, 16)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(32, 0, 31)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(128, 0, 31)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(255, 0, 31)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).containFromAtoB?(177, 0, 31)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(1, 0, 32)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(1, 0, 1)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(1, 1, 32)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(1, 1, 2)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(32, 0, 32)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(32, 31, 32)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(32, 0, 31)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(32, 32, 32)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(15, 0, 32)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(15, 0, 15)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(15, 14, 32)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(15, 14, 15)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(15, 0, 14)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(15, 15, 32)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(15, 15, 15)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(16, 0, 32)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(16, 0, 16)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(16, 15, 32)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(16, 15, 16)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(16, 0, 15)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(16, 16, 32)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(16, 16, 16)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(33, 0, 32)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(128, 0, 32)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(255, 0, 32)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).containFromAtoB?(177, 0, 32)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(1, 0, 33)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(1, 0, 1)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(1, 1, 33)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(1, 1, 2)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(33, 0, 33)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(33, 32, 33)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(33, 0, 32)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(33, 33, 33)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(15, 0, 33)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(15, 0, 15)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(15, 14, 33)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(15, 14, 15)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(15, 0, 14)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(15, 15, 33)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(15, 15, 15)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(16, 0, 33)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(16, 0, 16)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(16, 15, 33)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(16, 15, 16)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(16, 0, 15)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(16, 16, 33)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(16, 16, 16)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(34, 0, 33)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(128, 0, 33)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(255, 0, 33)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).containFromAtoB?(177, 0, 33)

#noinline
def testBytes_CountFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).countFromAtoB(1, 0, 0) == 0
        [].repackTo(Bytes).countFromAtoB(0, 0, 0) == 0
        [].repackTo(Bytes).countFromAtoB(0, 0, 1) : error_outOfRange
        [].repackTo(Bytes).countFromAtoB(0, 1, 0) : error_outOfRange
        [].repackTo(Bytes).countFromAtoB(0, -1, 0) : error_outOfRange
        [].repackTo(Bytes).countFromAtoB(0, 0, -1) : error_outOfRange
        [].repackTo(Bytes).countFromAtoB(0, 0, 9223372036854775807) : error_outOfRange
        [].repackTo(Bytes).countFromAtoB(0, 0, -9223372036854775808) : error_outOfRange
        [].repackTo(Bytes).countFromAtoB(0, -9223372036854775808, 0) : error_outOfRange
        [].repackTo(Bytes).countFromAtoB(0, -9223372036854775808, 9223372036854775807) : error_outOfRange
        [0].repackTo(Bytes).countFromAtoB(0, 0, 0) == 0
        [0].repackTo(Bytes).countFromAtoB(0, 1, 1) == 0
        [0].repackTo(Bytes).countFromAtoB(1, 0, 0) == 0
        [0].repackTo(Bytes).countFromAtoB(1, 1, 1) == 0
        [0].repackTo(Bytes).countFromAtoB(1, 0, 1) == 0
        [0].repackTo(Bytes).countFromAtoB(0, 0, 1) == 1
        [0].repackTo(Bytes).countFromAtoB(0, 0, 2) : error_outOfRange
        [0].repackTo(Bytes).countFromAtoB(0, 2, 0) : error_outOfRange
        [0].repackTo(Bytes).countFromAtoB(0, -1, 0) : error_outOfRange
        [0].repackTo(Bytes).countFromAtoB(0, 0, -1) : error_outOfRange
        [0].repackTo(Bytes).countFromAtoB(0, 0, 9223372036854775807) : error_outOfRange
        [0].repackTo(Bytes).countFromAtoB(0, 0, -9223372036854775808) : error_outOfRange
        [0].repackTo(Bytes).countFromAtoB(0, -9223372036854775808, 0) : error_outOfRange
        [0].repackTo(Bytes).countFromAtoB(0, -9223372036854775808, 9223372036854775807) : error_outOfRange
        [0, 1].repackTo(Bytes).countFromAtoB(0, 0, 0) == 0
        [0, 1].repackTo(Bytes).countFromAtoB(0, 1, 1) == 0
        [0, 1].repackTo(Bytes).countFromAtoB(0, 2, 2) == 0
        [0, 1].repackTo(Bytes).countFromAtoB(2, 0, 2) == 0
        [0, 1].repackTo(Bytes).countFromAtoB(2, 0, 1) == 0
        [0, 1].repackTo(Bytes).countFromAtoB(0, 1, 2) == 0
        [0, 1].repackTo(Bytes).countFromAtoB(1, 0, 1) == 0
        [0, 1].repackTo(Bytes).countFromAtoB(0, 0, 2) == 1
        [0, 1].repackTo(Bytes).countFromAtoB(0, 0, 1) == 1
        [0, 1].repackTo(Bytes).countFromAtoB(1, 0, 2) == 1
        [0, 1].repackTo(Bytes).countFromAtoB(1, 1, 2) == 1
        [0, 0].repackTo(Bytes).countFromAtoB(0, 0, 2) == 2
        [0, 0].repackTo(Bytes).countFromAtoB(0, 0, 1) == 1
        [0, 0].repackTo(Bytes).countFromAtoB(0, 1, 2) == 1
        [0, 1].repackTo(Bytes).countFromAtoB(0, 0, 3) : error_outOfRange
        [0, 0].repackTo(Bytes).countFromAtoB(0, 0, 3) : error_outOfRange
        [0, 1].repackTo(Bytes).countFromAtoB(0, 3, 0) : error_outOfRange
        [0, 1].repackTo(Bytes).countFromAtoB(0, -1, 0) : error_outOfRange
        [0, 1].repackTo(Bytes).countFromAtoB(0, 0, -1) : error_outOfRange
        [0, 1].repackTo(Bytes).countFromAtoB(0, 0, 9223372036854775807) : error_outOfRange
        [0, 1].repackTo(Bytes).countFromAtoB(0, 0, -9223372036854775808) : error_outOfRange
        [0, 1].repackTo(Bytes).countFromAtoB(0, -9223372036854775808, 0) : error_outOfRange
        [0, 1].repackTo(Bytes).countFromAtoB(0, -9223372036854775808, 9223372036854775807) : error_outOfRange
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(1, 0, 31) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(1, 0, 1) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(1, 1, 31) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(1, 1, 2) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(31, 0, 31) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(31, 30, 31) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(31, 0, 30) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(31, 31, 31) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(15, 0, 31) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(15, 0, 15) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(15, 14, 31) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(15, 14, 15) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(15, 0, 14) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(15, 15, 31) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(15, 15, 15) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(32, 0, 31) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(128, 0, 31) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(255, 0, 31) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31].repackTo(Bytes).countFromAtoB(177, 0, 31) == 0
        [15, 2, 3, 4, 5, 6, 7, 15, 15, 10, 11, 15, 13, 15, 15, 16, 17, 18, 19, 15, 21, 22, 23, 24, 25, 26, 27, 28, 15, 30, 15].repackTo(Bytes).countFromAtoB(15, 0, 31) == 9
        [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15].repackTo(Bytes).countFromAtoB(15, 0, 31) == 31
        [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15].repackTo(Bytes).countFromAtoB(15, 2, 30) == 28
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(1, 0, 32) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(1, 0, 1) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(1, 1, 32) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(1, 1, 2) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(32, 0, 32) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(32, 31, 32) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(32, 0, 31) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(32, 32, 32) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(15, 0, 32) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(15, 0, 15) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(15, 14, 32) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(15, 14, 15) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(15, 0, 14) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(15, 15, 32) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(15, 15, 15) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(33, 0, 32) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(128, 0, 32) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(255, 0, 32) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32].repackTo(Bytes).countFromAtoB(177, 0, 32) == 0
        [15, 2, 3, 4, 5, 6, 7, 15, 15, 10, 11, 15, 13, 15, 15, 16, 17, 18, 19, 15, 21, 22, 23, 24, 25, 26, 27, 28, 15, 30, 15, 15].repackTo(Bytes).countFromAtoB(15, 0, 32) == 10
        [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15].repackTo(Bytes).countFromAtoB(15, 0, 32) == 32
        [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15].repackTo(Bytes).countFromAtoB(15, 2, 31) == 29
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(1, 0, 33) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(1, 0, 1) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(1, 1, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(1, 1, 2) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(33, 0, 33) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(33, 32, 33) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(33, 0, 32) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(33, 33, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(15, 0, 33) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(15, 0, 15) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(15, 14, 33) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(15, 14, 15) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(15, 0, 14) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(15, 15, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(15, 15, 15) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(34, 0, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(128, 0, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(255, 0, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33].repackTo(Bytes).countFromAtoB(177, 0, 33) == 0
        [15, 2, 3, 4, 5, 6, 7, 15, 15, 10, 11, 15, 13, 15, 15, 16, 17, 18, 19, 15, 21, 22, 23, 24, 25, 26, 27, 28, 15, 30, 15, 15, 15].repackTo(Bytes).countFromAtoB(15, 0, 33) == 11
        [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15].repackTo(Bytes).countFromAtoB(15, 0, 33) == 33
        [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15].repackTo(Bytes).countFromAtoB(15, 2, 32) == 30

#noinline
def testBytes_CountPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).countPartFromAtoB([0].repackTo(Bytes), 0, 0) == 0
        [1].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 0, 1) == 1
        [1].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 0, 0) == 0
        [1].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 1, 1) == 0
        [2].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 0, 1) == 0
        [2].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 0, 0) == 0
        [2].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 1, 1) == 0
        [2].repackTo(Bytes).countPartFromAtoB([2, 1].repackTo(Bytes), 0, 1) == 0
        [2].repackTo(Bytes).countPartFromAtoB([1, 2].repackTo(Bytes), 0, 1) == 0
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 0, 1) == 1
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 0, 2) == 1
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 0, 6) == 1
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([4].repackTo(Bytes), 0, 6) == 1
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([4].repackTo(Bytes), 1, 6) == 1
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([4].repackTo(Bytes), 2, 6) == 1
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([4].repackTo(Bytes), 2, 5) == 0
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([4].repackTo(Bytes), 0, 5) == 0
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2].repackTo(Bytes), 0, 5) == 2
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([1, 2].repackTo(Bytes), 0, 6) == 1
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([1, 2].repackTo(Bytes), 1, 6) == 0
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2, 3].repackTo(Bytes), 0, 6) == 1
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2, 3].repackTo(Bytes), 0, 5) == 1
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2, 3].repackTo(Bytes), 1, 5) == 1
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2, 3].repackTo(Bytes), 3, 5) == 1
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2, 3].repackTo(Bytes), 3, 4) == 0
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2, 3].repackTo(Bytes), 4, 6) == 0
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2, 3, 4].repackTo(Bytes), 0, 6) == 1
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2, 3, 4].repackTo(Bytes), 3, 6) == 1
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2, 3, 4].repackTo(Bytes), 0, 5) == 0
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2, 3, 4].repackTo(Bytes), 4, 6) == 0
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2, 2].repackTo(Bytes), 0, 6) == 0
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2].repackTo(Bytes), -1, 2) : error_outOfRange
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2].repackTo(Bytes), 2, 1) : error_outOfRange
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).countPartFromAtoB([2].repackTo(Bytes), -10, -1) : error_outOfRange
        [].repackTo(Bytes).countPartFromAtoB([].repackTo(Bytes), 0, 0) : error_nothingToLook
        [1, 2].repackTo(Bytes).countPartFromAtoB([].repackTo(Bytes), 0, 0) : error_nothingToLook
        [1, 2, 3, 4, 1, 2, 128].repackTo(Bytes).countPartFromAtoB([1, 2].repackTo(Bytes), 0, 3) == 1
        [1, 2, 3, 4, 1, 2, 128].repackTo(Bytes).countPartFromAtoB([1, 2].repackTo(Bytes), 0, 6) == 2
        [2, 2, 2, 2, 2, 2, 128].repackTo(Bytes).countPartFromAtoB([2, 2, 2].repackTo(Bytes), 0, 7) == 2
        [2, 2, 2, 2, 2, 2, 128].repackTo(Bytes).countPartFromAtoB([2, 2, 2].repackTo(Bytes), 0, 6) == 2
        [2, 2, 2, 2, 2, 2, 128].repackTo(Bytes).countPartFromAtoB([2, 2, 2].repackTo(Bytes), 0, 5) == 1
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).countPartFromAtoB([2, 2, 2].repackTo(Bytes), 0, 8) == 2
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).countPartFromAtoB([2, 2, 2].repackTo(Bytes), 0, 7) == 2
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).countPartFromAtoB([2, 2, 2].repackTo(Bytes), 0, 6) == 2
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).countPartFromAtoB([2, 2, 2].repackTo(Bytes), 0, 5) == 1
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).countPartFromAtoB([2, 2, 2].repackTo(Bytes), 1, 7) == 2
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).countPartFromAtoB([1, 2, 3].repackTo(Bytes), 0, 31) == 3
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).countPartFromAtoB([1, 2, 3].repackTo(Bytes), 1, 31) == 2
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 0, 31) == 4
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).countPartFromAtoB([1, 2, 3].repackTo(Bytes), 1, 30) == 2
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).countPartFromAtoB([1, 2, 3].repackTo(Bytes), 0, 32) == 3
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).countPartFromAtoB([1, 2, 3].repackTo(Bytes), 1, 32) == 2
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 0, 32) == 4
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 1, 31) == 3
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).countPartFromAtoB([1, 2, 3].repackTo(Bytes), 0, 33) == 4
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).countPartFromAtoB([1, 2, 3].repackTo(Bytes), 1, 33) == 3
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 0, 33) == 4
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).countPartFromAtoB([1].repackTo(Bytes), 1, 32) == 3
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).countPartFromAtoB([1, 1].repackTo(Bytes), 0, 31) == 15
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).countPartFromAtoB([1, 1].repackTo(Bytes), 1, 31) == 15
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).countPartFromAtoB([1, 1].repackTo(Bytes), 0, 30) == 15
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).countPartFromAtoB([1, 1].repackTo(Bytes), 1, 30) == 14
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).countPartFromAtoB([1, 1].repackTo(Bytes), 0, 32) == 16
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).countPartFromAtoB([1, 1].repackTo(Bytes), 1, 32) == 15
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).countPartFromAtoB([1, 1].repackTo(Bytes), 0, 31) == 15
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).countPartFromAtoB([1, 1].repackTo(Bytes), 1, 31) == 15
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).countPartFromAtoB([1, 1].repackTo(Bytes), 0, 33) == 16
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).countPartFromAtoB([1, 1].repackTo(Bytes), 1, 33) == 16
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).countPartFromAtoB([1, 1].repackTo(Bytes), 0, 32) == 16
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).countPartFromAtoB([1, 1].repackTo(Bytes), 1, 32) == 15

#noinline
def testBytes_PartsEqual?(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).partsEqual?(0, [].repackTo(Bytes), 0, 0)
        ![].repackTo(Bytes).partsEqual?(1, [].repackTo(Bytes), 0, 0)
        ![].repackTo(Bytes).partsEqual?(-1, [].repackTo(Bytes), 0, 0)
        ![].repackTo(Bytes).partsEqual?(9223372036854775807, [].repackTo(Bytes), 0, 0)
        ![].repackTo(Bytes).partsEqual?(-9223372036854775808, [].repackTo(Bytes), 0, 0)
        ![].repackTo(Bytes).partsEqual?(0, [].repackTo(Bytes), 1, 0)
        ![].repackTo(Bytes).partsEqual?(0, [].repackTo(Bytes), -1, 0)
        ![].repackTo(Bytes).partsEqual?(0, [].repackTo(Bytes), 9223372036854775807, 0)
        ![].repackTo(Bytes).partsEqual?(0, [].repackTo(Bytes), -9223372036854775808, 0)
        ![].repackTo(Bytes).partsEqual?(0, [].repackTo(Bytes), 0, 1)
        ![].repackTo(Bytes).partsEqual?(0, [].repackTo(Bytes), 0, -1)
        ![].repackTo(Bytes).partsEqual?(0, [].repackTo(Bytes), 0, -9223372036854775808)
        ![].repackTo(Bytes).partsEqual?(0, [].repackTo(Bytes), 0, 9223372036854775807)
        ![].repackTo(Bytes).partsEqual?(-1, [].repackTo(Bytes), -1, -1)
        [1].repackTo(Bytes).partsEqual?(0, [1].repackTo(Bytes), 0, 1)
        [1].repackTo(Bytes).partsEqual?(1, [1].repackTo(Bytes), 1, 0)
        [1].repackTo(Bytes).partsEqual?(0, [0, 1].repackTo(Bytes), 1, 1)
        [1].repackTo(Bytes).partsEqual?(1, [1].repackTo(Bytes), 0, 0)
        [1].repackTo(Bytes).partsEqual?(1, [2].repackTo(Bytes), 0, 0)
        ![1].repackTo(Bytes).partsEqual?(0, [0, 1].repackTo(Bytes), 0, 1)
        ![1].repackTo(Bytes).partsEqual?(0, [2].repackTo(Bytes), 0, 1)
        ![1].repackTo(Bytes).partsEqual?(0, [1].repackTo(Bytes), 0, 2)
        ![1].repackTo(Bytes).partsEqual?(-1, [1].repackTo(Bytes), 0, 0)
        ![1].repackTo(Bytes).partsEqual?(-9223372036854775808, [1].repackTo(Bytes), 0, 0)
        ![1].repackTo(Bytes).partsEqual?(9223372036854775807, [1].repackTo(Bytes), 0, 0)
        [1, 2, 3, 4, 5, 6].repackTo(Bytes).partsEqual?(0, [1, 2, 3, 4, 5, 6].repackTo(Bytes), 0, 6)
        [1, 2, 3, 4, 5, 6].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6].repackTo(Bytes), 1, 5)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).partsEqual?(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes), 0, 31)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes), 1, 30)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes), 1, 13)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes), 1, 0)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes), 0, 13)
        ![0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).partsEqual?(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes), 0, 31)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0].repackTo(Bytes).partsEqual?(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes), 0, 31)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes), 1, 30)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).partsEqual?(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes), 0, 32)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes), 1, 31)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes), 1, 13)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes), 1, 0)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes), 0, 13)
        ![0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).partsEqual?(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes), 0, 32)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 0].repackTo(Bytes).partsEqual?(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes), 0, 32)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 0].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes), 1, 31)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).partsEqual?(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes), 0, 33)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes), 1, 32)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes), 1, 13)
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes), 1, 0)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes), 0, 13)
        ![0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 3, 3].repackTo(Bytes).partsEqual?(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes), 0, 33)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 0].repackTo(Bytes).partsEqual?(0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes), 0, 33)
        ![1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 0].repackTo(Bytes).partsEqual?(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes), 1, 32)

#noinline
def testBytes_LookNFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).lookNFromAtoB(10, 1, 0, 0).nothing?()
        [].repackTo(Bytes).lookNFromAtoB(10, 2, 0, 0).nothing?()
        [].repackTo(Bytes).lookNFromAtoB(10, 9223372036854775807, 0, 0).nothing?()
        [].repackTo(Bytes).lookNFromAtoB(10, -1, 1, 0) : error_outOfRange
        [].repackTo(Bytes).lookNFromAtoB(10, -9223372036854775808, 1, 0) : error_outOfRange
        [].repackTo(Bytes).lookNFromAtoB(10, 1, 1, 0) : error_outOfRange
        [].repackTo(Bytes).lookNFromAtoB(10, 1, 0, 1) : error_outOfRange
        [10].repackTo(Bytes).lookNFromAtoB(10, 1, 0, 1) == 0
        [10].repackTo(Bytes).lookNFromAtoB(10, 2, 0, 1).nothing?()
        [10].repackTo(Bytes).lookNFromAtoB(10, 1, 0, 0).nothing?()
        [10].repackTo(Bytes).lookNFromAtoB(10, 1, 1, 1).nothing?()
        [10].repackTo(Bytes).lookNFromAtoB(97, 1, 0, 1).nothing?()
        [10].repackTo(Bytes).lookNFromAtoB(10, 1, 1, 0) : error_outOfRange
        [10].repackTo(Bytes).lookNFromAtoB(10, 0, 0, 0) : error_outOfRange
        [10].repackTo(Bytes).lookNFromAtoB(10, -1, 0, 0) : error_outOfRange
        [10].repackTo(Bytes).lookNFromAtoB(10, -9223372036854775808, 0, 0) : error_outOfRange
        [10].repackTo(Bytes).lookNFromAtoB(97, 1, -1, 0) : error_outOfRange
        [10].repackTo(Bytes).lookNFromAtoB(97, 1, 0, -1) : error_outOfRange
        [10].repackTo(Bytes).lookNFromAtoB(10, 1, 0, 2) : error_outOfRange
        [10].repackTo(Bytes).lookNFromAtoB(10, 1, 2, 0) : error_outOfRange
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, 1, 0, 1) == 0
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, 2, 0, 1).nothing?()
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, 1, 0, 2) == 0
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, 2, 0, 2).nothing?()
        [10, -2].repackTo(Bytes).lookNFromAtoB(-2, 1, 0, 2) == 1
        [10, -2].repackTo(Bytes).lookNFromAtoB(-2, 2, 0, 2).nothing?()
        [10, -2].repackTo(Bytes).lookNFromAtoB(-2, 1, 1, 2) == 1
        [10, -2].repackTo(Bytes).lookNFromAtoB(-2, 2, 1, 2).nothing?()
        [-2, -2].repackTo(Bytes).lookNFromAtoB(-2, 1, 0, 2) == 0
        [-2, -2].repackTo(Bytes).lookNFromAtoB(-2, 2, 0, 2) == 1
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, 1, 0, 0).nothing?()
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, 2, 0, 0).nothing?()
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, 0, 0, 0) : error_outOfRange
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, -1, 0, 0) : error_outOfRange
        [10, -2].repackTo(Bytes).lookNFromAtoB(-2, 1, 0, 0).nothing?()
        [10, 10].repackTo(Bytes).lookNFromAtoB(10, 1, 0, 1) == 0
        [10, 10].repackTo(Bytes).lookNFromAtoB(10, 2, 0, 1).nothing?()
        [10, 10].repackTo(Bytes).lookNFromAtoB(10, 1, 1, 2) == 1
        [10, 10].repackTo(Bytes).lookNFromAtoB(10, 2, 1, 2).nothing?()
        [10, 10].repackTo(Bytes).lookNFromAtoB(10, 1, 0, 2) == 0
        [10, 10].repackTo(Bytes).lookNFromAtoB(10, 2, 0, 2) == 1
        [10, 10].repackTo(Bytes).lookNFromAtoB(10, 1, 0, 0).nothing?()
        [10, 10].repackTo(Bytes).lookNFromAtoB(10, 1, 2, 2).nothing?()
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, 1, 1, 2).nothing?()
        [10, -2].repackTo(Bytes).lookNFromAtoB(-2, 1, 1, 2) == 1
        [10, -2].repackTo(Bytes).lookNFromAtoB(-2, 1, 1, 1).nothing?()
        [10, -2].repackTo(Bytes).lookNFromAtoB(97, 1, 0, 2).nothing?()
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, 1, 1, 0) : error_outOfRange
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, 1, 3, 0) : error_outOfRange
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, 2, 3, 0) : error_outOfRange
        [10, -2].repackTo(Bytes).lookNFromAtoB(97, 1, -1, 0) : error_outOfRange
        [10, -2].repackTo(Bytes).lookNFromAtoB(97, 1, 0, -1) : error_outOfRange
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, 1, 0, 3) : error_outOfRange
        [10, -2].repackTo(Bytes).lookNFromAtoB(10, 1, 3, 0) : error_outOfRange
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNFromAtoB(1, 1, 0, 8) == 0
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNFromAtoB(1, 2, 0, 8) == 1
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNFromAtoB(1, 7, 0, 8) == 6
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNFromAtoB(1, 8, 0, 8) == 7
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNFromAtoB(1, 2, 1, 8) == 2
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNFromAtoB(1, 3, 1, 7) == 3
        [1, 1, 1, 1, 0, 1, 1, 1].repackTo(Bytes).lookNFromAtoB(1, 4, 1, 7) == 5
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(1, 1, 0, 31) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(1, 2, 0, 31) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(1, 3, 0, 31) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(1, 4, 0, 31) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(1, 5, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(1, 1, 0, 11) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(1, 2, 0, 11) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(1, 3, 0, 11).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(2, 1, 0, 31) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(2, 2, 0, 31) == 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(2, 3, 0, 31) == 21
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(2, 4, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(2, 5, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(97, 1, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNFromAtoB(97, 2, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(1, 1, 0, 32) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(1, 2, 0, 32) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(1, 3, 0, 32) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(1, 4, 0, 32) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(1, 5, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(1, 1, 0, 11) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(1, 2, 0, 11) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(1, 3, 0, 11).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(2, 1, 0, 32) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(2, 2, 0, 32) == 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(2, 3, 0, 32) == 21
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(2, 4, 0, 32) == 31
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(2, 5, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(97, 1, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNFromAtoB(97, 2, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(1, 1, 0, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(1, 2, 0, 33) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(1, 3, 0, 33) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(1, 4, 0, 33) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(1, 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(1, 1, 0, 11) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(1, 2, 0, 11) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(1, 3, 0, 11).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(2, 1, 0, 33) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(2, 2, 0, 33) == 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(2, 3, 0, 33) == 21
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(2, 4, 0, 33) == 31
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(2, 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(3, 1, 0, 33) == 2
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(3, 2, 0, 33) == 12
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(3, 3, 0, 33) == 22
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(3, 4, 0, 33) == 32
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(3, 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(97, 1, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNFromAtoB(97, 2, 0, 33).nothing?()

#noinline
def testBytes_LookNPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).lookNPartFromAtoB([0].repackTo(Bytes), 1, 0, 0).nothing?()
        [].repackTo(Bytes).lookNPartFromAtoB([0].repackTo(Bytes), 2, 0, 0).nothing?()
        [].repackTo(Bytes).lookNPartFromAtoB([0].repackTo(Bytes), 9223372036854775807, 0, 0).nothing?()
        [].repackTo(Bytes).lookNPartFromAtoB([0].repackTo(Bytes), 0, 0, 0) : error_outOfRange
        [].repackTo(Bytes).lookNPartFromAtoB([0].repackTo(Bytes), -1, 0, 0) : error_outOfRange
        [].repackTo(Bytes).lookNPartFromAtoB([0].repackTo(Bytes), -9223372036854775808, 0, 0) : error_outOfRange
        [1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 0, 1) == 0
        [1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 9223372036854775807, 0, 1).nothing?()
        [1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 0, 0, 1) : error_outOfRange
        [1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), -1, 0, 1) : error_outOfRange
        [1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), -9223372036854775808, 0, 1) : error_outOfRange
        [1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 1, 0) : error_outOfRange
        [1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 0, 0).nothing?()
        [1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 0, 0).nothing?()
        [1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 1, 1).nothing?()
        [1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 1, 1).nothing?()
        [2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 0, 1).nothing?()
        [2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 0, 1).nothing?()
        [2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 0, 0).nothing?()
        [2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 0, 0).nothing?()
        [2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 1, 1).nothing?()
        [2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 1, 1).nothing?()
        [2].repackTo(Bytes).lookNPartFromAtoB([2, 1].repackTo(Bytes), 1, 0, 1).nothing?()
        [2].repackTo(Bytes).lookNPartFromAtoB([2, 1].repackTo(Bytes), 2, 0, 1).nothing?()
        [2].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 1).nothing?()
        [2].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 1).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 0, 1) == 0
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 0, 0, 1) : error_outOfRange
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), -1, 0, 1) : error_outOfRange
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), -9223372036854775808, 0, 1) : error_outOfRange
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 0, 1).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 0, 2) == 0
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 0, 2).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 0, 6) == 0
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([4].repackTo(Bytes), 1, 0, 6) == 5
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([4].repackTo(Bytes), 2, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([4].repackTo(Bytes), 1, 1, 6) == 5
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([4].repackTo(Bytes), 2, 1, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([4].repackTo(Bytes), 1, 2, 6) == 5
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([4].repackTo(Bytes), 2, 2, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([4].repackTo(Bytes), 1, 2, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([4].repackTo(Bytes), 2, 2, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([4].repackTo(Bytes), 1, 0, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([4].repackTo(Bytes), 2, 0, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2].repackTo(Bytes), 1, 0, 5) == 1
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2].repackTo(Bytes), 2, 0, 5) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2].repackTo(Bytes), 1, 2, 5) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2].repackTo(Bytes), 2, 2, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2].repackTo(Bytes), 3, 0, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 6) == 0
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 1, 1, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 2, 1, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 1, 0, 6) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 2, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 1, 0, 5) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 2, 0, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 1, 1, 5) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 2, 1, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 1, 3, 5) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 2, 3, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 1, 3, 4).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 2, 3, 4).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 1, 4, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 2, 4, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3, 4].repackTo(Bytes), 1, 0, 6) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3, 4].repackTo(Bytes), 2, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3, 4].repackTo(Bytes), 1, 3, 6) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3, 4].repackTo(Bytes), 2, 3, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3, 4].repackTo(Bytes), 1, 0, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3, 4].repackTo(Bytes), 2, 0, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3, 4].repackTo(Bytes), 1, 4, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 3, 4].repackTo(Bytes), 2, 4, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 2].repackTo(Bytes), 1, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2, 2].repackTo(Bytes), 2, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2].repackTo(Bytes), 1, -1, 2) : error_outOfRange
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2].repackTo(Bytes), 1, 2, 1) : error_outOfRange
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookNPartFromAtoB([2].repackTo(Bytes), 1, -10, -1) : error_outOfRange
        [].repackTo(Bytes).lookNPartFromAtoB([].repackTo(Bytes), 1, 0, 0) : error_nothingToLook
        [1, 2].repackTo(Bytes).lookNPartFromAtoB([].repackTo(Bytes), 1, 0, 0) : error_nothingToLook
        [1, 2, 3, 4, 1, 2, 255].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 3) == 0
        [1, 2, 3, 4, 1, 2, 255].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 3).nothing?()
        [1, 2, 3, 4, 1, 2, 255].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 6) == 0
        [1, 2, 3, 4, 1, 2, 255].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 6) == 4
        [1, 2, 3, 4, 1, 2, 255].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 3, 0, 6).nothing?()
        [2, 2, 2, 2, 2, 2, 255].repackTo(Bytes).lookNPartFromAtoB([2, 2, 2].repackTo(Bytes), 1, 0, 7) == 0
        [2, 2, 2, 2, 2, 2, 255].repackTo(Bytes).lookNPartFromAtoB([2, 2, 2].repackTo(Bytes), 2, 0, 7) == 3
        [2, 2, 2, 2, 2, 2, 255].repackTo(Bytes).lookNPartFromAtoB([2, 2, 2].repackTo(Bytes), 3, 0, 7).nothing?()
        [2, 2, 2, 2, 2, 2, 255].repackTo(Bytes).lookNPartFromAtoB([2, 2, 2].repackTo(Bytes), 1, 1, 6) == 1
        [2, 2, 2, 2, 2, 2, 255].repackTo(Bytes).lookNPartFromAtoB([2, 2, 2].repackTo(Bytes), 2, 1, 6).nothing?()
        [2, 2, 2, 2, 2, 2, 255].repackTo(Bytes).lookNPartFromAtoB([2, 2, 2].repackTo(Bytes), 1, 2, 5) == 2
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookNPartFromAtoB([2, 2, 2].repackTo(Bytes), 1, 0, 8) == 0
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookNPartFromAtoB([2, 2, 2].repackTo(Bytes), 2, 0, 8) == 3
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookNPartFromAtoB([2, 2, 2].repackTo(Bytes), 3, 0, 8).nothing?()
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookNPartFromAtoB([2, 2, 2].repackTo(Bytes), 1, 1, 7) == 1
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookNPartFromAtoB([2, 2, 2].repackTo(Bytes), 2, 1, 7) == 4
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookNPartFromAtoB([2, 2, 2].repackTo(Bytes), 3, 1, 7).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 0, 31) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 0, 31) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 3, 0, 31) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 4, 0, 31) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 5, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 1, 30) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 1, 30) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 3, 1, 30).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 31) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 31) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 3, 0, 31) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 4, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 0, 15) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 0, 15) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 3, 0, 15).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 0, 32) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 0, 32) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 3, 0, 32) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 4, 0, 32) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 5, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([2].repackTo(Bytes), 1, 0, 32) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([2].repackTo(Bytes), 2, 0, 32) == 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([2].repackTo(Bytes), 3, 0, 32) == 21
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([2].repackTo(Bytes), 4, 0, 32) == 31
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([2].repackTo(Bytes), 5, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 1, 30) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 1, 30) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 3, 1, 30).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 32) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 32) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 3, 0, 32) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 4, 0, 32) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 5, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 0, 15) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 0, 15) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 3, 0, 15).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 0, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 0, 33) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 3, 0, 33) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 4, 0, 33) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([3].repackTo(Bytes), 1, 0, 33) == 2
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([3].repackTo(Bytes), 2, 0, 33) == 12
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([3].repackTo(Bytes), 3, 0, 33) == 22
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([3].repackTo(Bytes), 4, 0, 33) == 32
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([3].repackTo(Bytes), 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 1, 30) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 1, 30) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 3, 1, 30).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 33) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 3, 0, 33) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 4, 0, 33) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1, 2].repackTo(Bytes), 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1, 2, 3].repackTo(Bytes), 1, 0, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1, 2, 3].repackTo(Bytes), 2, 0, 33) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1, 2, 3].repackTo(Bytes), 3, 0, 33) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1, 2, 3].repackTo(Bytes), 4, 0, 33) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1, 2, 3].repackTo(Bytes), 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 1, 0, 33) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 2, 0, 33) == 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 3, 0, 33) == 21
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 4, 0, 33) == 31
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([2, 3].repackTo(Bytes), 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 1, 0, 15) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 2, 0, 15) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookNPartFromAtoB([1].repackTo(Bytes), 3, 0, 15).nothing?()
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 1, 0, 31) == 0
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 2, 0, 31) == 2
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 15, 0, 31) == 28
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 16, 0, 31).nothing?()
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 1, 1, 30) == 1
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 2, 1, 30) == 3
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 14, 1, 30) == 27
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 15, 1, 30).nothing?()
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 1, 0, 32) == 0
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 2, 0, 32) == 2
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 16, 0, 32) == 30
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 17, 0, 32).nothing?()
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 1, 1, 31) == 1
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 2, 1, 31) == 3
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 15, 1, 31) == 29
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 16, 1, 31).nothing?()
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 1, 0, 33) == 0
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 2, 0, 33) == 2
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 16, 0, 33) == 30
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 17, 0, 33).nothing?()
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 1, 1, 32) == 1
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 2, 1, 32) == 3
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 15, 1, 32) == 29
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookNPartFromAtoB([1, 1].repackTo(Bytes), 16, 1, 32).nothing?()

#noinline
def testBytes_LookAllFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).lookAllFromAtoB(10, 0, 0) == []
        [].repackTo(Bytes).lookAllFromAtoB(10, 1, 0) : error_outOfRange
        [].repackTo(Bytes).lookAllFromAtoB(10, 0, 1) : error_outOfRange
        [10].repackTo(Bytes).lookAllFromAtoB(10, 0, 1) == [0]
        [10].repackTo(Bytes).lookAllFromAtoB(10, 0, 0) == []
        [10].repackTo(Bytes).lookAllFromAtoB(10, 1, 1) == []
        [10].repackTo(Bytes).lookAllFromAtoB(127, 0, 1) == []
        [10].repackTo(Bytes).lookAllFromAtoB(97, 0, 1) == []
        [10].repackTo(Bytes).lookAllFromAtoB(10, 1, 0) : error_outOfRange
        [10].repackTo(Bytes).lookAllFromAtoB(97, -1, 0) : error_outOfRange
        [10].repackTo(Bytes).lookAllFromAtoB(97, 0, -1) : error_outOfRange
        [10].repackTo(Bytes).lookAllFromAtoB(10, 0, 2) : error_outOfRange
        [10].repackTo(Bytes).lookAllFromAtoB(10, 2, 0) : error_outOfRange
        [10, -2].repackTo(Bytes).lookAllFromAtoB(10, 0, 1) == [0]
        [10, -2].repackTo(Bytes).lookAllFromAtoB(10, 0, 2) == [0]
        [10, -2].repackTo(Bytes).lookAllFromAtoB(-2, 0, 2) == [1]
        [10, -2].repackTo(Bytes).lookAllFromAtoB(-2, 1, 2) == [1]
        [-2, -2].repackTo(Bytes).lookAllFromAtoB(-2, 0, 2) == [0, 1]
        [10, -2].repackTo(Bytes).lookAllFromAtoB(10, 0, 0) == []
        [10, -2].repackTo(Bytes).lookAllFromAtoB(-2, 0, 0) == []
        [10, 10].repackTo(Bytes).lookAllFromAtoB(10, 0, 1) == [0]
        [10, 10].repackTo(Bytes).lookAllFromAtoB(10, 1, 2) == [1]
        [10, 10].repackTo(Bytes).lookAllFromAtoB(10, 0, 2) == [0, 1]
        [10, 10].repackTo(Bytes).lookAllFromAtoB(10, 0, 0) == []
        [10, 10].repackTo(Bytes).lookAllFromAtoB(10, 2, 2) == []
        [10, -2].repackTo(Bytes).lookAllFromAtoB(10, 1, 2) == []
        [10, -2].repackTo(Bytes).lookAllFromAtoB(-2, 1, 1) == []
        [10, -2].repackTo(Bytes).lookAllFromAtoB(127, 0, 2) == []
        [10, -2].repackTo(Bytes).lookAllFromAtoB(97, 0, 2) == []
        [10, -2].repackTo(Bytes).lookAllFromAtoB(10, 1, 0) : error_outOfRange
        [10, -2].repackTo(Bytes).lookAllFromAtoB(10, 3, 0) : error_outOfRange
        [10, -2].repackTo(Bytes).lookAllFromAtoB(97, -1, 0) : error_outOfRange
        [10, -2].repackTo(Bytes).lookAllFromAtoB(97, 0, -1) : error_outOfRange
        [10, -2].repackTo(Bytes).lookAllFromAtoB(10, 0, 3) : error_outOfRange
        [10, -2].repackTo(Bytes).lookAllFromAtoB(10, 3, 0) : error_outOfRange
        [10, -2, 22, 2, -2, 2, 10].repackTo(Bytes).lookAllFromAtoB(2, 0, 6) == [3, 5]
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookAllFromAtoB(1, 0, 8) == [0, 1, 2, 3, 4, 5, 6, 7]
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookAllFromAtoB(1, 1, 8) == [1, 2, 3, 4, 5, 6, 7]
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookAllFromAtoB(1, 1, 7) == [1, 2, 3, 4, 5, 6]
        [1, 1, 1, 1, 0, 1, 1, 1].repackTo(Bytes).lookAllFromAtoB(1, 1, 7) == [1, 2, 3, 5, 6]
        [10, -2, 22, 1000, -1, 3].repackTo(Bytes).lookAllFromAtoB(22, 2, 6) == [2]
        [10, -2, 22, 1000, -1, 3].repackTo(Bytes).lookAllFromAtoB(1000, 0, 6) == [3]
        [10, -2, 22, 1000, -1, 3].repackTo(Bytes).lookAllFromAtoB(-1, 0, 6) == [4]
        [10, -2, 22, 1000, -1, 3].repackTo(Bytes).lookAllFromAtoB(3, 0, 6) == [5]
        [10, -2, 22, 1000, -1, 3].repackTo(Bytes).lookAllFromAtoB(22, 3, 6) == []
        [10, -2, 22, 1000, -1, 3].repackTo(Bytes).lookAllFromAtoB(3, 0, 5) == []
        [10, -2, 22, 1000, -1, 3].repackTo(Bytes).lookAllFromAtoB(127, 0, 6) == []
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllFromAtoB(1, 0, 31) == [0, 10, 20, 30]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllFromAtoB(1, 0, 15) == [0, 10]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllFromAtoB(1, 2, 21) == [10, 20]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllFromAtoB(1, 2, 10) == []
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllFromAtoB(2, 0, 31) == [1, 11, 21]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllFromAtoB(2, 0, 15) == [1, 11]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllFromAtoB(2, 2, 21) == [11]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllFromAtoB(2, 2, 10) == []
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllFromAtoB(3, 0, 31) == [2, 12, 22]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllFromAtoB(3, 0, 15) == [2, 12]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllFromAtoB(3, 2, 21) == [2, 12]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllFromAtoB(3, 2, 10) == [2]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllFromAtoB(1, 0, 32) == [0, 10, 20, 30]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllFromAtoB(1, 0, 15) == [0, 10]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllFromAtoB(1, 2, 21) == [10, 20]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllFromAtoB(1, 2, 10) == []
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllFromAtoB(2, 0, 32) == [1, 11, 21, 31]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllFromAtoB(2, 0, 15) == [1, 11]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllFromAtoB(2, 2, 21) == [11]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllFromAtoB(2, 2, 10) == []
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllFromAtoB(3, 0, 32) == [2, 12, 22]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllFromAtoB(3, 0, 15) == [2, 12]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllFromAtoB(3, 2, 21) == [2, 12]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllFromAtoB(3, 2, 10) == [2]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllFromAtoB(1, 0, 33) == [0, 10, 20, 30]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllFromAtoB(1, 0, 15) == [0, 10]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllFromAtoB(1, 2, 21) == [10, 20]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllFromAtoB(1, 2, 10) == []
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllFromAtoB(2, 0, 33) == [1, 11, 21, 31]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllFromAtoB(2, 0, 15) == [1, 11]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllFromAtoB(2, 2, 21) == [11]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllFromAtoB(2, 2, 10) == []
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllFromAtoB(3, 0, 33) == [2, 12, 22, 32]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllFromAtoB(3, 0, 15) == [2, 12]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllFromAtoB(3, 2, 21) == [2, 12]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllFromAtoB(3, 2, 10) == [2]
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].repackTo(Bytes).lookAllFromAtoB(0, 0, 31) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].repackTo(Bytes).lookAllFromAtoB(0, 1, 30) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].repackTo(Bytes).lookAllFromAtoB(0, 0, 32) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].repackTo(Bytes).lookAllFromAtoB(0, 1, 31) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].repackTo(Bytes).lookAllFromAtoB(0, 0, 33) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].repackTo(Bytes).lookAllFromAtoB(0, 1, 32) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]

#noinline
def testBytes_LookAllPartsFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).lookAllPartsFromAtoB([0].repackTo(Bytes), 0, 0) == []
        [].repackTo(Bytes).lookAllPartsFromAtoB([10].repackTo(Bytes), 0, 0) == []
        [1].repackTo(Bytes).lookAllPartsFromAtoB([1].repackTo(Bytes), 0, 1) == [0]
        [1].repackTo(Bytes).lookAllPartsFromAtoB([1].repackTo(Bytes), 0, 0) == []
        [1].repackTo(Bytes).lookAllPartsFromAtoB([1].repackTo(Bytes), 1, 1) == []
        [2].repackTo(Bytes).lookAllPartsFromAtoB([1].repackTo(Bytes), 0, 1) == []
        [2].repackTo(Bytes).lookAllPartsFromAtoB([1].repackTo(Bytes), 0, 0) == []
        [2].repackTo(Bytes).lookAllPartsFromAtoB([1].repackTo(Bytes), 1, 1) == []
        [2].repackTo(Bytes).lookAllPartsFromAtoB([2, 1].repackTo(Bytes), 0, 1) == []
        [2].repackTo(Bytes).lookAllPartsFromAtoB([1, 2].repackTo(Bytes), 0, 1) == []
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([1].repackTo(Bytes), 0, 1) == [0]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([1].repackTo(Bytes), 0, 2) == [0]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([1].repackTo(Bytes), 0, 6) == [0]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([4].repackTo(Bytes), 0, 6) == [5]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([4].repackTo(Bytes), 1, 6) == [5]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([4].repackTo(Bytes), 2, 6) == [5]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([4].repackTo(Bytes), 2, 5) == []
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([4].repackTo(Bytes), 0, 5) == []
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2].repackTo(Bytes), 0, 5) == [1, 3]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([1, 2].repackTo(Bytes), 0, 6) == [0]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([1, 2].repackTo(Bytes), 1, 6) == []
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2, 3].repackTo(Bytes), 0, 6) == [3]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2, 3].repackTo(Bytes), 0, 5) == [3]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2, 3].repackTo(Bytes), 1, 5) == [3]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2, 3].repackTo(Bytes), 3, 5) == [3]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2, 3].repackTo(Bytes), 3, 4) == []
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2, 3].repackTo(Bytes), 4, 6) == []
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2, 3, 4].repackTo(Bytes), 0, 6) == [3]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2, 3, 4].repackTo(Bytes), 3, 6) == [3]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2, 3, 4].repackTo(Bytes), 0, 5) == []
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2, 3, 4].repackTo(Bytes), 4, 6) == []
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2, 2].repackTo(Bytes), 0, 6) == []
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2, 255].repackTo(Bytes), 0, 6) == [1]
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2].repackTo(Bytes), -1, 2) : error_outOfRange
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2].repackTo(Bytes), 2, 1) : error_outOfRange
        [1, 2, 255, 2, 3, 4].repackTo(Bytes).lookAllPartsFromAtoB([2].repackTo(Bytes), -10, -1) : error_outOfRange
        [].repackTo(Bytes).lookAllPartsFromAtoB([].repackTo(Bytes), 0, 0) : error_nothingToLook
        [1, 2].repackTo(Bytes).lookAllPartsFromAtoB([].repackTo(Bytes), 0, 0) : error_nothingToLook
        [1, 2, 3, 4, 1, 2, 128].repackTo(Bytes).lookAllPartsFromAtoB([1, 2].repackTo(Bytes), 0, 3) == [0]
        [1, 2, 3, 4, 1, 2, 128].repackTo(Bytes).lookAllPartsFromAtoB([1, 2].repackTo(Bytes), 0, 6) == [0, 4]
        [2, 2, 2, 2, 2, 2, 128].repackTo(Bytes).lookAllPartsFromAtoB([2, 2, 2].repackTo(Bytes), 0, 7) == [0, 3]
        [2, 2, 2, 2, 2, 2, 128].repackTo(Bytes).lookAllPartsFromAtoB([2, 2, 2].repackTo(Bytes), 0, 6) == [0, 3]
        [2, 2, 2, 2, 2, 2, 128].repackTo(Bytes).lookAllPartsFromAtoB([2, 2, 2].repackTo(Bytes), 0, 5) == [0]
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookAllPartsFromAtoB([2, 2, 2].repackTo(Bytes), 0, 8) == [0, 3]
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookAllPartsFromAtoB([2, 2, 2].repackTo(Bytes), 0, 7) == [0, 3]
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookAllPartsFromAtoB([2, 2, 2].repackTo(Bytes), 0, 6) == [0, 3]
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookAllPartsFromAtoB([2, 2, 2].repackTo(Bytes), 0, 5) == [0]
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookAllPartsFromAtoB([2, 2, 2].repackTo(Bytes), 1, 7) == [1, 4]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllPartsFromAtoB([1, 2].repackTo(Bytes), 0, 31) == [0, 10, 20]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllPartsFromAtoB([0, 1].repackTo(Bytes), 0, 31) == [9, 19, 29]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllPartsFromAtoB([0, 1].repackTo(Bytes), 0, 30) == [9, 19]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllPartsFromAtoB([1, 2].repackTo(Bytes), 1, 30) == [10, 20]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllPartsFromAtoB([0, 1].repackTo(Bytes), 1, 30) == [9, 19]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllPartsFromAtoB([1, 2, 3].repackTo(Bytes), 0, 31) == [0, 10, 20]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllPartsFromAtoB([0, 1, 2].repackTo(Bytes), 0, 31) == [9, 19]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllPartsFromAtoB([0, 1, 2].repackTo(Bytes), 0, 30) == [9, 19]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllPartsFromAtoB([1, 2, 3].repackTo(Bytes), 1, 30) == [10, 20]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookAllPartsFromAtoB([0, 1, 2].repackTo(Bytes), 1, 30) == [9, 19]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllPartsFromAtoB([1, 2].repackTo(Bytes), 0, 32) == [0, 10, 20, 30]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllPartsFromAtoB([0, 1].repackTo(Bytes), 0, 32) == [9, 19, 29]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllPartsFromAtoB([0, 1].repackTo(Bytes), 0, 30) == [9, 19]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllPartsFromAtoB([1, 2].repackTo(Bytes), 1, 31) == [10, 20]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllPartsFromAtoB([0, 1].repackTo(Bytes), 1, 31) == [9, 19, 29]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllPartsFromAtoB([1, 2, 3].repackTo(Bytes), 0, 32) == [0, 10, 20]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllPartsFromAtoB([0, 1, 2].repackTo(Bytes), 0, 32) == [9, 19, 29]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllPartsFromAtoB([0, 1, 2].repackTo(Bytes), 0, 30) == [9, 19]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllPartsFromAtoB([1, 2, 3].repackTo(Bytes), 1, 31) == [10, 20]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookAllPartsFromAtoB([0, 1, 2].repackTo(Bytes), 1, 31) == [9, 19]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllPartsFromAtoB([1, 2].repackTo(Bytes), 0, 33) == [0, 10, 20, 30]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllPartsFromAtoB([0, 1].repackTo(Bytes), 0, 33) == [9, 19, 29]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllPartsFromAtoB([0, 1].repackTo(Bytes), 0, 30) == [9, 19]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllPartsFromAtoB([1, 2].repackTo(Bytes), 1, 32) == [10, 20, 30]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllPartsFromAtoB([0, 1].repackTo(Bytes), 1, 32) == [9, 19, 29]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllPartsFromAtoB([1, 2, 3].repackTo(Bytes), 0, 33) == [0, 10, 20, 30]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllPartsFromAtoB([0, 1, 2].repackTo(Bytes), 0, 33) == [9, 19, 29]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllPartsFromAtoB([0, 1, 2].repackTo(Bytes), 0, 30) == [9, 19]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllPartsFromAtoB([1, 2, 3].repackTo(Bytes), 1, 32) == [10, 20]
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookAllPartsFromAtoB([0, 1, 2].repackTo(Bytes), 1, 32) == [9, 19, 29]
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookAllPartsFromAtoB([1, 1].repackTo(Bytes), 0, 31) == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookAllPartsFromAtoB([1, 1].repackTo(Bytes), 1, 30) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookAllPartsFromAtoB([1, 1].repackTo(Bytes), 0, 32) == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookAllPartsFromAtoB([1, 1].repackTo(Bytes), 1, 31) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookAllPartsFromAtoB([1, 1].repackTo(Bytes), 0, 33) == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookAllPartsFromAtoB([1, 1].repackTo(Bytes), 1, 32) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]

#noinline
def testBytes_LookBackNFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 0).nothing?()
        [].repackTo(Bytes).lookBackNFromAtoB(10, 2, 0, 0).nothing?()
        [].repackTo(Bytes).lookBackNFromAtoB(10, 9223372036854775807, 0, 0).nothing?()
        [].repackTo(Bytes).lookBackNFromAtoB(10, -1, 1, 0) : error_outOfRange
        [].repackTo(Bytes).lookBackNFromAtoB(10, -9223372036854775808, 1, 0) : error_outOfRange
        [].repackTo(Bytes).lookBackNFromAtoB(10, 1, 1, 0) : error_outOfRange
        [].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 1) : error_outOfRange
        [10].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 1) == 0
        [10].repackTo(Bytes).lookBackNFromAtoB(10, 2, 0, 1).nothing?()
        [10].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 0).nothing?()
        [10].repackTo(Bytes).lookBackNFromAtoB(10, 1, 1, 1).nothing?()
        [10].repackTo(Bytes).lookBackNFromAtoB(11, 1, 0, 1).nothing?()
        [10].repackTo(Bytes).lookBackNFromAtoB(97, 1, 0, 1).nothing?()
        [10].repackTo(Bytes).lookBackNFromAtoB(10, 1, 1, 0) : error_outOfRange
        [10].repackTo(Bytes).lookBackNFromAtoB(10, 0, 0, 0) : error_outOfRange
        [10].repackTo(Bytes).lookBackNFromAtoB(10, -1, 0, 0) : error_outOfRange
        [10].repackTo(Bytes).lookBackNFromAtoB(10, -9223372036854775808, 0, 0) : error_outOfRange
        [10].repackTo(Bytes).lookBackNFromAtoB(97, 1, -1, 0) : error_outOfRange
        [10].repackTo(Bytes).lookBackNFromAtoB(97, 1, 0, -1) : error_outOfRange
        [10].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 2) : error_outOfRange
        [10].repackTo(Bytes).lookBackNFromAtoB(10, 1, 2, 0) : error_outOfRange
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 1) == 0
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, 2, 0, 1).nothing?()
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 2) == 0
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, 2, 0, 2).nothing?()
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(2, 1, 0, 2) == 1
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(2, 2, 0, 2).nothing?()
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(2, 1, 1, 2) == 1
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(2, 2, 1, 2).nothing?()
        [2, 2].repackTo(Bytes).lookBackNFromAtoB(2, 1, 0, 2) == 1
        [2, 2].repackTo(Bytes).lookBackNFromAtoB(2, 2, 0, 2) == 0
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 0).nothing?()
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, 2, 0, 0).nothing?()
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, 0, 0, 0) : error_outOfRange
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, -1, 0, 0) : error_outOfRange
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(2, 1, 0, 0).nothing?()
        [10, 10].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 1) == 0
        [10, 10].repackTo(Bytes).lookBackNFromAtoB(10, 2, 0, 1).nothing?()
        [10, 10].repackTo(Bytes).lookBackNFromAtoB(10, 1, 1, 2) == 1
        [10, 10].repackTo(Bytes).lookBackNFromAtoB(10, 2, 1, 2).nothing?()
        [10, 10].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 2) == 1
        [10, 10].repackTo(Bytes).lookBackNFromAtoB(10, 2, 0, 2) == 0
        [10, 10].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 0).nothing?()
        [10, 10].repackTo(Bytes).lookBackNFromAtoB(10, 1, 2, 2).nothing?()
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, 1, 1, 2).nothing?()
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(2, 1, 1, 2) == 1
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(2, 1, 1, 1).nothing?()
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(11, 1, 0, 2).nothing?()
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(97, 1, 0, 2).nothing?()
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, 1, 1, 0) : error_outOfRange
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, 1, 3, 0) : error_outOfRange
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, 2, 3, 0) : error_outOfRange
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(97, 1, -1, 0) : error_outOfRange
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(97, 1, 0, -1) : error_outOfRange
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 3) : error_outOfRange
        [10, 2].repackTo(Bytes).lookBackNFromAtoB(10, 1, 3, 0) : error_outOfRange
        [10, 23, 22, 255, 1, 3].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 6) == 0
        [10, 23, 22, 255, 1, 3].repackTo(Bytes).lookBackNFromAtoB(10, 2, 0, 6).nothing?()
        [10, 23, 22, 255, 1, 3].repackTo(Bytes).lookBackNFromAtoB(3, 1, 0, 6) == 5
        [10, 23, 22, 255, 1, 3].repackTo(Bytes).lookBackNFromAtoB(3, 2, 0, 6).nothing?()
        [10, 23, 22, 2, 25, 2, 10].repackTo(Bytes).lookBackNFromAtoB(2, 1, 0, 6) == 5
        [10, 23, 22, 2, 25, 2, 10].repackTo(Bytes).lookBackNFromAtoB(2, 2, 0, 6) == 3
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNFromAtoB(1, 1, 0, 8) == 7
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNFromAtoB(1, 2, 0, 8) == 6
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNFromAtoB(1, 7, 0, 8) == 1
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNFromAtoB(1, 8, 0, 8) == 0
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNFromAtoB(1, 2, 1, 8) == 6
        [1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNFromAtoB(1, 3, 1, 7) == 4
        [1, 1, 1, 1, 0, 1, 1, 1].repackTo(Bytes).lookBackNFromAtoB(1, 4, 1, 7) == 2
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(1, 1, 0, 31) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(1, 2, 0, 31) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(1, 3, 0, 31) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(1, 4, 0, 31) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(1, 5, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(1, 1, 1, 30) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(1, 2, 1, 30) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(1, 3, 1, 30).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(2, 1, 0, 31) == 21
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(2, 2, 0, 31) == 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(2, 3, 0, 31) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(2, 4, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(2, 5, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(2, 1, 1, 30) == 21
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(2, 2, 1, 30) == 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(2, 3, 1, 30) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(3, 1, 0, 31) == 22
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(3, 2, 0, 31) == 12
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(3, 3, 0, 31) == 2
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(3, 4, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(3, 5, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(3, 1, 1, 30) == 22
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(3, 2, 1, 30) == 12
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNFromAtoB(3, 3, 1, 30) == 2
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(1, 1, 0, 32) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(1, 2, 0, 32) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(1, 3, 0, 32) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(1, 4, 0, 32) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(1, 5, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(1, 1, 1, 31) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(1, 2, 1, 31) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(1, 3, 1, 31) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(1, 4, 1, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(2, 1, 0, 32) == 31
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(2, 2, 0, 32) == 21
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(2, 3, 0, 32) == 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(2, 4, 0, 32) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(2, 5, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(2, 1, 1, 31) == 21
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(2, 2, 1, 31) == 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(2, 3, 1, 31) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(3, 1, 0, 32) == 22
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(3, 2, 0, 32) == 12
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(3, 3, 0, 32) == 2
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(3, 4, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(3, 5, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(3, 1, 1, 31) == 22
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(3, 2, 1, 31) == 12
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNFromAtoB(3, 3, 1, 31) == 2
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(1, 1, 0, 33) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(1, 2, 0, 33) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(1, 3, 0, 33) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(1, 4, 0, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(1, 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(10, 1, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(1, 1, 1, 32) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(1, 2, 1, 32) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(1, 3, 1, 32) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(1, 4, 1, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(2, 1, 0, 33) == 31
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(2, 2, 0, 33) == 21
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(2, 3, 0, 33) == 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(2, 4, 0, 33) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(2, 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(2, 1, 1, 32) == 31
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(2, 2, 1, 32) == 21
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(2, 3, 1, 32) == 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(2, 4, 1, 32) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(2, 5, 1, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(3, 1, 0, 33) == 32
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(3, 2, 0, 33) == 22
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(3, 3, 0, 33) == 12
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(3, 4, 0, 33) == 2
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(3, 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(3, 1, 1, 32) == 22
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(3, 2, 1, 32) == 12
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNFromAtoB(3, 3, 1, 32) == 2

#noinline
def testBytes_LookBackNPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).lookBackNPartFromAtoB([0].repackTo(Bytes), 1, 0, 0).nothing?()
        [].repackTo(Bytes).lookBackNPartFromAtoB([0].repackTo(Bytes), 2, 0, 0).nothing?()
        [].repackTo(Bytes).lookBackNPartFromAtoB([0].repackTo(Bytes), 9223372036854775807, 0, 0).nothing?()
        [].repackTo(Bytes).lookBackNPartFromAtoB([0].repackTo(Bytes), 0, 0, 0) : error_outOfRange
        [].repackTo(Bytes).lookBackNPartFromAtoB([0].repackTo(Bytes), -1, 0, 0) : error_outOfRange
        [].repackTo(Bytes).lookBackNPartFromAtoB([0].repackTo(Bytes), -9223372036854775808, 0, 0) : error_outOfRange
        [1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 0, 1) == 0
        [1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 9223372036854775807, 0, 1).nothing?()
        [1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 0, 0, 1) : error_outOfRange
        [1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), -1, 0, 1) : error_outOfRange
        [1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), -9223372036854775808, 0, 1) : error_outOfRange
        [1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 1, 0) : error_outOfRange
        [1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 0, 0).nothing?()
        [1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 0, 0).nothing?()
        [1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 1, 1).nothing?()
        [1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 1, 1).nothing?()
        [2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 0, 1).nothing?()
        [2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 0, 1).nothing?()
        [2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 0, 0).nothing?()
        [2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 0, 0).nothing?()
        [2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 1, 1).nothing?()
        [2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 1, 1).nothing?()
        [2].repackTo(Bytes).lookBackNPartFromAtoB([2, 1].repackTo(Bytes), 1, 0, 1).nothing?()
        [2].repackTo(Bytes).lookBackNPartFromAtoB([2, 1].repackTo(Bytes), 2, 0, 1).nothing?()
        [2].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 1).nothing?()
        [2].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 1).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 0, 1) == 0
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 0, 0, 1) : error_outOfRange
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), -1, 0, 1) : error_outOfRange
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), -9223372036854775808, 0, 1) : error_outOfRange
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 0, 1).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 0, 2) == 0
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 0, 2).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 0, 6) == 0
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([4].repackTo(Bytes), 1, 0, 6) == 5
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([4].repackTo(Bytes), 2, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([4].repackTo(Bytes), 1, 1, 6) == 5
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([4].repackTo(Bytes), 2, 1, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([4].repackTo(Bytes), 1, 2, 6) == 5
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([4].repackTo(Bytes), 2, 2, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([4].repackTo(Bytes), 1, 2, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([4].repackTo(Bytes), 2, 2, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([4].repackTo(Bytes), 1, 0, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([4].repackTo(Bytes), 2, 0, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2].repackTo(Bytes), 1, 0, 5) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2].repackTo(Bytes), 2, 0, 5) == 1
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2].repackTo(Bytes), 1, 2, 5) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2].repackTo(Bytes), 2, 2, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2].repackTo(Bytes), 3, 0, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 6) == 0
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 1, 1, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 2, 1, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 1, 0, 6) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 2, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 1, 0, 5) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 2, 0, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 1, 1, 5) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 2, 1, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 1, 3, 5) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 2, 3, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 1, 3, 4).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 2, 3, 4).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 1, 4, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 2, 4, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3, 4].repackTo(Bytes), 1, 0, 6) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3, 4].repackTo(Bytes), 2, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3, 4].repackTo(Bytes), 1, 3, 6) == 3
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3, 4].repackTo(Bytes), 2, 3, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3, 4].repackTo(Bytes), 1, 0, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3, 4].repackTo(Bytes), 2, 0, 5).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3, 4].repackTo(Bytes), 1, 4, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 3, 4].repackTo(Bytes), 2, 4, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 2].repackTo(Bytes), 1, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2, 2].repackTo(Bytes), 2, 0, 6).nothing?()
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2].repackTo(Bytes), 1, -1, 2) : error_outOfRange
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2].repackTo(Bytes), 1, 2, 1) : error_outOfRange
        [1, 2, 128, 2, 3, 4].repackTo(Bytes).lookBackNPartFromAtoB([2].repackTo(Bytes), 1, -10, -1) : error_outOfRange
        [].repackTo(Bytes).lookBackNPartFromAtoB([].repackTo(Bytes), 1, 0, 0) : error_nothingToLook
        [1, 2].repackTo(Bytes).lookBackNPartFromAtoB([].repackTo(Bytes), 1, 0, 0) : error_nothingToLook
        [1, 2, 3, 4, 1, 2, 255].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 3) == 0
        [1, 2, 3, 4, 1, 2, 255].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 3).nothing?()
        [1, 2, 3, 4, 1, 2, 255].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 6) == 4
        [1, 2, 3, 4, 1, 2, 255].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 6) == 0
        [1, 2, 3, 4, 1, 2, 255].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 3, 0, 6).nothing?()
        [2, 2, 2, 2, 2, 2, 255].repackTo(Bytes).lookBackNPartFromAtoB([2, 2, 2].repackTo(Bytes), 1, 0, 7) == 3
        [2, 2, 2, 2, 2, 2, 255].repackTo(Bytes).lookBackNPartFromAtoB([2, 2, 2].repackTo(Bytes), 2, 0, 7) == 0
        [2, 2, 2, 2, 2, 2, 255].repackTo(Bytes).lookBackNPartFromAtoB([2, 2, 2].repackTo(Bytes), 3, 0, 7).nothing?()
        [2, 2, 2, 2, 2, 2, 255].repackTo(Bytes).lookBackNPartFromAtoB([2, 2, 2].repackTo(Bytes), 1, 1, 6) == 3
        [2, 2, 2, 2, 2, 2, 255].repackTo(Bytes).lookBackNPartFromAtoB([2, 2, 2].repackTo(Bytes), 2, 1, 6).nothing?()
        [2, 2, 2, 2, 2, 2, 255].repackTo(Bytes).lookBackNPartFromAtoB([2, 2, 2].repackTo(Bytes), 1, 2, 5) == 2
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookBackNPartFromAtoB([2, 2, 2].repackTo(Bytes), 1, 0, 8) == 5
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookBackNPartFromAtoB([2, 2, 2].repackTo(Bytes), 2, 0, 8) == 2
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookBackNPartFromAtoB([2, 2, 2].repackTo(Bytes), 3, 0, 8).nothing?()
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookBackNPartFromAtoB([2, 2, 2].repackTo(Bytes), 1, 1, 7) == 4
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookBackNPartFromAtoB([2, 2, 2].repackTo(Bytes), 2, 1, 7) == 1
        [2, 2, 2, 2, 2, 2, 2, 2].repackTo(Bytes).lookBackNPartFromAtoB([2, 2, 2].repackTo(Bytes), 3, 1, 7).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 0, 31) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 0, 31) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 3, 0, 31) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 4, 0, 31) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 5, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 1, 30) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 1, 30) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 3, 1, 30).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 31) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 31) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 3, 0, 31) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 4, 0, 31).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 0, 15) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 0, 15) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 3, 0, 15).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 0, 32) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 0, 32) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 3, 0, 32) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 4, 0, 32) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 5, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([2].repackTo(Bytes), 1, 0, 32) == 31
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([2].repackTo(Bytes), 2, 0, 32) == 21
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([2].repackTo(Bytes), 3, 0, 32) == 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([2].repackTo(Bytes), 4, 0, 32) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([2].repackTo(Bytes), 5, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 1, 30) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 1, 30) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 3, 1, 30).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 32) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 32) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 3, 0, 32) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 4, 0, 32) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 5, 0, 32).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 0, 15) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 0, 15) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 3, 0, 15).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 0, 33) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 0, 33) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 3, 0, 33) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 4, 0, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([3].repackTo(Bytes), 1, 0, 33) == 32
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([3].repackTo(Bytes), 2, 0, 33) == 22
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([3].repackTo(Bytes), 3, 0, 33) == 12
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([3].repackTo(Bytes), 4, 0, 33) == 2
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([3].repackTo(Bytes), 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 1, 30) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 1, 30) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 3, 1, 30).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 1, 0, 33) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 2, 0, 33) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 3, 0, 33) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 4, 0, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1, 2].repackTo(Bytes), 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1, 2, 3].repackTo(Bytes), 1, 0, 33) == 30
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1, 2, 3].repackTo(Bytes), 2, 0, 33) == 20
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1, 2, 3].repackTo(Bytes), 3, 0, 33) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1, 2, 3].repackTo(Bytes), 4, 0, 33) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1, 2, 3].repackTo(Bytes), 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 1, 0, 33) == 31
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 2, 0, 33) == 21
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 3, 0, 33) == 11
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 4, 0, 33) == 1
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([2, 3].repackTo(Bytes), 5, 0, 33).nothing?()
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 1, 0, 15) == 10
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 2, 0, 15) == 0
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3].repackTo(Bytes).lookBackNPartFromAtoB([1].repackTo(Bytes), 3, 0, 15).nothing?()
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 1, 0, 31) == 29
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 2, 0, 31) == 27
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 15, 0, 31) == 1
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 16, 0, 31).nothing?()
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 1, 1, 30) == 28
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 2, 1, 30) == 26
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 14, 1, 30) == 2
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 15, 1, 30).nothing?()
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 1, 0, 32) == 30
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 2, 0, 32) == 28
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 16, 0, 32) == 0
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 17, 0, 32).nothing?()
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 1, 1, 31) == 29
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 2, 1, 31) == 27
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 15, 1, 31) == 1
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 16, 1, 31).nothing?()
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 1, 0, 33) == 31
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 2, 0, 33) == 29
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 16, 0, 33) == 1
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 17, 0, 33).nothing?()
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 1, 1, 32) == 30
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 2, 1, 32) == 28
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 15, 1, 32) == 2
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].repackTo(Bytes).lookBackNPartFromAtoB([1, 1].repackTo(Bytes), 16, 1, 32).nothing?()

#noinline
def testBytes_Delete$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).delete$(0, 0) == [].repackTo(Bytes)
        [].repackTo(Bytes).delete$(1, 0) : error_outOfRange
        [].repackTo(Bytes).delete$(9223372036854775807, 0) : error_outOfRange
        [].repackTo(Bytes).delete$(-1, 0) : error_outOfRange
        [].repackTo(Bytes).delete$(-9223372036854775808, 0) : error_outOfRange
        [].repackTo(Bytes).delete$(0, 1) : error_outOfRange
        [].repackTo(Bytes).delete$(0, 9223372036854775807) : error_outOfRange
        [].repackTo(Bytes).delete$(0, -1) : error_outOfRange
        [].repackTo(Bytes).delete$(0, -9223372036854775808) : error_outOfRange
        [1].repackTo(Bytes).delete$(0, 0) == [1].repackTo(Bytes)
        [1].repackTo(Bytes).delete$(1, 0) == [1].repackTo(Bytes)
        [1].repackTo(Bytes).delete$(0, 1) == [].repackTo(Bytes)
        [1].repackTo(Bytes).delete$(1, 1) : error_outOfRange
        [1].repackTo(Bytes).delete$(9223372036854775807, 0) : error_outOfRange
        [1].repackTo(Bytes).delete$(-1, 0) : error_outOfRange
        [1].repackTo(Bytes).delete$(-9223372036854775808, 0) : error_outOfRange
        [1].repackTo(Bytes).delete$(0, 2) : error_outOfRange
        [1].repackTo(Bytes).delete$(0, 9223372036854775807) : error_outOfRange
        [1].repackTo(Bytes).delete$(0, -1) : error_outOfRange
        [1].repackTo(Bytes).delete$(0, -9223372036854775808) : error_outOfRange
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(0, 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(0, 1) == [2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(0, 2) == [3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(0, 9) == [].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(0, 10) : error_outOfRange
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(1, 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(1, 1) == [1, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(1, 2) == [1, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(1, 8) == [1].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(1, 9) : error_outOfRange
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(4, 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(4, 1) == [1, 2, 3, 4, 6, 7, 8, 9].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(4, 2) == [1, 2, 3, 4, 7, 8, 9].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(4, 5) == [1, 2, 3, 4].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(4, 6) : error_outOfRange
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(8, 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(8, 1) == [1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(8, 2) : error_outOfRange
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(9, 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes).delete$(9, 1) : error_outOfRange

#noinline
def testBytes_Delete(write ok Int, write errorsCoordinates List)
    var c1 Bytes = [].repackTo(Bytes)
    var c2 Bytes = [1].repackTo(Bytes)
    var c3 Bytes = [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
    var c4 Bytes = [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
    var c5 Bytes = [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
    var c6 Bytes = [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
    var c7 Bytes = c6
    test: ok, errorsCoordinates
        c1.delete(0, 0).nothing?()
        c1 == [].repackTo(Bytes)
        c1.delete(1, 0) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.delete(9223372036854775807, 0) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.delete(-1, 0) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.delete(-9223372036854775808, 0) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.delete(0, 1) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.delete(0, 9223372036854775807) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.delete(0, -1) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.delete(0, -9223372036854775808) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c2.delete(0, 0).nothing?()
        c2 == [1].repackTo(Bytes)
        c2.delete(1, 0).nothing?()
        c2 == [1].repackTo(Bytes)
        c2.delete(0, 2) : error_outOfRange
        c2 == [1].repackTo(Bytes)
        c2.delete(0, 9223372036854775807) : error_outOfRange
        c2 == [1].repackTo(Bytes)
        c2.delete(0, -1) : error_outOfRange
        c2 == [1].repackTo(Bytes)
        c2.delete(0, -9223372036854775807) : error_outOfRange
        c2 == [1].repackTo(Bytes)
        c2.delete(2, 0) : error_outOfRange
        c2 == [1].repackTo(Bytes)
        c2.delete(9223372036854775807, 0) : error_outOfRange
        c2 == [1].repackTo(Bytes)
        c2.delete(-1, 0) : error_outOfRange
        c2 == [1].repackTo(Bytes)
        c2.delete(-9223372036854775808, 0) : error_outOfRange
        c2 == [1].repackTo(Bytes)
        c3.delete(0, 10) : error_outOfRange
        c3 == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c3.delete(1, 9) : error_outOfRange
        c3 == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c3.delete(4, 6) : error_outOfRange
        c3 == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c3.delete(9, 1) : error_outOfRange
        c3 == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c3.delete(0, 0).nothing?()
        c3 == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c3.delete(0, 1).nothing?()
        c3 == [2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c3.delete(0, 2).nothing?()
        c3 == [4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c3.delete(0, 6).nothing?()
        c3 == [].repackTo(Bytes)
        c4.delete(1, 0).nothing?()
        c4 == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c4.delete(1, 1).nothing?()
        c4 == [1, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c4.delete(1, 2).nothing?()
        c4 == [1, 5, 6, 7, 8, 9].repackTo(Bytes)
        c4.delete(1, 5).nothing?()
        c4 == [1].repackTo(Bytes)
        c5.delete(4, 0).nothing?()
        c5 == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c5.delete(4, 1).nothing?()
        c5 == [1, 2, 3, 4, 6, 7, 8, 9].repackTo(Bytes)
        c5.delete(4, 2).nothing?()
        c5 == [1, 2, 3, 4, 8, 9].repackTo(Bytes)
        c5.delete(4, 2).nothing?()
        c5 == [1, 2, 3, 4].repackTo(Bytes)
        c6.delete(8, 0).nothing?()
        c6 == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c6.delete(8, 1).nothing?()
        c6 == [1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        c6.delete(8, 0).nothing?()
        c6 == [1, 2, 3, 4, 5, 6, 7, 8].repackTo(Bytes)
        c7 == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)

#noinline
def testBytes_Replace$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).replace$(1, 0) == [].repackTo(Bytes)
        [].repackTo(Bytes).replace$(1, 1) == [].repackTo(Bytes)
        [1].repackTo(Bytes).replace$(1, 0) == [0].repackTo(Bytes)
        [1].repackTo(Bytes).replace$(1, 1) == [1].repackTo(Bytes)
        [1].repackTo(Bytes).replace$(2, 0) == [1].repackTo(Bytes)
        [1, 2, 10, 11, 12, 2, 1].repackTo(Bytes).replace$(1, 0) == [0, 2, 10, 11, 12, 2, 0].repackTo(Bytes)
        [1, 2, 10, 11, 12, 2, 1].repackTo(Bytes).replace$(2, -1) == [1, -1, 10, 11, 12, -1, 1].repackTo(Bytes)
        [1, 2, 10, 11, 12, 2, 1].repackTo(Bytes).replace$(3, 0) == [1, 2, 10, 11, 12, 2, 1].repackTo(Bytes)
        [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1].repackTo(Bytes).replace$(1, 0) == [0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0].repackTo(Bytes)
        [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1].repackTo(Bytes).replace$(2, -1) == [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1].repackTo(Bytes)
        [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1].repackTo(Bytes).replace$(3, 0) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1].repackTo(Bytes)
        [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2].repackTo(Bytes).replace$(1, 0) == [0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2].repackTo(Bytes)
        [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2].repackTo(Bytes).replace$(2, -1) == [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1].repackTo(Bytes)
        [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2].repackTo(Bytes).replace$(3, 0) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2].repackTo(Bytes)
        [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1].repackTo(Bytes).replace$(1, 0) == [0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0].repackTo(Bytes)
        [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1].repackTo(Bytes).replace$(2, -1) == [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1].repackTo(Bytes)
        [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1].repackTo(Bytes).replace$(3, 0) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1].repackTo(Bytes)

#noinline
def testBytes_Replace(write ok Int, write errorsCoordinates List)
    var c1 Bytes = [].repackTo(Bytes)
    var c2 Bytes = [1].repackTo(Bytes)
    var c3 Bytes = [1, 2, 3, 255, 128, 2, 1].repackTo(Bytes)
    var c4 Bytes = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1].repackTo(Bytes)
    var c5 Bytes = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2].repackTo(Bytes)
    var c6 Bytes = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1].repackTo(Bytes)
    var c7 Bytes = c6
    test: ok, errorsCoordinates
        c1.replace(1, 0).nothing?()
        c1 == [].repackTo(Bytes)
        c1.replace(2, 0).nothing?()
        c1 == [].repackTo(Bytes)
        c2.replace(1, 0).nothing?()
        c2 == [0].repackTo(Bytes)
        c2.replace(0, 3).nothing?()
        c2 == [3].repackTo(Bytes)
        c2.replace(2, 0).nothing?()
        c2 == [3].repackTo(Bytes)
        c3.replace(1, 0).nothing?()
        c3  == [0, 2, 3, 255, 128, 2, 0].repackTo(Bytes)
        c3.replace(1, 4).nothing?()
        c3  == [0, 2, 3, 255, 128, 2, 0].repackTo(Bytes)
        c3.replace(2, 11).nothing?()
        c3  == [0, 11, 3, 255, 128, 11, 0].repackTo(Bytes)
        c3.replace(255, 15).nothing?()
        c3  == [0, 11, 3, 15, 128, 11, 0].repackTo(Bytes)
        c4.replace(1, 0).nothing?()
        c4  == [0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0].repackTo(Bytes)
        c4.replace(2, 1).nothing?()
        c4  == [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0].repackTo(Bytes)
        c4.replace(3, 12).nothing?()
        c4  == [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0].repackTo(Bytes)
        c5.replace(1, 0).nothing?()
        c5  == [0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2].repackTo(Bytes)
        c5.replace(2, 1).nothing?()
        c5  == [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1].repackTo(Bytes)
        c5.replace(3, 12).nothing?()
        c5  == [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1].repackTo(Bytes)
        c6.replace(1, 0).nothing?()
        c6  == [0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0].repackTo(Bytes)
        c6.replace(2, 1).nothing?()
        c6  == [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0].repackTo(Bytes)
        c6.replace(3, 12).nothing?()
        c6  == [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0].repackTo(Bytes)
        c7 == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1].repackTo(Bytes)

#noinline
def testBytes_Insert$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).insert$(1, 1) : error_outOfRange
        [].repackTo(Bytes).insert$(9223372036854775807, 1) : error_outOfRange
        [].repackTo(Bytes).insert$(-1, 1) : error_outOfRange
        [].repackTo(Bytes).insert$(-9223372036854775808, 1) : error_outOfRange
        [].repackTo(Bytes).insert$(0, 1) == [1].repackTo(Bytes)
        [1].repackTo(Bytes).insert$(2, 1) : error_outOfRange
        [1].repackTo(Bytes).insert$(9223372036854775807, 1) : error_outOfRange
        [1].repackTo(Bytes).insert$(-1, 1) : error_outOfRange
        [1].repackTo(Bytes).insert$(-9223372036854775808, 1) : error_outOfRange
        [1].repackTo(Bytes).insert$(0, 2) == [2, 1].repackTo(Bytes)
        [1].repackTo(Bytes).insert$(1, 2) == [1, 2].repackTo(Bytes)
        [1, 2, 3, 4, 5].repackTo(Bytes).insert$(0, 10) == [10, 1, 2, 3, 4, 5].repackTo(Bytes)
        [1, 2, 3, 4, 5].repackTo(Bytes).insert$(2, 10) == [1, 2, 10, 3, 4, 5].repackTo(Bytes)
        [1, 2, 3, 4, 5].repackTo(Bytes).insert$(3, 10) == [1, 2, 3, 10, 4, 5].repackTo(Bytes)
        [1, 2, 3, 4, 5].repackTo(Bytes).insert$(5, 10) == [1, 2, 3, 4, 5, 10].repackTo(Bytes)

#noinline
def testBytes_Insert(write ok Int, write errorsCoordinates List)
    var c1 Bytes = [].repackTo(Bytes)
    var c2 Bytes = [1].repackTo(Bytes)
    var c3 Bytes = c2
    test: ok, errorsCoordinates
        c1.insert(1, 1) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.insert(9223372036854775807, 1) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.insert(-1, 1) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.insert(-9223372036854775808, 1) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.insert(0, 1).nothing?()
        c1 == [1].repackTo(Bytes)
        c1.insert(2, 1) : error_outOfRange
        c1 == [1].repackTo(Bytes)
        c1.insert(9223372036854775807, 1) : error_outOfRange
        c1 == [1].repackTo(Bytes)
        c1.insert(-1, 1) : error_outOfRange
        c1 == [1].repackTo(Bytes)
        c1.insert(-9223372036854775808, 1) : error_outOfRange
        c1 == [1].repackTo(Bytes)
        c1.insert(0, 2).nothing?()
        c1 == [2, 1].repackTo(Bytes)
        c2.insert(1, 2).nothing?()
        c2 == [1, 2].repackTo(Bytes)
        c2.insert(0, 10).nothing?()
        c2 == [10, 1, 2].repackTo(Bytes)
        c2.insert(2, 15).nothing?()
        c2 == [10, 1, 15, 2].repackTo(Bytes)
        c2.insert(1, 3).nothing?()
        c2 == [10, 3, 1, 15, 2].repackTo(Bytes)
        c2.insert(3, 1).nothing?()
        c2 == [10, 3, 1, 1, 15, 2].repackTo(Bytes)
        c2.insert(7, 1) : error_outOfRange
        c2 == [10, 3, 1, 1, 15, 2].repackTo(Bytes)
        c2.insert(9223372036854775807, 1) : error_outOfRange
        c2 == [10, 3, 1, 1, 15, 2].repackTo(Bytes)
        c2.insert(-1, 1) : error_outOfRange
        c2 == [10, 3, 1, 1, 15, 2].repackTo(Bytes)
        c2.insert(-9223372036854775808, 1) : error_outOfRange
        c2 == [10, 3, 1, 1, 15, 2].repackTo(Bytes)
        c3 == [1].repackTo(Bytes)

#noinline
def testBytes_InsertPart$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).insertPart$(1, [1].repackTo(Bytes)) : error_outOfRange
        [].repackTo(Bytes).insertPart$(9223372036854775807, [1].repackTo(Bytes)) : error_outOfRange
        [].repackTo(Bytes).insertPart$(-1, [1].repackTo(Bytes)) : error_outOfRange
        [].repackTo(Bytes).insertPart$(-9223372036854775808, [1].repackTo(Bytes)) : error_outOfRange
        [].repackTo(Bytes).insertPart$(0, [].repackTo(Bytes)) == [].repackTo(Bytes)
        [].repackTo(Bytes).insertPart$(0, [1].repackTo(Bytes)) == [1].repackTo(Bytes)
        [].repackTo(Bytes).insertPart$(0, [1, 2, 3].repackTo(Bytes)) == [1, 2, 3].repackTo(Bytes)
        [1].repackTo(Bytes).insertPart$(2, [1].repackTo(Bytes)) : error_outOfRange
        [1].repackTo(Bytes).insertPart$(9223372036854775807, [1].repackTo(Bytes)) : error_outOfRange
        [1].repackTo(Bytes).insertPart$(-1, [1].repackTo(Bytes)) : error_outOfRange
        [1].repackTo(Bytes).insertPart$(-9223372036854775808, [1].repackTo(Bytes)) : error_outOfRange
        [1].repackTo(Bytes).insertPart$(0, [].repackTo(Bytes)) == [1].repackTo(Bytes)
        [1].repackTo(Bytes).insertPart$(1, [].repackTo(Bytes)) == [1].repackTo(Bytes)
        [1].repackTo(Bytes).insertPart$(0, [2].repackTo(Bytes)) == [2, 1].repackTo(Bytes)
        [1].repackTo(Bytes).insertPart$(0, [2, 3].repackTo(Bytes)) == [2, 3, 1].repackTo(Bytes)
        [1].repackTo(Bytes).insertPart$(1, [1, 3].repackTo(Bytes)) == [1, 1, 3].repackTo(Bytes)
        [1, 2, 3, 4, 5].repackTo(Bytes).insertPart$(0, [-1, -2].repackTo(Bytes)) == [-1, -2, 1, 2, 3, 4, 5].repackTo(Bytes)
        [1, 2, 3, 4, 5].repackTo(Bytes).insertPart$(2, [-1, -2].repackTo(Bytes)) == [1, 2, -1, -2, 3, 4, 5].repackTo(Bytes)
        [1, 2, 3, 4, 5].repackTo(Bytes).insertPart$(3, [-1, -2].repackTo(Bytes)) == [1, 2, 3, -1, -2, 4, 5].repackTo(Bytes)
        [1, 2, 3, 4, 5].repackTo(Bytes).insertPart$(5, [-1, -2].repackTo(Bytes)) == [1, 2, 3, 4, 5, -1, -2].repackTo(Bytes)

#noinline
def testBytes_InsertPart(write ok Int, write errorsCoordinates List)
    var c1 Bytes = [].repackTo(Bytes)
    var c2 Bytes = [1].repackTo(Bytes)
    test: ok, errorsCoordinates
        c1.insertPart(1, [1].repackTo(Bytes)) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.insertPart(9223372036854775807, [1].repackTo(Bytes)) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.insertPart(-1, [1].repackTo(Bytes)) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.insertPart(-9223372036854775808, [1].repackTo(Bytes)) : error_outOfRange
        c1 == [].repackTo(Bytes)
        c1.insertPart(0, [].repackTo(Bytes)).nothing?()
        c1 == [].repackTo(Bytes)
        c1.insertPart(0, [1].repackTo(Bytes)).nothing?()
        c1 == [1].repackTo(Bytes)
        c1.insertPart(2, [1].repackTo(Bytes)) : error_outOfRange
        c1 == [1].repackTo(Bytes)
        c1.insertPart(9223372036854775807, [1].repackTo(Bytes)) : error_outOfRange
        c1 == [1].repackTo(Bytes)
        c1.insertPart(-1, [1].repackTo(Bytes)) : error_outOfRange
        c1 == [1].repackTo(Bytes)
        c1.insertPart(-9223372036854775808, [1].repackTo(Bytes)) : error_outOfRange
        c1 == [1].repackTo(Bytes)
        c1.insertPart(0, [].repackTo(Bytes)).nothing?()
        c1 == [1].repackTo(Bytes)
        c1.insertPart(1, [].repackTo(Bytes)).nothing?()
        c1 == [1].repackTo(Bytes)
        c1.insertPart(0, [2].repackTo(Bytes)).nothing?()
        c1 == [2, 1].repackTo(Bytes)
        c2.insertPart(1, [2].repackTo(Bytes)).nothing?()
        c2 == [1, 2].repackTo(Bytes)
        c2.insertPart(0, [2, 3].repackTo(Bytes)).nothing?()
        c2 == [2, 3, 1, 2].repackTo(Bytes)
        c2.insertPart(1, [1, 3].repackTo(Bytes)).nothing?()
        c2 == [2, 1, 3, 3, 1, 2].repackTo(Bytes)
        c2.insertPart(2, [].repackTo(Bytes)).nothing?()
        c2 == [2, 1, 3, 3, 1, 2].repackTo(Bytes)
        c2.insertPart(3, [].repackTo(Bytes)).nothing?()
        c2 == [2, 1, 3, 3, 1, 2].repackTo(Bytes)
        c2.insertPart(0, [].repackTo(Bytes)).nothing?()
        c2 == [2, 1, 3, 3, 1, 2].repackTo(Bytes)
        c2.insertPart(6, [].repackTo(Bytes)).nothing?()
        c2 == [2, 1, 3, 3, 1, 2].repackTo(Bytes)
        c2.insertPart(6, [-1, -2].repackTo(Bytes)).nothing?()
        c2 == [2, 1, 3, 3, 1, 2, -1, -2].repackTo(Bytes)

#noinline
def testBytes_Repeat(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Bytes.repeat(12, 0) == [].repackTo(Bytes)
        Bytes.repeat(12, 1) == [12].repackTo(Bytes)
        Bytes.repeat(12, 2) == [12, 12].repackTo(Bytes)
        Bytes.repeat(12, 10) == [12, 12, 12, 12, 12, 12, 12, 12, 12, 12].repackTo(Bytes)
        Bytes.repeat(12, 11) == [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12].repackTo(Bytes)
        Bytes.repeat(12, 16) == [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12].repackTo(Bytes)
        Bytes.repeat(12, -1) : error_outOfRange
        Bytes.repeat(12, -2) : error_outOfRange
        Bytes.repeat(12, -9223372036854775808) : error_outOfRange

#noinline
def testBytes_RepeatPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repackTo(Bytes).repeatPart(0) == [].repackTo(Bytes)
        [].repackTo(Bytes).repeatPart(120) == [].repackTo(Bytes)
        [].repackTo(Bytes).repeatPart(-1) : error_outOfRange
        [].repackTo(Bytes).repeatPart(-9223372036854775808) : error_outOfRange
        [13].repackTo(Bytes).repeatPart(0) == [].repackTo(Bytes)
        [13].repackTo(Bytes).repeatPart(1) == [13].repackTo(Bytes)
        [13].repackTo(Bytes).repeatPart(2) == [13, 13].repackTo(Bytes)
        [13].repackTo(Bytes).repeatPart(10) == [13, 13, 13, 13, 13, 13, 13, 13, 13, 13].repackTo(Bytes)
        [13].repackTo(Bytes).repeatPart(11) == [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13].repackTo(Bytes)
        [13].repackTo(Bytes).repeatPart(16) == [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13].repackTo(Bytes)
        [13].repackTo(Bytes).repeatPart(-1) : error_outOfRange
        [13].repackTo(Bytes).repeatPart(-9223372036854775808) : error_outOfRange
        [13, 110, 100].repackTo(Bytes).repeatPart(0) == [].repackTo(Bytes)
        [13, 110, 100].repackTo(Bytes).repeatPart(1) == [13, 110, 100].repackTo(Bytes)
        [13, 110, 100].repackTo(Bytes).repeatPart(2) == [13, 110, 100, 13, 110, 100].repackTo(Bytes)
        [13, 110, 100].repackTo(Bytes).repeatPart(10) == [13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100].repackTo(Bytes)
        [13, 110, 100].repackTo(Bytes).repeatPart(11) == [13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100].repackTo(Bytes)
        [13, 110, 100].repackTo(Bytes).repeatPart(16) == [13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100].repackTo(Bytes)
        [13, 110, 100].repackTo(Bytes).repeatPart(-1) : error_outOfRange
        [13, 110, 100].repackTo(Bytes).repeatPart(-9223372036854775808) : error_outOfRange

#noinline
def testBytes_ReverseFromAtoB(write ok Int, write errorsCoordinates List)
    var c Bytes = [].repackTo(Bytes)
    test: ok, errorsCoordinates
        c.reverseFromAtoB(0, 0).nothing?()
        c == [].repackTo(Bytes)
        c.reverseFromAtoB(0, 1) : error_outOfRange
        c == [].repackTo(Bytes)
        c.reverseFromAtoB(1, 1) : error_outOfRange
        c == [].repackTo(Bytes)
        c.reverseFromAtoB(1, 0) : error_outOfRange
        c == [].repackTo(Bytes)
        c.reverseFromAtoB(-1, -1) : error_outOfRange
        c == [].repackTo(Bytes)
        c.reverseFromAtoB(-9223372036854775808, 0) : error_outOfRange
        c == [].repackTo(Bytes)
        c.reverseFromAtoB(0, -9223372036854775808) : error_outOfRange
        c == [].repackTo(Bytes)
        c.reverseFromAtoB(0, 9223372036854775807) : error_outOfRange
        c == [].repackTo(Bytes)
        c.reverseFromAtoB(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == [].repackTo(Bytes)
    c = [1].repackTo(Bytes)
    test: ok, errorsCoordinates
        c.reverseFromAtoB(0, 0).nothing?()
        c == [1].repackTo(Bytes)
        c.reverseFromAtoB(0, 1).nothing?()
        c == [1].repackTo(Bytes)
        c.reverseFromAtoB(1, 1).nothing?()
        c == [1].repackTo(Bytes)
        c.reverseFromAtoB(0, 2) : error_outOfRange
        c == [1].repackTo(Bytes)
        c.reverseFromAtoB(2, 1) : error_outOfRange
        c == [1].repackTo(Bytes)
        c.reverseFromAtoB(1, 2) : error_outOfRange
        c == [1].repackTo(Bytes)
        c.reverseFromAtoB(2, 2) : error_outOfRange
        c == [1].repackTo(Bytes)
        c.reverseFromAtoB(1, 0) : error_outOfRange
        c == [1].repackTo(Bytes)
        c.reverseFromAtoB(-1, -1) : error_outOfRange
        c == [1].repackTo(Bytes)
        c.reverseFromAtoB(-9223372036854775808, 1) : error_outOfRange
        c == [1].repackTo(Bytes)
        c.reverseFromAtoB(0, -9223372036854775808) : error_outOfRange
        c == [1].repackTo(Bytes)
        c.reverseFromAtoB(0, 9223372036854775807) : error_outOfRange
        c == [1].repackTo(Bytes)
        c.reverseFromAtoB(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == [1].repackTo(Bytes)
    c = [1, 2].repackTo(Bytes)
    test: ok, errorsCoordinates
        c.reverseFromAtoB(0, 0).nothing?()
        c == [1, 2].repackTo(Bytes)
        c.reverseFromAtoB(0, 1).nothing?()
        c == [1, 2].repackTo(Bytes)
        c.reverseFromAtoB(1, 1).nothing?()
        c == [1, 2].repackTo(Bytes)
        c.reverseFromAtoB(1, 2).nothing?()
        c == [1, 2].repackTo(Bytes)
        c.reverseFromAtoB(2, 2).nothing?()
        c == [1, 2].repackTo(Bytes)
        c.reverseFromAtoB(0, 2).nothing?()
        c == [2, 1].repackTo(Bytes)
        c.reverseFromAtoB(0, 3) : error_outOfRange
        c == [2, 1].repackTo(Bytes)
        c.reverseFromAtoB(3, 0) : error_outOfRange
        c == [2, 1].repackTo(Bytes)
        c.reverseFromAtoB(1, 3) : error_outOfRange
        c == [2, 1].repackTo(Bytes)
        c.reverseFromAtoB(3, 3) : error_outOfRange
        c == [2, 1].repackTo(Bytes)
        c.reverseFromAtoB(1, 0) : error_outOfRange
        c == [2, 1].repackTo(Bytes)
        c.reverseFromAtoB(-1, -1) : error_outOfRange
        c == [2, 1].repackTo(Bytes)
        c.reverseFromAtoB(-9223372036854775808, 0) : error_outOfRange
        c == [2, 1].repackTo(Bytes)
        c.reverseFromAtoB(0, -9223372036854775808) : error_outOfRange
        c == [2, 1].repackTo(Bytes)
        c.reverseFromAtoB(0, 9223372036854775807) : error_outOfRange
        c == [2, 1].repackTo(Bytes)
        c.reverseFromAtoB(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == [2, 1].repackTo(Bytes)
    c = [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
    test: ok, errorsCoordinates
        c.reverseFromAtoB(0, 0).nothing?()
        c == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c.reverseFromAtoB(0, 1).nothing?()
        c == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c.reverseFromAtoB(1, 1).nothing?()
        c == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c.reverseFromAtoB(1, 2).nothing?()
        c == [1, 2, 3, 4, 5, 6, 7, 8, 9].repackTo(Bytes)
        c.reverseFromAtoB(0, 5).nothing?()
        c == [5, 4, 3, 2, 1, 6, 7, 8, 9].repackTo(Bytes)
        c.reverseFromAtoB(5, 9).nothing?()
        c == [5, 4, 3, 2, 1, 9, 8, 7, 6].repackTo(Bytes)
        c.reverseFromAtoB(0, 9).nothing?()
        c == [6, 7, 8, 9, 1, 2, 3, 4, 5].repackTo(Bytes)
        c.reverseFromAtoB(3, 7).nothing?()
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5].repackTo(Bytes)
        c.reverseFromAtoB(0, 10) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5].repackTo(Bytes)
        c.reverseFromAtoB(3, 0) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5].repackTo(Bytes)
        c.reverseFromAtoB(9, 0) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5].repackTo(Bytes)
        c.reverseFromAtoB(10, 0) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5].repackTo(Bytes)
        c.reverseFromAtoB(3, -1) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5].repackTo(Bytes)
        c.reverseFromAtoB(-1, -1) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5].repackTo(Bytes)
        c.reverseFromAtoB(-9223372036854775808, 0) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5].repackTo(Bytes)
        c.reverseFromAtoB(0, -9223372036854775808) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5].repackTo(Bytes)
        c.reverseFromAtoB(0, 9223372036854775807) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5].repackTo(Bytes)
        c.reverseFromAtoB(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5].repackTo(Bytes)
        c.reverseFromAtoB(9223372036854775807, -9223372036854775808) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5].repackTo(Bytes)
    c = [].repackTo(Bytes)
    for :(i Int = 0) i < 128; i++
        c.addItem(i)
    var c1 Bytes = [].repackTo(Bytes)
    for :(i Int = 63) i >= 0; i--
        c1.addItem(i)
    var c2 Bytes = [].repackTo(Bytes)
    c2.addItem(64)
    for :(i Int = 0) i < 64; i++
        c2.addItem(i)
    test: ok, errorsCoordinates
        c.reverseFromAtoB(0, 64).nothing?()
        c[0 : 64] == c1
        c.reverseFromAtoB(0, 65).nothing?()
        c[0 : 65] == c2

#noinline
def testBytes_Dump(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Bytes().dump(0) == "Type: STD::Bytes = \n"
        Bytes().dump(1) == "  Type: STD::Bytes = \n"
        [1, 255].repackTo(Bytes).dump(0) == "Type: STD::Bytes = 01FF\n"
        [1, 255].repackTo(Bytes).dump(1) == "  Type: STD::Bytes = 01FF\n"
