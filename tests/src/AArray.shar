module Main

type TestAArray
    m Map

def TestAArray(map Map) TestAArray
    return TestAArray{m: map}

attach TestAArray to Empty
    def createEmpty(noread type TestAArray) TestAArray
        return TestAArray(Map())

attach TestAArray to Long
    def length(map TestAArray) Int
        return map.m~().length()

attach TestAArray to Shar__sugar__getItem
    def shar__sugar__getItem(map TestAArray, key ${Equal, Hashable}) $Any
        return map.m~()[key]

attach TestAArray to Put
    def put(write map TestAArray, key ${Equal, Hashable}, newValue $Any) $Any
        var map_ Map = map.m`(Map())
        const result $Any = map_.put(key, newValue)
        map.m`(map_)
        return result

attach TestAArray to Iterable
    def parse__init(map TestAArray) Array
        return map.m~().parse__init()

    def parse__predicate(map TestAArray, index Array) Bool
        return map.m~().parse__predicate(index)

    def parse__next(map TestAArray, write index Array)
        map.m~().parse__next(index)

    def parse__get__key(map TestAArray, index Array) $Any
        return map.m~().parse__get__key(index)

    def parse__get__item(map TestAArray, index Array) $Any
        return map.m~().parse__get__item(index)

attach TestAArray to AArray

attach TestAArray to KeyTypeNumber
    def keyTypeNumber(map TestAArray) Int
        return map.m~().keyTypeNumber()

attach TestAArray to ValueTypeNumber
    def valueTypeNumber(map TestAArray) Int
        return map.m~().valueTypeNumber()

def testAArray(write ok Int, write errorsCoordinates List)
    testArray_Serialize(ok, errorsCoordinates)

#noinline
def testArray_Serialize(write ok Int, write errorsCoordinates List)
    var aa TestAArray = TestAArray(Map())
    aa.put("10", 10)
    aa.put("1", 1)
    aa.put("7", 7)
    aa.put("1fg", 1)
    aa.put("sse", 0)
    aa.put("123", 123)
    aa.put("fb4", 4)
    var b Bytes = Bytes()
    test: ok, errorsCoordinates
        aa.serializeAArray(b).nothing?()
    aa = TestAArray(Map())
    var p Int = 0
    aa = TestAArray.deserializeAArray(b, p, String, Int)
    test: ok, errorsCoordinates
        p == b.length()
        aa.length() == 7
        aa["10"] == 10
        aa["1"] == 1
        aa["7"] == 7
        aa["1fg"] == 1
        aa["sse"] == 0
        aa["123"] == 123
        aa["fb4"] == 4
        aa[""].nothing?()
        aa["222"].nothing?()
    b = Bytes()
    test: ok, errorsCoordinates
        TestAArray(Map()).serializeAArray(b).nothing?()
    p = 0
    aa = TestAArray.deserializeAArray(b, p, String, Int)
    test: ok, errorsCoordinates
        p == b.length()
        aa.length() == 0
    aa.put(10, "10")
    aa.put(1, "1")
    aa.put(7, "7")
    aa.put(11, "1fg")
    aa.put(0, "sse")
    aa.put(123, "123")
    aa.put(4, "fb4")
    b = Bytes()
    test: ok, errorsCoordinates
        aa.serializeAArray(b).nothing?()
    aa = TestAArray(Map())
    p = 0
    aa = TestAArray.deserializeAArray(b, p, Int, String)
    test: ok, errorsCoordinates
        p == b.length()
        aa.length() == 7
        aa[10] == "10"
        aa[1] == "1"
        aa[7] == "7"
        aa[11] == "1fg"
        aa[0] == "sse"
        aa[123] == "123"
        aa[-1].nothing?()
        aa[-21].nothing?()
