module Main

def unsafe_list_getCounter(list $Any) Int
    return list.unsafe_getI64(0)

#noinline
def testList(write ok Int, write errorsCoordinates List)
    testList_MemoryManagement(ok, errorsCoordinates)
    testList_Equal(ok, errorsCoordinates)
    testList_GetFromAToLast(ok, errorsCoordinates)
    testList_GetFromFirstToA(ok, errorsCoordinates)
    testList_GetRange(ok, errorsCoordinates)
    testList_GetItem(ok, errorsCoordinates)
    testList_Add(ok, errorsCoordinates)
    testList_StringWriter(ok, errorsCoordinates)
    testList_Hashable(ok, errorsCoordinates)
    testList_Long(ok, errorsCoordinates)
    testList_Empty(ok, errorsCoordinates)
    testList_Container(ok, errorsCoordinates)
    testList_Put(ok, errorsCoordinates)
    testList_Iterator(ok, errorsCoordinates)
    testList_Swap(ok, errorsCoordinates)
    testList_Delete$(ok, errorsCoordinates)
    testList_Delete(ok, errorsCoordinates)
    testList_Insert$(ok, errorsCoordinates)
    testList_Insert(ok, errorsCoordinates)
    testList_InsertPart$(ok, errorsCoordinates)
    testList_InsertPart(ok, errorsCoordinates)
    testList_Repeat(ok, errorsCoordinates)
    testList_RepeatPart(ok, errorsCoordinates)
    testList_ReversePart(ok, errorsCoordinates)
    testList_Dump(ok, errorsCoordinates)

#noinline
def testList_MemoryManagement(write ok Int, write errorsCoordinates List)
    var int Int = 1
    var list1 List = {int, 2, 3}
    var list2 List = {list1, 2, 3}
    var list3 List = {int, 2, 3}
    var list4 List = {list3, 2, 3}
    test: ok, errorsCoordinates
        unsafe_list_getCounter(list1) == 2
        unsafe_list_getCounter(list2) == 1
    var allOk Bool = false
    var count Int = 0
    try
        parse :(parse) index, item = list2
            count++
            allOk = index.inRange?(0, 3)
            if !allOk || !(item.typeNumber~() == Int.typeNumber~() || item.typeNumber~() == List.typeNumber~())
                allOk = false
                end parse
    catch
        count = 0
    test: ok, errorsCoordinates
        allOk
        count == 3
        unsafe_list_getCounter(list1) == 2
        unsafe_list_getCounter(list2) == 1
    list1.shar__rc_free()
    test: ok, errorsCoordinates
        unsafe_list_getCounter(list1) == 1
        unsafe_list_getCounter(list2) == 1
    list1.shar__rc_use()
    test: ok, errorsCoordinates
        unsafe_list_getCounter(list1) == 2
        unsafe_list_getCounter(list2) == 1
    list2 = {1, 2, 3}
    test: ok, errorsCoordinates
        unsafe_list_getCounter(list1) == 1
        unsafe_list_getCounter(list2) == 0
    list1.shar__to_const()
    test: ok, errorsCoordinates
        unsafe_list_getCounter(list1) == 0
        unsafe_list_getCounter(list2) == 0
        list1.use?()
        list3.use?()
        !list4.use?()
        list1.constant?()
        !list3.constant?()
        !list4.constant?()
    list1 = list1.clone()
    list2 = list3.clone()
    var list5 List = list4.clone()
    test: ok, errorsCoordinates
        unsafe_list_getCounter(list1) == 1
        unsafe_list_getCounter(list2) == 1
        unsafe_list_getCounter(list3) == 3
        unsafe_list_getCounter(list4) == 1
        unsafe_list_getCounter(list5) == 1
    list1 = {int, 2, 3}
    list2 = {list1, 2, 3}
    list2.shar__to_const()
    test: ok, errorsCoordinates
        unsafe_list_getCounter(list1) == 0
        unsafe_list_getCounter(list2) == 0
    allOk = false
    list1 = {}
    try
        for :(i Int = 0) i < 300; i++
            list1.addItem(i)
        list2 = list1
        for :(i Int = 1) i < 150; i++
            list1.setItem(i, i + 1)
        allOk = list1[0] == 0
        if allOk
            for :(i Int = 1) i < 150; i++
                allOk = list1[i] == i + 1
                if !allOk
                    end i
        if allOk
            for :(i Int = 150) i < 300; i++
                allOk = list1[i] == i
                if !allOk
                    end i
        if allOk
            for :(i Int = 0) i < 300; i++
                allOk = list2[i] == i
                if !allOk
                    end i
        list3 = list2
        for :(i Int = 300) i < 400; i++
            list2.addItem(i)
        allOk = allOk && list1[0] == 0
        if allOk
            for :(i Int = 1) i < 150; i++
                allOk = list1[i] == i + 1
                if !allOk
                    end i
        if allOk
            for :(i Int = 150) i < 300; i++
                allOk = list1[i] == i
                if !allOk
                    end i
        if allOk
            for :(i Int = 0) i < 400; i++
                allOk = list2[i] == i
                if !allOk
                    end i
    catch
        nothing
    test: ok, errorsCoordinates
        allOk
        list1.length~() == 300
        list2.length~() == 400
        list3.length~() == 300

#noinline
def testList_Equal(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {} == {}
        {1} != {}
        {} != {1}
        {nothing} != {nothing}
        {nothing, 1, 2, 3} != {nothing, 1, 2, 3}
        {1, 2, 3, nothing} != {1, 2, 3, nothing}
        {1, nothing, 2, 3, nothing} != {1, nothing, 2, 3, nothing}
        {nothing, 0, 2, 3} != {nothing, 1, 2, 3}
        {1, 2, 3, nothing} != {1, 2, 0, nothing}
        {1, nothing, 2, 3, nothing} != {1, nothing, 2, 3, nothing}
        {1, 2} == {1, 2}
        {1.0, 2} == {1.0, 2}
        {1, 2.0} == {1, 2.0}
        {1, 2.0} != {1.0, 2}
        {1.0, 2} != {1, 2.0}
        {1, 2} != {1, 2, 3}
        {1, 2, 3, {}} == {1, 2, 3, {}}
        {1, 2, 3, 4, 5} != {1, 2, 3, 4}
        {1.0, 2.0, 3.0, 4.0} != {1, 2, 3, 4}
        {1, 2, 3, 4} != {1.0, 2.0, 3.0, 4.0}

#noinline
def testList_GetFromAToLast(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {}[0:] == {}
        {1}[1:] == {}
        {1}[0:] == {1}
        {1, 2}[2:] == {}
        {1, 2}[1:] == {2}
        {1, 2}[0:] == {1, 2}
        {}[-9223372036854775808:] : error_outOfRange
        {}[9223372036854775807:] : error_outOfRange
        {}[-1:] : error_outOfRange
        {}[1:] : error_outOfRange
        {}[2:] : error_outOfRange
        {1, 2, 3}[0:] == {1, 2, 3}
        {1, 2, 3}[1:] == {2, 3}
        {1, 2, 3}[2:] == {3}
        {1, 2, 3}[3:] == {}
        {1, 2, 3}[-9223372036854775808:] : error_outOfRange
        {1, 2, 3}[9223372036854775807:] : error_outOfRange
        {1, 2, 3}[-1:] : error_outOfRange
        {1, 2, 3}[4:] : error_outOfRange
        {1, 2, 3}[5:] : error_outOfRange

#noinline
def testList_GetFromFirstToA(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {}[:0] == {}
        {1}[:1] == {1}
        {1}[:0] == {}
        {1, 2}[:2] == {1, 2}
        {1, 2}[:1] == {1}
        {1, 2}[:0] == {}
        {}[:-9223372036854775808] : error_outOfRange
        {}[:9223372036854775807] : error_outOfRange
        {}[:-1] : error_outOfRange
        {}[:1] : error_outOfRange
        {}[:2] : error_outOfRange
        {1, 2, 3}[:0] == {}
        {1, 2, 3}[:1] == {1}
        {1, 2, 3}[:2] == {1, 2}
        {1, 2, 3}[:3] == {1, 2, 3}
        {1, 2, 3}[:-9223372036854775808] : error_outOfRange
        {1, 2, 3}[:9223372036854775807] : error_outOfRange
        {1, 2, 3}[:-1] : error_outOfRange
        {1, 2, 3}[:4] : error_outOfRange
        {1, 2, 3}[:5] : error_outOfRange

#noinline
def testList_GetRange(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {}[0:0] == {}
        {1}[0:0] == {}
        {1}[0:1] == {1}
        {1, 2.0}[0:0] == {}
        {1.0, 2}[0:1] == {1.0}
        {1.1, 2}[1:2] == {2}
        {1.2, 2}[0:2] == {1.2, 2}
        {1, 2}[2:2] == {}
        {}[-9223372036854775808:-9223372036854775808] : error_outOfRange
        {}[-9223372036854775808:-1] : error_outOfRange
        {}[-9223372036854775808:9223372036854775807] : error_outOfRange
        {}[9223372036854775807:9223372036854775807] : error_outOfRange
        {}[-1:-1] : error_outOfRange
        {}[-1:0] : error_outOfRange
        {}[0:-1] : error_outOfRange
        {}[0:1] : error_outOfRange
        {}[1:0] : error_outOfRange
        {}[1:1] : error_outOfRange
        {}[2:1] : error_outOfRange
        {}[2:0] : error_outOfRange
        {}[2:-1] : error_outOfRange
        {}[2:-9223372036854775808] : error_outOfRange
        {}[2:9223372036854775807] : error_outOfRange
        {1, 2.4, 'a'}[-9223372036854775808:-9223372036854775808] : error_outOfRange
        {1, 2.4, 'a'}[-9223372036854775808:-1] : error_outOfRange
        {1, 2.4, 'a'}[-9223372036854775808:9223372036854775807] : error_outOfRange
        {1, 2.4, 'a'}[9223372036854775807:9223372036854775807] : error_outOfRange
        {1, 2.4, 'a'}[-1:-1] : error_outOfRange
        {1, 2.4, 'a'}[-1:0] : error_outOfRange
        {1, 2.4, 'a'}[0:-1] : error_outOfRange
        {1, 2.4, 'a'}[1:0] : error_outOfRange
        {1, 2.4, 'a'}[2:1] : error_outOfRange
        {1, 2.4, 'a'}[2:0] : error_outOfRange
        {1, 2.4, 'a'}[2:-1] : error_outOfRange
        {1, 2.4, 'a'}[2:-9223372036854775808] : error_outOfRange
        {1, 2.4, 'a'}[2:9223372036854775807] : error_outOfRange
        {1, 2, 3 ,4 ,5 ,6, 7}[0:7] == {1, 2, 3 ,4 ,5 ,6, 7}
        {1, 2, 3 ,4 ,5 ,6, 7}[1:7] == {2, 3 ,4 ,5 ,6, 7}
        {1, 2, 3 ,4 ,5 ,6, 7}[0:6] == {1, 2, 3 ,4 ,5 ,6}
        {1, 2, 3 ,4 ,5 ,6, 7}[1:6] == {2, 3 ,4 ,5 ,6}
        {1, 2, 3 ,4 ,5 ,6, 7}[2:5] == {3 ,4 ,5}
        {1, 2, 3 ,4 ,5 ,6, 7}[4:4] == {}
        {1, 2, 3 ,4 ,5 ,6, 7}[7:7] == {}
        {1, 2, 3 ,4 ,5 ,6, 7}[8:8] : error_outOfRange

#noinline
def testList_GetItem(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {}[0] : error_outOfRange
        {}[1] : error_outOfRange
        {}[-1] : error_outOfRange
        {}[-9223372036854775808] : error_outOfRange
        {}[9223372036854775807] : error_outOfRange
        {1}[0] == 1
        {1}[1] : error_outOfRange
        {1}[-1] : error_outOfRange
        {1}[-9223372036854775808] : error_outOfRange
        {1}[9223372036854775807] : error_outOfRange
        {1, 2.2, '3'}[0] == 1
        {1, 2.2, '3'}[1] == 2.2
        {1, 2.2, '3'}[2] == '3'
        {1, 2.2, '3'}[3] : error_outOfRange
        {1, 2.2, '3'}[-1] : error_outOfRange
        {1, 2.2, '3'}[-9223372036854775808] : error_outOfRange
        {1, 2.2, '3'}[9223372036854775807] : error_outOfRange

#noinline
def testList_Add(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {} + {} == {}
        {} + {1} == {1}
        {1} + {} == {1}
        {} + {1, 2.3} == {1, 2.3}
        {1, 2.3} + {} == {1, 2.3}
        {1, 2.2} + {'3'} == {1, 2.2, '3'}
        {0} + {1.1, '2'} == {0, 1.1, '2'}
        {1.1, 2} + {3, 4.4} == {1.1, 2, 3, 4.4}
        {-1, '0'} + {1.2, "2"} == {-1, '0', 1.2, "2"}
        ({} + {nothing})[0].nothing?()
        ({1} + {nothing})[0] == 1
        ({1} + {nothing})[1].nothing?()
        ({nothing} + {nothing})[0].nothing?()
        ({nothing} + {nothing})[1].nothing?()
    var list1 List = {}
    var list2 List= {}
    var list3 List = {}
    var list4 List = {1, 2.2}
    var list5 List = {1, 2.2}
    var list6 List = {0}
    var list7 List = {}
    var list8 List = {1, 2.2}
    var list9 List = {-1, 0.1}
    var list10 List = {-1, 0.1}
    test: ok, errorsCoordinates
        (list1 += {}).nothing?()
        list1 == {}
        (list2 += {1}).nothing?()
        list2 == {1}
        (list3 += {1}).nothing?()
        list3 == {1}
        (list4 += {}).nothing?()
        list4 == {1, 2.2}
        (list5 += {'3'}).nothing?()
        list5 == {1, 2.2, '3'}
        (list6 += {1.1, '2'}).nothing?()
        list6 == {0, 1.1, '2'}
        (list7 += {1, 2.2}).nothing?()
        list7 == {1, 2.2}
        (list8 += {'3', "4"}).nothing?()
        list8 == {1, 2.2, '3', "4"}
        (list9 += {'1', "2"}).nothing?()
        list9 == {-1, 0.1, '1', "2"}
        (list10 += {nothing}).nothing?()
        list10[2].nothing?()
    list1 = {}.clone()
    list2 = {}.clone()
    list3 = {1}.clone()
    list4 = {1, 2.2}.clone()
    list5 = {1, 2.2}.clone()
    list6 = {0}.clone()
    list7 = {}.clone()
    list8 = {1, 2.2}.clone()
    list9 = {-1, 0.1}.clone()
    list10 = {-1, 0.1}.clone()
    test: ok, errorsCoordinates
        (list1 += {}).nothing?()
        list1 == {}
        (list2 += {1}).nothing?()
        list2 == {1}
        (list3 += {}).nothing?()
        list3 == {1}
        (list4 += {}).nothing?()
        list4 == {1, 2.2}
        (list5 += {'3'}).nothing?()
        list5 == {1, 2.2, '3'}
        (list6 += {1.1, '2'}).nothing?()
        list6 == {0, 1.1, '2'}
        (list7 += {1, 2.2}).nothing?()
        list7 == {1, 2.2}
        (list8 += {'3', "4"}).nothing?()
        list8 == {1, 2.2, '3', "4"}
        (list9 += {'1', "2"}).nothing?()
        list9 == {-1, 0.1, '1', "2"}
        (list10 += {nothing}).nothing?()
        list10[2].nothing?()

#noinline
def testList_StringWriter(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {}.toString() == "{}"
        {0}.toString() == "{0}"
        {1, 2, 3}.toString() == "{1, 2, 3}"
        {1.1, 1.2}.toString() == "{1.1, 1.2}"
        {{}, {1, 2, 3}, {[{}]}}.toString() == "{{}, {1, 2, 3}, {[{}]}}"

#noinline
def testList_Hashable(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {}.getHash().type?(Int)
        {1}.getHash().type?(Int)
        {}.getRandomizedHash().type?(Int)
        {1}.getRandomizedHash().type?(Int)
        {}.getHash() == {}.getHash()
        {1}.getHash() == {1}.getHash()
        {}.getRandomizedHash() == {}.getRandomizedHash()
        {1}.getRandomizedHash() == {1}.getRandomizedHash()

#noinline
def testList_Long(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {}.length~() == 0
        {123}.length~() == 1
        {10, 23}.length~() == 2
        {10, 23, 0}.length~() == 3

#noinline
def testList_Empty(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        List.createEmpty() == {}

#noinline
def testList_Container(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {}.addItem$({}) == {{}}
        {}.addItem$(1) == {1}
        {{1, 2.2}}.addItem$({}) == {{1, 2.2}, {}}
        {1}.addItem$(2.2) == {1, 2.2}
        {1.1, 2}.addItem$('3') == {1.1, 2, '3'}
        {1, 2}.addItem$(nothing)[2].nothing?()
    var list1 List = {}
    var list2 List = {}
    var list3 List = {{1, 2}}
    var list4 List = {1}
    var list5 List = {1, 2.3}
    var list6 List = {1, 2}
    test: ok, errorsCoordinates
        list1.addItem({}).nothing?()
        list1 == {{}}
        list2.addItem(1).nothing?()
        list2 == {1}
        list3.addItem({}).nothing?()
        list3 == {{1, 2}, {}}
        list4.addItem(2.2).nothing?()
        list4 == {1, 2.2}
        list5.addItem('3').nothing?()
        list5 == {1, 2.3, '3'}
        list6.addItem(nothing).nothing?()
        list6[2].nothing?()
    list1 = {}.clone()
    list2 = {}.clone()
    list3 = {{1, 2}}.clone()
    list4 = {1}.clone()
    list5 = {1, 2.3}.clone()
    list6 = {1, 2}.clone()
    test: ok, errorsCoordinates
        list1.addItem({}).nothing?()
        list1 == {{}}
        list2.addItem(1).nothing?()
        list2 == {1}
        list3.addItem({}).nothing?()
        list3 == {{1, 2}, {}}
        list4.addItem(2.2).nothing?()
        list4 == {1, 2.2}
        list5.addItem('3').nothing?()
        list5 == {1, 2.3, '3'}
        list6.addItem(nothing).nothing?()
        list6[2].nothing?()
    list1 = {1}
    list2 = {1, 2.2}
    list3 = {1, 2.2}
    list4 = {1, 2}
    list5 = {1, 2.2, '3'}
    list6 = {1}
    test: ok, errorsCoordinates
        list1.setItem(0, 1.0).nothing?()
        list1 == {1.0}
        list2.setItem(0, '1').nothing?()
        list2 == {'1', 2.2}
        list3.setItem(1, 2).nothing?()
        list3 == {1, 2}
        list4.setItem(1, '2').nothing?()
        list4 == {1, '2'}
        list5.setItem(2, "3").nothing?()
        list5 == {1, 2.2, "3"}
        list6.setItem(0, nothing).nothing?()
        list6[0].nothing?()
        list5.setItem(-1, 1) : error_outOfRange
        list5 == {1, 2.2, "3"}
        list5.setItem(4, 1) : error_outOfRange
        list5 == {1, 2.2, "3"}
        list5.setItem(-9223372036854775808, 1) : error_outOfRange
        list5 == {1, 2.2, "3"}
        list5.setItem(9223372036854775807, 1) : error_outOfRange
        list5 == {1, 2.2, "3"}
        list1.setItem(-1, 1) : error_outOfRange
        list1 == {1.0}
        list1.setItem(1, 1) : error_outOfRange
        list1 == {1.0}
        list1.setItem(-9223372036854775808, 1) : error_outOfRange
        list1 == {1.0}
        list1.setItem(9223372036854775807, 1) : error_outOfRange
        list1 == {1.0}
        list2.setItem(-1, 1) : error_outOfRange
        list2 == {'1', 2.2}
        list2.setItem(2, 1) : error_outOfRange
        list2 == {'1', 2.2}
        list2.setItem(-9223372036854775808, 1) : error_outOfRange
        list2 == {'1', 2.2}
        list2.setItem(9223372036854775807, 1) : error_outOfRange
        list2 == {'1', 2.2}
    list1 = {1}.clone()
    list2 = {1, 2.2}.clone()
    list3 = {1, 2.2}.clone()
    list4 = {1, 2}.clone()
    list5 = {1, 2.2, '3'}.clone()
    list6 = {1}.clone()
    test: ok, errorsCoordinates
        list1.setItem(0, 1.0).nothing?()
        list1 == {1.0}
        list2.setItem(0, '1').nothing?()
        list2 == {'1', 2.2}
        list3.setItem(1, 2).nothing?()
        list3 == {1, 2}
        list4.setItem(1, '2').nothing?()
        list4 == {1, '2'}
        list5.setItem(2, "3").nothing?()
        list5 == {1, 2.2, "3"}
        list6.setItem(0, nothing).nothing?()
        list6[0].nothing?()
        list5.setItem(-1, 1) : error_outOfRange
        list5 == {1, 2.2, "3"}
        list5.setItem(4, 1) : error_outOfRange
        list5 == {1, 2.2, "3"}
        list5.setItem(-9223372036854775808, 1) : error_outOfRange
        list5 == {1, 2.2, "3"}
        list5.setItem(9223372036854775807, 1) : error_outOfRange
        list5 == {1, 2.2, "3"}
        list1.setItem(-1, 1) : error_outOfRange
        list1 == {1.0}
        list1.setItem(1, 1) : error_outOfRange
        list1 == {1.0}
        list1.setItem(-9223372036854775808, 1) : error_outOfRange
        list1 == {1.0}
        list1.setItem(9223372036854775807, 1) : error_outOfRange
        list1 == {1.0}
        list2.setItem(-1, 1) : error_outOfRange
        list2 == {'1', 2.2}
        list2.setItem(2, 1) : error_outOfRange
        list2 == {'1', 2.2}
        list2.setItem(-9223372036854775808, 1) : error_outOfRange
        list2 == {'1', 2.2}
        list2.setItem(9223372036854775807, 1) : error_outOfRange
        list2 == {'1', 2.2}

#noinline
def testList_Put(write ok Int, write errorsCoordinates List)
    var l1 List = {}
    var l2 List = {1}
    var l3 List = {1, 2, 3, 4}
    test: ok, errorsCoordinates
        l1.put(0, 2) : error_outOfRange
        l1 == {}
        l1.put(1, 2) : error_outOfRange
        l1 == {}
        l1.put(9223372036854775807, 2) : error_outOfRange
        l1 == {}
        l1.put(-1, 2) : error_outOfRange
        l1 == {}
        l1.put(-9223372036854775808, 2) : error_outOfRange
        l1 == {}
        l2.put(0, '2') == 1
        l2 == {'2'}
        l2.put(0, 3) == '2'
        l2 == {3}
        l2.put(1, 0) : error_outOfRange
        l2 == {3}
        l2.put(9223372036854775807, 0) : error_outOfRange
        l2 == {3}
        l2.put(-1, 0) : error_outOfRange
        l2 == {3}
        l2.put(-9223372036854775808, 0) : error_outOfRange
        l2 == {3}
        l3.put(0, '-') == 1
        l3 == {'-', 2, 3, 4}
        l3.put(1, 3) == 2
        l3 == {'-', 3, 3, 4}
        l3.put(3, '0') == 4
        l3 == {'-', 3, 3, '0'}
        l3.put(4, 1) : error_outOfRange
        l3 == {'-', 3, 3, '0'}
        l3.put(9223372036854775807, 1) : error_outOfRange
        l3 == {'-', 3, 3, '0'}
        l3.put(-1, 1) : error_outOfRange
        l3 == {'-', 3, 3, '0'}
        l3.put(-9223372036854775808, 1) : error_outOfRange
        l3 == {'-', 3, 3, '0'}

#noinline
def testList_Iterator(write ok Int, write errorsCoordinates List)
    var allOk Bool = true
    try
        parse _, _ = {}
            allOk = false
    catch
        allOk = false
    test: ok, errorsCoordinates
        allOk
    allOk = false
    var count Int = 0
    try
        parse :(parse) index, item = {1, 2, 3, 4, 5}
            count++
            allOk = index.inRange?(0, 5) && item.inRange?(1, 6)
            if !allOk
                end parse
    catch
        count = 0
    test: ok, errorsCoordinates
        allOk
        count == 5

#noinline
def testList_Swap(write ok Int, write errorsCoordinates List)
    var a1 List = {}
    var a2 List = {1}
    var a3 List = {1, '2'}
    var a4 List = {1, '2', "3"}
    var a5 List = {1, '2', "3", [4], 5}
    test: ok, errorsCoordinates
        a1.swap(0, 0) : error_outOfRange
        a1 == {}
        a1.swap(-1, 0) : error_outOfRange
        a1 == {}
        a1.swap(-1, -1) : error_outOfRange
        a1 == {}
        a1.swap(0, -1) : error_outOfRange
        a1 == {}
        a1.swap(9223372036854775807, 0) : error_outOfRange
        a1 == {}
        a1.swap(0, 9223372036854775807) : error_outOfRange
        a1 == {}
        a1.swap(0, 1) : error_outOfRange
        a1 == {}
        a1.swap(1, 1) : error_outOfRange
        a1 == {}
        a1.swap(1, 0) : error_outOfRange
        a1 == {}
        a1.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a1 == {}
        a2.swap(0, 0).nothing?()
        a2 == {1}
        a2.swap(1, 1) : error_outOfRange
        a2 == {1}
        a2.swap(-1, 0) : error_outOfRange
        a2 == {1}
        a2.swap(-1, -1) : error_outOfRange
        a2 == {1}
        a2.swap(0, -1) : error_outOfRange
        a2 == {1}
        a2.swap(9223372036854775807, 0) : error_outOfRange
        a2 == {1}
        a2.swap(0, 9223372036854775807) : error_outOfRange
        a2 == {1}
        a2.swap(0, 1) : error_outOfRange
        a2 == {1}
        a2.swap(1, 0) : error_outOfRange
        a2 == {1}
        a2.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a2 == {1}
        a3.swap(0, 0).nothing?()
        a3 == {1, '2'}
        a3.swap(1, 1).nothing?()
        a3 == {1, '2'}
        a3.swap(0, 1).nothing?()
        a3 == {'2', 1}
        a3.swap(1, 0).nothing?()
        a3 == {1, '2'}
        a3.swap(2, 2) : error_outOfRange
        a3 == {1, '2'}
        a3.swap(-1, 0) : error_outOfRange
        a3 == {1, '2'}
        a3.swap(-1, -1) : error_outOfRange
        a3 == {1, '2'}
        a3.swap(0, -1) : error_outOfRange
        a3 == {1, '2'}
        a3.swap(9223372036854775807, 0) : error_outOfRange
        a3 == {1, '2'}
        a3.swap(0, 9223372036854775807) : error_outOfRange
        a3 == {1, '2'}
        a3.swap(0, 2) : error_outOfRange
        a3 == {1, '2'}
        a3.swap(2, 0) : error_outOfRange
        a3 == {1, '2'}
        a3.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a3 == {1, '2'}
        a4.swap(0, 0).nothing?()
        a4 == {1, '2', "3"}
        a4.swap(1, 1).nothing?()
        a4 == {1, '2', "3"}
        a4.swap(2, 2).nothing?()
        a4 == {1, '2', "3"}
        a4.swap(0, 1).nothing?()
        a4 == {'2', 1, "3"}
        a4.swap(1, 0).nothing?()
        a4 == {1, '2', "3"}
        a4.swap(1, 2).nothing?()
        a4 == {1, "3", '2'}
        a4.swap(0, 2).nothing?()
        a4 == {'2', "3", 1}
        a4.swap(2, 0).nothing?()
        a4 == {1, "3", '2'}
        a4.swap(3, 3) : error_outOfRange
        a4 == {1, "3", '2'}
        a4.swap(-1, 0) : error_outOfRange
        a4 == {1, "3", '2'}
        a4.swap(-1, -1) : error_outOfRange
        a4 == {1, "3", '2'}
        a4.swap(0, -1) : error_outOfRange
        a4 == {1, "3", '2'}
        a4.swap(9223372036854775807, 0) : error_outOfRange
        a4 == {1, "3", '2'}
        a4.swap(0, 9223372036854775807) : error_outOfRange
        a4 == {1, "3", '2'}
        a4.swap(0, 3) : error_outOfRange
        a4 == {1, "3", '2'}
        a4.swap(3, 0) : error_outOfRange
        a4 == {1, "3", '2'}
        a4.swap(3, 1) : error_outOfRange
        a4 == {1, "3", '2'}
        a4.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a4 == {1, "3", '2'}
        a5.swap(0, 0).nothing?()
        a5 == {1, '2', "3", [4], 5}
        a5.swap(1, 1).nothing?()
        a5 == {1, '2', "3", [4], 5}
        a5.swap(2, 2).nothing?()
        a5 == {1, '2', "3", [4], 5}
        a5.swap(3, 3).nothing?()
        a5 == {1, '2', "3", [4], 5}
        a5.swap(4, 4).nothing?()
        a5 == {1, '2', "3", [4], 5}
        a5.swap(0, 1).nothing?()
        a5 == {'2', 1, "3", [4], 5}
        a5.swap(1, 0).nothing?()
        a5 == {1, '2', "3", [4], 5}
        a5.swap(1, 2).nothing?()
        a5 == {1, "3", '2', [4], 5}
        a5.swap(0, 2).nothing?()
        a5 == {'2', "3", 1, [4], 5}
        a5.swap(2, 0).nothing?()
        a5 == {1, "3", '2', [4], 5}
        a5.swap(0, 4).nothing?()
        a5 == {5, "3", '2', [4], 1}
        a5.swap(4, 0).nothing?()
        a5 == {1, "3", '2', [4], 5}
        a5.swap(5, 5) : error_outOfRange
        a5 == {1, "3", '2', [4], 5}
        a5.swap(-1, 0) : error_outOfRange
        a5 == {1, "3", '2', [4], 5}
        a5.swap(-1, -1) : error_outOfRange
        a5 == {1, "3", '2', [4], 5}
        a5.swap(0, -1) : error_outOfRange
        a5 == {1, "3", '2', [4], 5}
        a5.swap(9223372036854775807, 0) : error_outOfRange
        a5 == {1, "3", '2', [4], 5}
        a5.swap(0, 9223372036854775807) : error_outOfRange
        a5 == {1, "3", '2', [4], 5}
        a5.swap(0, 5) : error_outOfRange
        a5 == {1, "3", '2', [4], 5}
        a5.swap(5, 0) : error_outOfRange
        a5 == {1, "3", '2', [4], 5}
        a5.swap(5, 1) : error_outOfRange
        a5 == {1, "3", '2', [4], 5}
        a5.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a5 == {1, "3", '2', [4], 5}
    a1 = {"1".clone(), "2".clone(), "3".clone()}
    test: ok, errorsCoordinates
        a1.swap(0, 2).nothing?()
        a1[0].unsafe_getI64(0) == 2
        a1[1].unsafe_getI64(0) == 2
        a1[2].unsafe_getI64(0) == 2
        a1.swap(1, 0).nothing?()
        a1[0].unsafe_getI64(0) == 2
        a1[1].unsafe_getI64(0) == 2
        a1[2].unsafe_getI64(0) == 2
        a1.swap(0, 3) : error_outOfRange
        a1[0].unsafe_getI64(0) == 2
        a1[1].unsafe_getI64(0) == 2
        a1[2].unsafe_getI64(0) == 2
        a1.swap(-1, 0) : error_outOfRange
        a1[0].unsafe_getI64(0) == 2
        a1[1].unsafe_getI64(0) == 2
        a1[2].unsafe_getI64(0) == 2
        a1.swap(0, -1) : error_outOfRange
        a1[0].unsafe_getI64(0) == 2
        a1[1].unsafe_getI64(0) == 2
        a1[2].unsafe_getI64(0) == 2
    a1 = {1, '2', "3"}.clone()
    a2 = a1
    test: ok, errorsCoordinates
        a1.swap(0, 2).nothing?()
        a1 == {"3", '2', 1}
        a2 == {1, '2', "3"}
        a1.swap(0, -1) : error_outOfRange
        a1 == {"3", '2', 1}
        a2 == {1, '2', "3"}
        a1.swap(0, 3) : error_outOfRange
        a1 == {"3", '2', 1}
        a2 == {1, '2', "3"}
        a1.swap(3, 0) : error_outOfRange
        a1 == {"3", '2', 1}
        a2 == {1, '2', "3"}

#noinline
def testList_Delete$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {}.delete$(0, 0) == {}
        {}.delete$(1, 0) : error_outOfRange
        {}.delete$(9223372036854775807, 0) : error_outOfRange
        {}.delete$(-1, 0) : error_outOfRange
        {}.delete$(-9223372036854775808, 0) : error_outOfRange
        {}.delete$(0, 1) : error_outOfRange
        {}.delete$(0, 9223372036854775807) : error_outOfRange
        {}.delete$(0, -1) : error_outOfRange
        {}.delete$(0, -9223372036854775808) : error_outOfRange
        {1}.delete$(0, 0) == {1}
        {1}.delete$(1, 0) == {1}
        {1}.delete$(0, 1) == {}
        {1}.delete$(1, 1) : error_outOfRange
        {1}.delete$(9223372036854775807, 0) : error_outOfRange
        {1}.delete$(-1, 0) : error_outOfRange
        {1}.delete$(-9223372036854775808, 0) : error_outOfRange
        {1}.delete$(0, 2) : error_outOfRange
        {1}.delete$(0, 9223372036854775807) : error_outOfRange
        {1}.delete$(0, -1) : error_outOfRange
        {1}.delete$(0, -9223372036854775808) : error_outOfRange
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(0, 0) == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(0, 1) == {2, 3, 4, 5, 6, 7, 8, 9}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(0, 2) == {3, 4, 5, 6, 7, 8, 9}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(0, 9) == {}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(0, 10) : error_outOfRange
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(1, 0) == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(1, 1) == {1, 3, 4, 5, 6, 7, 8, 9}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(1, 2) == {1, 4, 5, 6, 7, 8, 9}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(1, 8) == {1}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(1, 9) : error_outOfRange
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(4, 0) == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(4, 1) == {1, 2, 3, 4, 6, 7, 8, 9}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(4, 2) == {1, 2, 3, 4, 7, 8, 9}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(4, 5) == {1, 2, 3, 4}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(4, 6) : error_outOfRange
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(8, 0) == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(8, 1) == {1, 2, 3, 4, 5, 6, 7, 8}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(8, 2) : error_outOfRange
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(9, 0) == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}.delete$(9, 1) : error_outOfRange
    var l1 List = {1}.clone()
    var l2 List = {2}.clone()
    var l3 List = {3}.clone()
    var l4 List = {l1, l2, l3}
    var l5 List = {l1, l2, l3}.clone()
    var l6 List = l4.delete$(1, 1)
    var l7 List = l5.delete$(1, 1)
    test: ok, errorsCoordinates
        l6 == {{1}, {3}}
        l7 == {{1}, {3}}
        l1.unsafe_getI64(0) == 5
        l2.unsafe_getI64(0) == 3
        l3.unsafe_getI64(0) == 5
        l4.unsafe_getI64(0) == 1
        l5.unsafe_getI64(0) == 1
        l6.unsafe_getI64(0) == 1
        l7.unsafe_getI64(0) == 1

#noinline
def testList_Delete(write ok Int, write errorsCoordinates List)
    var c1 List = {}
    var c2 List = {1}
    var c3 List = {1, 2, 3, 4, 5, 6, 7, 8, 9}
    var c4 List = {1, 2, 3, 4, 5, 6, 7, 8, 9}
    var c5 List = {1, 2, 3, 4, 5, 6, 7, 8, 9}.clone()
    var c6 List = {1, 2, 3, 4, 5, 6, 7, 8, 9}.clone()
    var c7 List = c6
    test: ok, errorsCoordinates
        c1.delete(0, 0).nothing?()
        c1 == {}
        c1.delete(1, 0) : error_outOfRange
        c1 == {}
        c1.delete(9223372036854775807, 0) : error_outOfRange
        c1 == {}
        c1.delete(-1, 0) : error_outOfRange
        c1 == {}
        c1.delete(-9223372036854775808, 0) : error_outOfRange
        c1 == {}
        c1.delete(0, 1) : error_outOfRange
        c1 == {}
        c1.delete(0, 9223372036854775807) : error_outOfRange
        c1 == {}
        c1.delete(0, -1) : error_outOfRange
        c1 == {}
        c1.delete(0, -9223372036854775808) : error_outOfRange
        c1 == {}
        c2.delete(0, 0).nothing?()
        c2 == {1}
        c2.delete(1, 0).nothing?()
        c2 == {1}
        c2.delete(0, 2) : error_outOfRange
        c2 == {1}
        c2.delete(0, 9223372036854775807) : error_outOfRange
        c2 == {1}
        c2.delete(0, -1) : error_outOfRange
        c2 == {1}
        c2.delete(0, -9223372036854775807) : error_outOfRange
        c2 == {1}
        c2.delete(2, 0) : error_outOfRange
        c2 == {1}
        c2.delete(9223372036854775807, 0) : error_outOfRange
        c2 == {1}
        c2.delete(-1, 0) : error_outOfRange
        c2 == {1}
        c2.delete(-9223372036854775808, 0) : error_outOfRange
        c2 == {1}
        c3.delete(0, 10) : error_outOfRange
        c3 == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        c3.delete(1, 9) : error_outOfRange
        c3 == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        c3.delete(4, 6) : error_outOfRange
        c3 == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        c3.delete(9, 1) : error_outOfRange
        c3 == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        c3.delete(0, 0).nothing?()
        c3 == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        c3.delete(0, 1).nothing?()
        c3 == {2, 3, 4, 5, 6, 7, 8, 9}
        c3.delete(0, 2).nothing?()
        c3 == {4, 5, 6, 7, 8, 9}
        c3.delete(0, 6).nothing?()
        c3 == {}
        c4.delete(1, 0).nothing?()
        c4 == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        c4.delete(1, 1).nothing?()
        c4 == {1, 3, 4, 5, 6, 7, 8, 9}
        c4.delete(1, 2).nothing?()
        c4 == {1, 5, 6, 7, 8, 9}
        c4.delete(1, 5).nothing?()
        c4 == {1}
        c5.delete(4, 0).nothing?()
        c5 == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        c5.delete(4, 1).nothing?()
        c5 == {1, 2, 3, 4, 6, 7, 8, 9}
        c5.delete(4, 2).nothing?()
        c5 == {1, 2, 3, 4, 8, 9}
        c5.delete(4, 2).nothing?()
        c5 == {1, 2, 3, 4}
        c6.delete(8, 0).nothing?()
        c6 == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        c6.delete(8, 1).nothing?()
        c6 == {1, 2, 3, 4, 5, 6, 7, 8}
        c6.delete(8, 0).nothing?()
        c6 == {1, 2, 3, 4, 5, 6, 7, 8}
        c7 == {1, 2, 3, 4, 5, 6, 7, 8, 9}
    var l1 List = {1}.clone()
    var l2 List = {2}.clone()
    var l3 List = {3}.clone()
    var l4 List = {l1, l2, l3}
    var l5 List = {l1, l2, l3}.clone()
    var l6 List = {l1, l2, l3}.clone()
    var l7 List = l6
    var l8 List = l2
    test: ok, errorsCoordinates
        l4.delete(1, 1).nothing?()
        l5.delete(1, 1).nothing?()
        l6.delete(1, 1).nothing?()
        l7.delete(1, 1).nothing?()
        l4 == {{1}, {3}}
        l5 == {{1}, {3}}
        l6 == {{1}, {3}}
        l7 == {{1}, {3}}
        l1.unsafe_getI64(0) == 5
        l2.unsafe_getI64(0) == 2
        l3.unsafe_getI64(0) == 5
        l4.unsafe_getI64(0) == 1
        l5.unsafe_getI64(0) == 1
        l6.unsafe_getI64(0) == 1
        l7.unsafe_getI64(0) == 1
        l8.unsafe_getI64(0) == 2
        l8 == l2

#noinline
def testList_Insert$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {}.insert$(1, 1) : error_outOfRange
        {}.insert$(9223372036854775807, 1) : error_outOfRange
        {}.insert$(-1, 1) : error_outOfRange
        {}.insert$(-9223372036854775808, 1) : error_outOfRange
        {}.insert$(0, 1) == {1}
        {1}.insert$(2, 1) : error_outOfRange
        {1}.insert$(9223372036854775807, 1) : error_outOfRange
        {1}.insert$(-1, 1) : error_outOfRange
        {1}.insert$(-9223372036854775808, 1) : error_outOfRange
        {1}.insert$(0, 2) == {2, 1}
        {1}.insert$(1, 2) == {1, 2}
        {1, 2, 3, 4, 5}.insert$(0, 'a') == {'a', 1, 2, 3, 4, 5}
        {1, 2, 3, 4, 5}.insert$(2, 'a') == {1, 2, 'a', 3, 4, 5}
        {1, 2, 3, 4, 5}.insert$(3, 'a') == {1, 2, 3, 'a', 4, 5}
        {1, 2, 3, 4, 5}.insert$(5, 'a') == {1, 2, 3, 4, 5, 'a'}
    var l1 List = {1}.clone()
    var l2 List = {2}.clone()
    var l3 List = {3}.clone()
    var l4 List = {l1, l2, l3}
    var l5 List = {l1, l2, l3}.clone()
    var l6 List = l4.insert$(3, l1)
    var l7 List = l4.insert$(0, l1)
    var l8 List = l5.insert$(3, l1)
    var l9 List = l5.insert$(0, l1)
    test: ok, errorsCoordinates
        l6 == {{1}, {2}, {3}, {1}}
        l7 == {{1}, {1}, {2}, {3}}
        l8 == {{1}, {2}, {3}, {1}}
        l9 == {{1}, {1}, {2}, {3}}
        l1.unsafe_getI64(0) == 11
        l2.unsafe_getI64(0) == 7
        l3.unsafe_getI64(0) == 7
        l4.unsafe_getI64(0) == 1
        l5.unsafe_getI64(0) == 1
        l6.unsafe_getI64(0) == 1
        l7.unsafe_getI64(0) == 1
        l8.unsafe_getI64(0) == 1
        l9.unsafe_getI64(0) == 1

#noinline
def testList_Insert(write ok Int, write errorsCoordinates List)
    var c1 List = {}
    var c2 List = {1}
    test: ok, errorsCoordinates
        c1.insert(1, 1) : error_outOfRange
        c1 == {}
        c1.insert(9223372036854775807, 1) : error_outOfRange
        c1 == {}
        c1.insert(-1, 1) : error_outOfRange
        c1 == {}
        c1.insert(-9223372036854775808, 1) : error_outOfRange
        c1 == {}
        c1.insert(0, 1).nothing?()
        c1 == {1}
        c1.insert(2, 1) : error_outOfRange
        c1 == {1}
        c1.insert(9223372036854775807, 1) : error_outOfRange
        c1 == {1}
        c1.insert(-1, 1) : error_outOfRange
        c1 == {1}
        c1.insert(-9223372036854775808, 1) : error_outOfRange
        c1 == {1}
        c1.insert(0, 2).nothing?()
        c1 == {2, 1}
        c2.insert(1, 2).nothing?()
        c2 == {1, 2}
        c2.insert(0, 'a').nothing?()
        c2 == {'a', 1, 2}
        c2.insert(2, 'f').nothing?()
        c2 == {'a', 1, 'f', 2}
        c2.insert(1, 3).nothing?()
        c2 == {'a', 3,  1, 'f', 2}
        c2.insert(3, 1.0).nothing?()
        c2 == {'a', 3,  1, 1.0, 'f', 2}
        c2.insert(7, 1) : error_outOfRange
        c2 == {'a', 3,  1, 1.0, 'f', 2}
        c2.insert(9223372036854775807, 1) : error_outOfRange
        c2 == {'a', 3,  1, 1.0, 'f', 2}
        c2.insert(-1, 1) : error_outOfRange
        c2 == {'a', 3,  1, 1.0, 'f', 2}
        c2.insert(-9223372036854775808, 1) : error_outOfRange
        c2 == {'a', 3,  1, 1.0, 'f', 2}
    var l1 List = {1}.clone()
    var l2 List = {2}.clone()
    var l3 List = {3}.clone()
    var l4 List = {l1, l2, l3}
    var l5 List = {l1, l2, l3}.clone()
    var l6 List = {l1, l2, l3}.clone()
    var l7 List = l6
    var l8 List = l2
    test: ok, errorsCoordinates
        l4.insert(0, l1).nothing?()
        l4.insert(4, l1).nothing?()
        l5.insert(0, l1).nothing?()
        l5.insert(4, l1).nothing?()
        l6.insert(0, l1).nothing?()
        l6.insert(4, l1).nothing?()
        l7.insert(0, l1).nothing?()
        l7.insert(4, l1).nothing?()
        l4 == {{1}, {1}, {2}, {3}, {1}}
        l5 == {{1}, {1}, {2}, {3}, {1}}
        l6 == {{1}, {1}, {2}, {3}, {1}}
        l7 == {{1}, {1}, {2}, {3}, {1}}
        l1.unsafe_getI64(0) == 13
        l2.unsafe_getI64(0) == 6
        l3.unsafe_getI64(0) == 5
        l4.unsafe_getI64(0) == 1
        l5.unsafe_getI64(0) == 1
        l6.unsafe_getI64(0) == 1
        l7.unsafe_getI64(0) == 1
        l8.unsafe_getI64(0) == 6
        l8 == l2

#noinline
def testList_InsertPart$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {}.insertPart$(1, {1}) : error_outOfRange
        {}.insertPart$(9223372036854775807, {1}) : error_outOfRange
        {}.insertPart$(-1, {1}) : error_outOfRange
        {}.insertPart$(-9223372036854775808, {1}) : error_outOfRange
        {}.insertPart$(0, {}) == {}
        {}.insertPart$(0, {1}) == {1}
        {}.insertPart$(0, {1, 2, 3}) == {1, 2, 3}
        {1}.insertPart$(2, {1}) : error_outOfRange
        {1}.insertPart$(9223372036854775807, {1}) : error_outOfRange
        {1}.insertPart$(-1, {1}) : error_outOfRange
        {1}.insertPart$(-9223372036854775808, {1}) : error_outOfRange
        {1}.insertPart$(0, {}) == {1}
        {1}.insertPart$(1, {}) == {1}
        {1}.insertPart$(0, {2}) == {2, 1}
        {1}.insertPart$(0, {2, 3}) == {2, 3, 1}
        {1}.insertPart$(1, {1, 3}) == {1, 1, 3}
        {1, 2, 3, 4, 5}.insertPart$(0, {-1, -2}) == {-1, -2, 1, 2, 3, 4, 5}
        {1, 2, 3, 4, 5}.insertPart$(2, {-1, -2}) == {1, 2, -1, -2, 3, 4, 5}
        {1, 2, 3, 4, 5}.insertPart$(3, {-1, -2}) == {1, 2, 3, -1, -2, 4, 5}
        {1, 2, 3, 4, 5}.insertPart$(5, {-1, -2}) == {1, 2, 3, 4, 5, -1, -2}
    var l1 List = {1}.clone()
    var l2 List = {2}.clone()
    var l3 List = {3}.clone()
    var l4 List = {l1, l2, l3}
    var l5 List = {l1, l2, l3}.clone()
    var l6 List = l4.insertPart$(2, l5)
    var l7 List = l4.insertPart$(1, l5)
    var l8 List = l5.insertPart$(2, l4)
    var l9 List = l5.insertPart$(1, l4)
    test: ok, errorsCoordinates
        l6 == {{1}, {2}, {1}, {2}, {3}, {3}}
        l7 == {{1}, {1}, {2}, {3}, {2}, {3}}
        l8 == {{1}, {2}, {1}, {2}, {3}, {3}}
        l9 == {{1}, {1}, {2}, {3}, {2}, {3}}
        l1.unsafe_getI64(0) == 11
        l2.unsafe_getI64(0) == 11
        l3.unsafe_getI64(0) == 11
        l4.unsafe_getI64(0) == 1
        l5.unsafe_getI64(0) == 1
        l6.unsafe_getI64(0) == 1
        l7.unsafe_getI64(0) == 1
        l8.unsafe_getI64(0) == 1
        l9.unsafe_getI64(0) == 1

#noinline
def testList_InsertPart(write ok Int, write errorsCoordinates List)
    var c1 List = {}
    var c2 List = {1}
    test: ok, errorsCoordinates
        c1.insertPart(1, {1}) : error_outOfRange
        c1 == {}
        c1.insertPart(9223372036854775807, {1}) : error_outOfRange
        c1 == {}
        c1.insertPart(-1, {1}) : error_outOfRange
        c1 == {}
        c1.insertPart(-9223372036854775808, {1}) : error_outOfRange
        c1 == {}
        c1.insertPart(0, {}).nothing?()
        c1 == {}
        c1.insertPart(0, {1}).nothing?()
        c1 == {1}
        c1.insertPart(2, {1}) : error_outOfRange
        c1 == {1}
        c1.insertPart(9223372036854775807, {1}) : error_outOfRange
        c1 == {1}
        c1.insertPart(-1, {1}) : error_outOfRange
        c1 == {1}
        c1.insertPart(-9223372036854775808, {1}) : error_outOfRange
        c1 == {1}
        c1.insertPart(0, {}).nothing?()
        c1 == {1}
        c1.insertPart(1, {}).nothing?()
        c1 == {1}
        c1.insertPart(0, {2}).nothing?()
        c1 == {2, 1}
        c2.insertPart(1, {2}).nothing?()
        c2 == {1, 2}
        c2.insertPart(0, {2, 3}).nothing?()
        c2 == {2, 3, 1, 2}
        c2.insertPart(1, {1, 3}).nothing?()
        c2 == {2, 1, 3, 3, 1, 2}
        c2.insertPart(2, {}).nothing?()
        c2 == {2, 1, 3, 3, 1, 2}
        c2.insertPart(3, {}).nothing?()
        c2 == {2, 1, 3, 3, 1, 2}
        c2.insertPart(0, {}).nothing?()
        c2 == {2, 1, 3, 3, 1, 2}
        c2.insertPart(6, {}).nothing?()
        c2 == {2, 1, 3, 3, 1, 2}
        c2.insertPart(6, {-1, -2}).nothing?()
        c2 == {2, 1, 3, 3, 1, 2, -1, -2}
    var l1 List = {1}.clone()
    var l2 List = {2}.clone()
    var l3 List = {3}.clone()
    var l4 List = {l1, l2, l3}
    var l5 List = {l1, l2, l3}.clone()
    var l6 List = {l1, l2, l3}.clone()
    var l7 List = l6
    var l8 List = l2
    test: ok, errorsCoordinates
        l4.insertPart(2, l5).nothing?()
        l5.insertPart(2, l6).nothing?()
        l6.insertPart(2, l4).nothing?()
        l7.insertPart(2, l4).nothing?()
        l4 == {{1}, {2}, {1}, {2}, {3}, {3}}
        l5 == {{1}, {2}, {1}, {2}, {3}, {3}}
        l6 == {{1}, {2}, {1}, {2}, {1}, {2}, {3}, {3}, {3}}
        l7 == {{1}, {2}, {1}, {2}, {1}, {2}, {3}, {3}, {3}}
        l1.unsafe_getI64(0) == 11
        l2.unsafe_getI64(0) == 12
        l3.unsafe_getI64(0) == 11
        l4.unsafe_getI64(0) == 1
        l5.unsafe_getI64(0) == 1
        l6.unsafe_getI64(0) == 1
        l7.unsafe_getI64(0) == 1
        l8.unsafe_getI64(0) == 12
        l8 == l2

#noinline
def testList_Repeat(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        List.repeat(12, 0) == {}
        List.repeat(12, 1) == {12}
        List.repeat(12, 2) == {12, 12}
        List.repeat(12, 10) == {12, 12, 12, 12, 12, 12, 12, 12, 12, 12}
        List.repeat(12, 11) == {12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12}
        List.repeat(12, 16) == {12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12}
        List.repeat(12, -1) : error_outOfRange
        List.repeat(12, -2) : error_outOfRange
        List.repeat(12, -9223372036854775808) : error_outOfRange
    var l1 List = {1}.clone()
    test: ok, errorsCoordinates
        l1.unsafe_getI64(0) == 1
    var l2 List = List.repeat(l1, 0)
    test: ok, errorsCoordinates
        l1.unsafe_getI64(0) == 1
    var l3 List = List.repeat(l1, 3)
    test: ok, errorsCoordinates
        l1.unsafe_getI64(0) == 4
        l2 == {}
        l3 == {{1}, {1}, {1}}

#noinline
def testList_RepeatPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {}.repeatPart(0) == {}
        {}.repeatPart(120) == {}
        {}.repeatPart(-1) : error_outOfRange
        {}.repeatPart(-9223372036854775808) : error_outOfRange
        {13}.repeatPart(0) == {}
        {13}.repeatPart(1) == {13}
        {13}.repeatPart(2) == {13, 13}
        {13}.repeatPart(10) == {13, 13, 13, 13, 13, 13, 13, 13, 13, 13}
        {13}.repeatPart(11) == {13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13}
        {13}.repeatPart(16) == {13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13}
        {13}.repeatPart(-1) : error_outOfRange
        {13}.repeatPart(-9223372036854775808) : error_outOfRange
        {13, "a", 1.0}.repeatPart(0) == {}
        {13, "a", 1.0}.repeatPart(1) == {13, "a", 1.0}
        {13, "a", 1.0}.repeatPart(2) == {13, "a", 1.0, 13, "a", 1.0}
        {13, "a", 1.0}.repeatPart(10) == {13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0}
        {13, "a", 1.0}.repeatPart(11) == {13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0}
        {13, "a", 1.0}.repeatPart(16) == {13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0}
        {13, "a", 1.0}.repeatPart(-1) : error_outOfRange
        {13, "a", 1.0}.repeatPart(-9223372036854775808) : error_outOfRange
    var l1 List = {1}.clone()
    var l2 List = {l1}.clone()
    test: ok, errorsCoordinates
        l1.unsafe_getI64(0) == 2
        l2.unsafe_getI64(0) == 1
        l1 == {1}
        l2 == {{1}}
    var l3 List = l2.repeatPart(0)
    test: ok, errorsCoordinates
        l1.unsafe_getI64(0) == 2
        l2.unsafe_getI64(0) == 1
        l1 == {1}
        l2 == {{1}}
        l3 == {}
    var l4 List = l2.repeatPart(3)
    test: ok, errorsCoordinates
        l1.unsafe_getI64(0) == 5
        l2.unsafe_getI64(0) == 1
        l1 == {1}
        l2 == {{1}}
        l4 == {{1}, {1}, {1}}

#noinline
def testList_ReversePart(write ok Int, write errorsCoordinates List)
    var c List = {}
    test: ok, errorsCoordinates
        c.reversePart(0, 0).nothing?()
        c == {}
        c.reversePart(0, 1) : error_outOfRange
        c == {}
        c.reversePart(1, 1) : error_outOfRange
        c == {}
        c.reversePart(1, 0) : error_outOfRange
        c == {}
        c.reversePart(-1, -1) : error_outOfRange
        c == {}
        c.reversePart(-9223372036854775808, 0) : error_outOfRange
        c == {}
        c.reversePart(0, -9223372036854775808) : error_outOfRange
        c == {}
        c.reversePart(0, 9223372036854775807) : error_outOfRange
        c == {}
        c.reversePart(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == {}
    c = {1}
    test: ok, errorsCoordinates
        c.reversePart(0, 0).nothing?()
        c == {1}
        c.reversePart(0, 1).nothing?()
        c == {1}
        c.reversePart(1, 1).nothing?()
        c == {1}
        c.reversePart(0, 2) : error_outOfRange
        c == {1}
        c.reversePart(2, 1) : error_outOfRange
        c == {1}
        c.reversePart(1, 2) : error_outOfRange
        c == {1}
        c.reversePart(2, 2) : error_outOfRange
        c == {1}
        c.reversePart(1, 0) : error_outOfRange
        c == {1}
        c.reversePart(-1, -1) : error_outOfRange
        c == {1}
        c.reversePart(-9223372036854775808, 1) : error_outOfRange
        c == {1}
        c.reversePart(0, -9223372036854775808) : error_outOfRange
        c == {1}
        c.reversePart(0, 9223372036854775807) : error_outOfRange
        c == {1}
        c.reversePart(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == {1}
    c = {1, 2}
    test: ok, errorsCoordinates
        c.reversePart(0, 0).nothing?()
        c == {1, 2}
        c.reversePart(0, 1).nothing?()
        c == {1, 2}
        c.reversePart(1, 1).nothing?()
        c == {1, 2}
        c.reversePart(1, 2).nothing?()
        c == {1, 2}
        c.reversePart(2, 2).nothing?()
        c == {1, 2}
        c.reversePart(0, 2).nothing?()
        c == {2, 1}
        c.reversePart(0, 3) : error_outOfRange
        c == {2, 1}
        c.reversePart(3, 0) : error_outOfRange
        c == {2, 1}
        c.reversePart(1, 3) : error_outOfRange
        c == {2, 1}
        c.reversePart(3, 3) : error_outOfRange
        c == {2, 1}
        c.reversePart(1, 0) : error_outOfRange
        c == {2, 1}
        c.reversePart(-1, -1) : error_outOfRange
        c == {2, 1}
        c.reversePart(-9223372036854775808, 0) : error_outOfRange
        c == {2, 1}
        c.reversePart(0, -9223372036854775808) : error_outOfRange
        c == {2, 1}
        c.reversePart(0, 9223372036854775807) : error_outOfRange
        c == {2, 1}
        c.reversePart(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == {2, 1}
    c = {1, 2, 3, 4, 5, 6, 7, 8, 9}
    test: ok, errorsCoordinates
        c.reversePart(0, 0).nothing?()
        c == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        c.reversePart(0, 1).nothing?()
        c == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        c.reversePart(1, 1).nothing?()
        c == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        c.reversePart(1, 2).nothing?()
        c == {1, 2, 3, 4, 5, 6, 7, 8, 9}
        c.reversePart(0, 5).nothing?()
        c == {5, 4, 3, 2, 1, 6, 7, 8, 9}
        c.reversePart(5, 9).nothing?()
        c == {5, 4, 3, 2, 1, 9, 8, 7, 6}
        c.reversePart(0, 9).nothing?()
        c == {6, 7, 8, 9, 1, 2, 3, 4, 5}
        c.reversePart(3, 7).nothing?()
        c == {6, 7, 8, 3, 2, 1, 9, 4, 5}
        c.reversePart(0, 10) : error_outOfRange
        c == {6, 7, 8, 3, 2, 1, 9, 4, 5}
        c.reversePart(3, 0) : error_outOfRange
        c == {6, 7, 8, 3, 2, 1, 9, 4, 5}
        c.reversePart(9, 0) : error_outOfRange
        c == {6, 7, 8, 3, 2, 1, 9, 4, 5}
        c.reversePart(10, 0) : error_outOfRange
        c == {6, 7, 8, 3, 2, 1, 9, 4, 5}
        c.reversePart(3, -1) : error_outOfRange
        c == {6, 7, 8, 3, 2, 1, 9, 4, 5}
        c.reversePart(-1, -1) : error_outOfRange
        c == {6, 7, 8, 3, 2, 1, 9, 4, 5}
        c.reversePart(-9223372036854775808, 0) : error_outOfRange
        c == {6, 7, 8, 3, 2, 1, 9, 4, 5}
        c.reversePart(0, -9223372036854775808) : error_outOfRange
        c == {6, 7, 8, 3, 2, 1, 9, 4, 5}
        c.reversePart(0, 9223372036854775807) : error_outOfRange
        c == {6, 7, 8, 3, 2, 1, 9, 4, 5}
        c.reversePart(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == {6, 7, 8, 3, 2, 1, 9, 4, 5}
        c.reversePart(9223372036854775807, -9223372036854775808) : error_outOfRange
        c == {6, 7, 8, 3, 2, 1, 9, 4, 5}

#noinline
def testList_Dump(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        {}.dump(0) == "Type: STD::List = []\n"
        {}.dump(1) == "  Type: STD::List = []\n"
        {1}.dump(0) == "Type: STD::List = [\n  0:\n    Type: STD::Int = 1\n]\n"
        {1}.dump(1) == "  Type: STD::List = [\n    0:\n      Type: STD::Int = 1\n  ]\n"
        {1, nothing}.dump(0) == "Type: STD::List = [\n  0:\n    Type: STD::Int = 1\n  1:\n    Type: STD::Nothing\n]\n"
        {1, nothing}.dump(1) == "  Type: STD::List = [\n    0:\n      Type: STD::Int = 1\n    1:\n      Type: STD::Nothing\n  ]\n"
