module Main

type NotEqType_Array

type ItemForStableSort_Array

def ItemForStableSort_Array(sortedItem, id Int) ItemForStableSort_Array
    return ItemForStableSort_Array.fromList({sortedItem, id})

def sortedItem_Array~(ifss ItemForStableSort_Array) Int
    return ifss.typeGetItem(0)

def id_Array~(ifss ItemForStableSort_Array) Int
    return ifss.typeGetItem(1)

attach ItemForStableSort_Array to Equal

attach ItemForStableSort_Array to Shar__sugar__equal
    def shar__sugar__equal(item1, item2 ItemForStableSort_Array) Bool
        return item1.sortedItem_Array~() == item2.sortedItem_Array~()

attach ItemForStableSort_Array to Shar__sugar__notEqual
    def shar__sugar__notEqual(item1, item2 ItemForStableSort_Array) Bool
        return item1.sortedItem_Array~() != item2.sortedItem_Array~()

attach ItemForStableSort_Array to Ordered
    def compare(item1, item2 ItemForStableSort_Array) Int
        return item1.sortedItem_Array~().compare(item2.sortedItem_Array~())

attach ItemForStableSort_Array to Shar__sugar__less
    def shar__sugar__less(item1, item2 ItemForStableSort_Array) Bool
        return item1.sortedItem_Array~() < item2.sortedItem_Array~()

attach ItemForStableSort_Array to Shar__sugar__great
    def shar__sugar__great(item1, item2 ItemForStableSort_Array) Bool
        return item1.sortedItem_Array~() > item2.sortedItem_Array~()

attach ItemForStableSort_Array to Shar__sugar__lessOrEqual
    def shar__sugar__lessOrEqual(item1, item2 ItemForStableSort_Array) Bool
        return item1.sortedItem_Array~() <= item2.sortedItem_Array~()

attach ItemForStableSort_Array to Shar__sugar__greatOrEqual
    def shar__sugar__greatOrEqual(item1, item2 ItemForStableSort_Array) Bool
        return item1.sortedItem_Array~() >= item2.sortedItem_Array~()

#inline
def unsafe_array_getCounter(array $Any) Int
    return array.unsafe_getI64(0)

def testArray(write ok Int, write errorsCoordinates List)
    testArray_MemoryManagement(ok, errorsCoordinates)
    testArray_Equal(ok, errorsCoordinates)
    testArray_PartsEqual?(ok, errorsCoordinates)
    testArray_Ordered(ok, errorsCoordinates)
    testArray_GetFromAToLast(ok, errorsCoordinates)
    testArray_GetFromFirstToA(ok, errorsCoordinates)
    testArray_GetRange(ok, errorsCoordinates)
    testArray_GetItem(ok, errorsCoordinates)
    testArray_Add(ok, errorsCoordinates)
    testArray_StringWriter(ok, errorsCoordinates)
    testArray_Hashed(ok, errorsCoordinates)
    testArray_Long(ok, errorsCoordinates)
    testArray_Empty(ok, errorsCoordinates)
    testArray_Container(ok, errorsCoordinates)
    testArray_Sort(ok, errorsCoordinates)
    testArray_StableSort(ok, errorsCoordinates)
    testArray_Put(ok, errorsCoordinates)
    testArray_Iterator(ok, errorsCoordinates)
    testArray_Swap(ok, errorsCoordinates)
    testArray_Delete$(ok, errorsCoordinates)
    testArray_Delete(ok, errorsCoordinates)
    testArray_Insert$(ok, errorsCoordinates)
    testArray_Insert(ok, errorsCoordinates)
    testArray_InsertPart$(ok, errorsCoordinates)
    testArray_InsertPart(ok, errorsCoordinates)
    testArray_Repeat(ok, errorsCoordinates)
    testArray_RepeatPart(ok, errorsCoordinates)
    testArray_ReversePart(ok, errorsCoordinates)
    testArray_Dump(ok, errorsCoordinates)

#noinline
def testArray_MemoryManagement(write ok Int, write errorsCoordinates List)
    var int Int = 1
    var array1 Array = [int, 2, 3]
    var array2 Array = [array1, [12.0, 3.4]]
    var array3 Array = [int, 2, 3]
    var array4 Array = [array3, [12, 3]]
    test: ok, errorsCoordinates
        unsafe_array_getCounter(array1) == 2
        unsafe_array_getCounter(array2) == 1
    var allOk Bool = false
    var count Int = 0
    try
        parse :(parse) index, item = array2
            count++
            allOk = index.inRange?(0, 2) && item.type?(Array)
            if !allOk
                end parse
    catch
        count = 0
    test: ok, errorsCoordinates
        allOk
        count == 2
        unsafe_array_getCounter(array1) == 2
        unsafe_array_getCounter(array2) == 1
    array1.shar__rc_free()
    test: ok, errorsCoordinates
        unsafe_array_getCounter(array1) == 1
        unsafe_array_getCounter(array2) == 1
    array1.shar__rc_use()
    test: ok, errorsCoordinates
        unsafe_array_getCounter(array1) == 2
        unsafe_array_getCounter(array2) == 1
    array2 = [1, 2, 3]
    test: ok, errorsCoordinates
        unsafe_array_getCounter(array1) == 1
        unsafe_array_getCounter(array2) == 0
    array1.shar__to_const()
    test: ok, errorsCoordinates
        unsafe_array_getCounter(array1) == 0
        unsafe_array_getCounter(array2) == 0
        array1.use?()
        array3.use?()
        !array4.use?()
        array1.constant?()
        !array3.constant?()
        !array4.constant?()
    array1 = array1.clone()
    array2 = array3.clone()
    var array5 Array = array4.clone()
    test: ok, errorsCoordinates
        unsafe_array_getCounter(array1) == 1
        unsafe_array_getCounter(array2) == 1
        unsafe_array_getCounter(array3) == 3
        unsafe_array_getCounter(array4) == 1
        unsafe_array_getCounter(array5) == 1
        !array1.use?()
        !array1.constant?()
        !array2.use?()
        !array2.constant?()
    array1 = [int, 2, 3]
    array2 = [array1, [2, 3]]
    array2.shar__to_const()
    test: ok, errorsCoordinates
        unsafe_array_getCounter(array1) == 0
        unsafe_array_getCounter(array2) == 0
        unsafe_array_getCounter(array3) == 3
        unsafe_array_getCounter(array4) == 1
        unsafe_array_getCounter(array5) == 1
        array1.use?()
        array1.constant?()
        array2.use?()
        array2.constant?()
    allOk = false
    array1 = []
    try
        for :(i Int = 0) i < 300; i++
            array1.addItem(i)
        array2 = array1
        for :(i Int = 1) i < 150; i++
            array1.setItem(i, i + 1)
        allOk = array1[0] == 0
        if allOk
            for :(i Int = 1) i < 150; i++
                allOk = array1[i] == i + 1
                if !allOk
                    end i
        if allOk
            for :(i Int = 150) i < 300; i++
                allOk = array1[i] == i
                if !allOk
                    end i
        if allOk
            for :(i Int = 0) i < 300; i++
                allOk = array2[i] == i
                if !allOk
                    end i
        array3 = array2
        for :(i Int = 300) i < 400; i++
            array2.addItem(i)
        allOk = allOk && array1[0] == 0
        if allOk
            for :(i Int = 1) i < 150; i++
                allOk = array1[i] == i + 1
                if !allOk
                    end i
        if allOk
            for :(i Int = 150) i < 300; i++
                allOk = array1[i] == i
                if !allOk
                    end i
        if allOk
            for :(i Int = 0) i < 400; i++
                allOk = array2[i] == i
                if !allOk
                    end i
    catch
        nothing
    test: ok, errorsCoordinates
        allOk
        array1.length~() == 300
        array2.length~() == 400
        array3.length~() == 300

#noinline
def testArray_Equal(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [] == []
        [1] != []
        [] != [1]
        [1, 2] == [1, 2]
        !([1.0, 2.3, (0.0/0.0)] == [1.0, 2.1, (0.0/0.0)])
        [1.0, 2.3, (0.0/0.0)] == [1.0, 2.3, (0.0/0.0)] : error_compareWithNaN
        [1, 2] != [1, 2, 3]
        [1, 2, 3, 4] == [1, 2, 3, 4]
        [1, 2, 3, 4, 5] != [1, 2, 3, 4]
        [1.0, 2.0, 3.0, 4.0] == [1, 2, 3, 4] : error_invalidType
        [1.0, 2.0, 3.0, 4.0] != [1, 2, 3, 4] : error_invalidType
        [1, 2, 3, 4] == [1.0, 2.0, 3.0, 4.0] : error_invalidType
        [1, 2, 3, 4] != [1.0, 2.0, 3.0, 4.0] : error_invalidType
        [1] == [1.0, 2.0, 3.0, 4.0] : error_invalidType
        [1] != [1.0, 2.0, 3.0, 4.0] : error_invalidType
        [1.0] == [1, 2] : error_invalidType
        [1.0] != [1, 2] : error_invalidType
        [1.0, 2.3, (0.0/0.0)] != [1.0, 2.1, (0.0/0.0)]
        [1.0, 2.3, (0.0/0.0)] != [1.0, 2.3, (0.0/0.0)] : error_compareWithNaN
        [1.0, 2.3, (0.0/0.0)] != [NotEqType_Array.fromList({})] : error_invalidType
        [NotEqType_Array.fromList({})] == [NotEqType_Array.fromList({})] : error_invalidType
        [NotEqType_Array.fromList({})] != [NotEqType_Array.fromList({})] : error_invalidType
        [NotEqType_Array.fromList({})] == [] : error_invalidType
        [NotEqType_Array.fromList({})] != [] : error_invalidType
        [] == [NotEqType_Array.fromList({})] : error_invalidType
        [] != [NotEqType_Array.fromList({})] : error_invalidType

#noinline
def testArray_PartsEqual?(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].partsEqual?(0, [], 0, 0)
        ![].partsEqual?(1, [], 0, 0)
        ![].partsEqual?(-1, [], 0, 0)
        ![].partsEqual?(9223372036854775807, [], 0, 0)
        ![].partsEqual?(-9223372036854775808, [], 0, 0)
        ![].partsEqual?(0, [], 1, 0)
        ![].partsEqual?(0, [], -1, 0)
        ![].partsEqual?(0, [], 9223372036854775807, 0)
        ![].partsEqual?(0, [], -9223372036854775808, 0)
        ![].partsEqual?(0, [], 0, 1)
        ![].partsEqual?(0, [], 0, -1)
        ![].partsEqual?(0, [], 0, -9223372036854775808)
        ![].partsEqual?(0, [], 0, 9223372036854775807)
        ![].partsEqual?(-1, [], -1, -1)
        [1].partsEqual?(0, [1], 0, 1)
        [1].partsEqual?(1, [1], 1, 0)
        [1].partsEqual?(0, [0, 1], 1, 1)
        [1].partsEqual?(1, [1], 0, 0)
        [1].partsEqual?(1, [2], 0, 0)
        ![1].partsEqual?(0, [0, 1], 0, 1)
        ![1].partsEqual?(0, [2], 0, 1)
        ![1].partsEqual?(0, [1], 0, 2)
        ![1].partsEqual?(-1, [1], 0, 0)
        ![1].partsEqual?(-9223372036854775808, [1], 0, 0)
        ![1].partsEqual?(9223372036854775807, [1], 0, 0)
        [1, 2, 3, 4, 5, 6].partsEqual?(0, [1, 2, 3, 4, 5, 6], 0, 6)
        [1, 2, 3, 4, 5, 6].partsEqual?(1, [1, 2, 3, 4, 5, 6], 1, 5)
        [1, 2, 3, 4, 5, 6].partsEqual?(1, [], 0, 0)
        [].partsEqual?(0, [1, 2, 3, 4, 5, 6], 1, 0)
        ![1, 2, 3, 4, 5, 6].partsEqual?(1, [1.0], 0, 0) : error_invalidType
        ![1.0].partsEqual?(0, [1, 2, 3, 4, 5, 6], 1, 0) : error_invalidType
        ![1.0].partsEqual?(0, [1], 0, 1) : error_invalidType
        ![1.0].partsEqual?(0, [1, 2], 0, 1) : error_invalidType
        [1, 2, 3, 4, 5, 6].partsEqual?(1, [2, 3, 4], 0, 3)
        [1, 2, 3, 4, 5, 6].partsEqual?(0, [1, 2, 3, 4, 5, 6], 0, 6)
        [1, 2, 3, 4, 5, 6].partsEqual?(1, [1, 2, 3, 4, 5, 6], 1, 5)
        ![1, 2, 3, 4, 5, 6].partsEqual?(1, [1, 2, 3, 4, 5, 6], 1, 6)
        [1, 2, 3, 4, 5, 6].partsEqual?(1, [2, 3, 4, 5, 6], 1, 0)
        [1, 2, 3, 4, 5, 6].partsEqual?(3, [2, 3, 4, 5, 6], 2, 3)
        ![1, 2, 3, 4, 5, 6].partsEqual?(3, [2, 3, 4, 5, 6], 4, 3)

#noinline
def testArray_Ordered(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [] < [1]
        [0, 2] < [1]
        [0, 2] < [1, 2]
        [0, 1] < [0, 2]
        [0, 1, 2, 3] < [0, 1, 2, 4]
        [0, 1, 2, 3, 5] < [0, 1, 2, 4]
        [[], [1]] < [[1.0], [2]]
        [0.0, 1.0, 2.0, 4.0] < [0.0, 1.0, 2.0, 4.0, (0.0/0.0)]
        [0.0, 1.0, 2.0, 2.0, (0.0/0.0)] < [0.0, 1.0, 2.0, 4.0, (0.0/0.0)]
        [0.0, 1.0, 2.0, 2.0] < [0.0, 1.0, 2.0, 4.0, (0.0/0.0)]
        [0.0, 1.0, 2.0, 2.0, (0.0/0.0)] < [0.0, 1.0, 2.0, 4.0]
        [0.0, 1.0, 2.0, 4.0] < [0.0, 1.0, 2.0, (0.0/0.0)] : error_compareWithNaN
        [0.0, 1.0, 2.0, 4.0] < [(0.0/0.0), 1.0, 2.0] : error_compareWithNaN
        [(0.0/0.0), 1.0, 2.0, 4.0] < [0.0, 1.0, 2.0] : error_compareWithNaN
        !([] < [])
        !([1, 2, 3] < [1, 2, 3])
        !([1] < [])
        !([1] < [0, 2])
        !([1, 2] < [0, 2])
        !([0, 2] < [0, 1])
        !([0, 1, 2, 4] < [0, 1, 2, 3])
        !([0, 1, 2, 4] < [0, 1, 2, 3, 5])
        [1] < [1.0] : error_invalidType
        [] <= [1]
        [] <= []
        [1, 2, 3] <= [1, 2, 3]
        [0, 2] <= [1]
        [0, 2] <= [1, 2]
        [0, 1] <= [0, 2]
        [0, 1, 2, 3] <= [0, 1, 2, 4]
        [0, 1, 2, 3, 5] <= [0, 1, 2, 4]
        [[], [1]] <= [[1.0], [2]]
        [0.0, 1.0, 2.0, 4.0] <= [0.0, 1.0, 2.0, 4.0, (0.0/0.0)]
        [0.0, 1.0, 2.0, 2.0, (0.0/0.0)] <= [0.0, 1.0, 2.0, 4.0, (0.0/0.0)]
        [0.0, 1.0, 2.0, 2.0] <= [0.0, 1.0, 2.0, 4.0, (0.0/0.0)]
        [0.0, 1.0, 2.0, 2.0, (0.0/0.0)] <= [0.0, 1.0, 2.0, 4.0]
        [0.0, 1.0, 2.0, 4.0] <= [0.0, 1.0, 2.0, (0.0/0.0)] : error_compareWithNaN
        [0.0, 1.0, 2.0, 4.0] <= [(0.0/0.0), 1.0, 2.0] : error_compareWithNaN
        [(0.0/0.0), 1.0, 2.0, 4.0] <= [0.0, 1.0, 2.0] : error_compareWithNaN
        !([1] <= [])
        !([1] <= [0, 2])
        !([1, 2] <= [0, 2])
        !([0, 2] <= [0, 1])
        !([0, 1, 2, 4] <= [0, 1, 2, 3])
        !([0, 1, 2, 4] <= [0, 1, 2, 3, 5])
        [1] <= [1.0] : error_invalidType
        [1, 2, 3, 4] < [1.0, 2.0, 3.0, 4.0] : error_invalidType
        [1, 2, 3, 4] <= [1.0, 2.0, 3.0, 4.0] : error_invalidType
        [1] < [1.0, 2.0, 3.0, 4.0] : error_invalidType
        [1] <= [1.0, 2.0, 3.0, 4.0] : error_invalidType
        [1.0] < [1, 2] : error_invalidType
        [1.0] <= [1, 2] : error_invalidType
        [NotEqType_Array.fromList({})] < [NotEqType_Array.fromList({})] : error_invalidType
        [NotEqType_Array.fromList({})] <= [NotEqType_Array.fromList({})] : error_invalidType
        [NotEqType_Array.fromList({})] < [] : error_invalidType
        [NotEqType_Array.fromList({})] <= [] : error_invalidType
        [] < [NotEqType_Array.fromList({})] : error_invalidType
        [] <= [NotEqType_Array.fromList({})] : error_invalidType
        [1] > []
        [1] > [0, 2]
        [1, 2] > [0, 2]
        [0, 2] > [0, 1]
        [0, 1, 2, 4] > [0, 1, 2, 3]
        [0, 1, 2, 4] > [0, 1, 2, 3, 5]
        [[1.0], [2]] > [[], [1]]
        [0.0, 1.0, 2.0, 4.0, (0.0/0.0)] > [0.0, 1.0, 2.0, 4.0]
        [0.0, 1.0, 2.0, 4.0, (0.0/0.0)] > [0.0, 1.0, 2.0, 2.0, (0.0/0.0)]
        [0.0, 1.0, 2.0, 4.0, (0.0/0.0)] > [0.0, 1.0, 2.0, 2.0]
        [0.0, 1.0, 2.0, 4.0] > [0.0, 1.0, 2.0, 2.0, (0.0/0.0)]
        [0.0, 1.0, 2.0, (0.0/0.0)] > [0.0, 1.0, 2.0, 4.0] : error_compareWithNaN
        [(0.0/0.0), 1.0, 2.0] > [0.0, 1.0, 2.0, 4.0] : error_compareWithNaN
        [0.0, 1.0, 2.0] > [(0.0/0.0), 1.0, 2.0, 4.0] : error_compareWithNaN
        !([] > [])
        !([1, 2, 3] > [1, 2, 3])
        !([] > [1])
        !([0, 2] > [1])
        !([0, 2] > [1, 2])
        !([0, 1] > [0, 2])
        !([0, 1, 2, 3] > [0, 1, 2, 4])
        !([0, 1, 2, 3, 5] > [0, 1, 2, 4])
        [] >= []
        [1, 2, 3] >= [1, 2, 3]
        [1] >= [1.0] : error_invalidType
        [1] >= []
        [1] >= [0, 2]
        [1, 2] >= [0, 2]
        [0, 2] >= [0, 1]
        [0, 1, 2, 4] >= [0, 1, 2, 3]
        [0, 1, 2, 4] >= [0, 1, 2, 3, 5]
        [[1.0], [2]] >= [[], [1]]
        [0.0, 1.0, 2.0, 4.0, (0.0/0.0)] >= [0.0, 1.0, 2.0, 4.0]
        [0.0, 1.0, 2.0, 4.0, (0.0/0.0)] >= [0.0, 1.0, 2.0, 2.0, (0.0/0.0)]
        [0.0, 1.0, 2.0, 4.0, (0.0/0.0)] >= [0.0, 1.0, 2.0, 2.0]
        [0.0, 1.0, 2.0, 4.0] >= [0.0, 1.0, 2.0, 2.0, (0.0/0.0)]
        [0.0, 1.0, 2.0, (0.0/0.0)] >= [0.0, 1.0, 2.0, 4.0] : error_compareWithNaN
        [(0.0/0.0), 1.0, 2.0] >= [0.0, 1.0, 2.0, 4.0] : error_compareWithNaN
        [0.0, 1.0, 2.0] >= [(0.0/0.0), 1.0, 2.0, 4.0] : error_compareWithNaN
        !([] >= [1])
        !([0, 2] >= [1])
        !([0, 2] >= [1, 2])
        !([0, 1] >= [0, 2])
        !([0, 1, 2, 3] >= [0, 1, 2, 4])
        !([0, 1, 2, 3, 5] >= [0, 1, 2, 4])
        [1] > [1.0] : error_invalidType
        [1, 2, 3, 4] > [1.0, 2.0, 3.0, 4.0] : error_invalidType
        [1, 2, 3, 4] >= [1.0, 2.0, 3.0, 4.0] : error_invalidType
        [1] > [1.0, 2.0, 3.0, 4.0] : error_invalidType
        [1] >= [1.0, 2.0, 3.0, 4.0] : error_invalidType
        [1.0] > [1, 2] : error_invalidType
        [1.0] >= [1, 2] : error_invalidType
        [NotEqType_Array.fromList({})] > [NotEqType_Array.fromList({})] : error_invalidType
        [NotEqType_Array.fromList({})] >= [NotEqType_Array.fromList({})] : error_invalidType
        [NotEqType_Array.fromList({})] > [] : error_invalidType
        [NotEqType_Array.fromList({})] >= [] : error_invalidType
        [] > [NotEqType_Array.fromList({})] : error_invalidType
        [] >= [NotEqType_Array.fromList({})] : error_invalidType
        compare([], [1]) == enum::ord_less
        compare([], []) == enum::ord_equal
        compare([1, 2, 3], [1, 2, 3]) == enum::ord_equal
        compare([0, 2], [1]) == enum::ord_less
        compare([0, 2], [1, 2]) == enum::ord_less
        compare([0, 1], [0, 2]) == enum::ord_less
        compare([0, 1, 2, 3], [0, 1, 2, 4]) == enum::ord_less
        compare([0, 1, 2, 3, 5], [0, 1, 2, 4]) == enum::ord_less
        compare([[], [1]], [[1.0], [2]]) == enum::ord_less
        compare([1], []) == enum::ord_great
        compare([1], [0, 2]) == enum::ord_great
        compare([1, 2], [0, 2]) == enum::ord_great
        compare([0, 2], [0, 1]) == enum::ord_great
        compare([0, 1, 2, 4], [0, 1, 2, 3]) == enum::ord_great
        compare([0, 1, 2, 4], [0, 1, 2, 3, 5]) == enum::ord_great
        compare([1, 2, 3, 4], [1.0, 2.0, 3.0, 4.0]) : error_invalidType
        compare([1], [1.0, 2.0, 3.0, 4.0]) : error_invalidType
        compare([1.0], [1, 2]) : error_invalidType
        compare([NotEqType_Array.fromList({})], [NotEqType_Array.fromList({})]) : error_invalidType
        compare([NotEqType_Array.fromList({})], []) : error_invalidType
        compare([], [NotEqType_Array.fromList({})]) : error_invalidType

#noinline
def testArray_GetFromAToLast(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [][0:] == []
        [][0:].itemTypeNumber~() == Nothing.typeNumber~()
        [1][1:] == []
        [1][0:] == [1]
        [1][1:].itemTypeNumber~() == Nothing.typeNumber~()
        [1, 2][2:] == []
        [1, 2][1:] == [2]
        [1, 2][0:] == [1, 2]
        [1, 2][2:].itemTypeNumber~() == Nothing.typeNumber~()
        [][-9223372036854775808:] : error_outOfRange
        [][9223372036854775807:] : error_outOfRange
        [][-1:] : error_outOfRange
        [][1:] : error_outOfRange
        [][2:] : error_outOfRange
        [1, 2, 3][0:] == [1, 2, 3]
        [1, 2, 3][1:] == [2, 3]
        [1, 2, 3][2:] == [3]
        [1, 2, 3][3:] == []
        [1, 2, 3][-9223372036854775808:] : error_outOfRange
        [1, 2, 3][9223372036854775807:] : error_outOfRange
        [1, 2, 3][-1:] : error_outOfRange
        [1, 2, 3][4:] : error_outOfRange
        [1, 2, 3][5:] : error_outOfRange

#noinline
def testArray_GetFromFirstToA(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [][:0] == []
        [][:0].itemTypeNumber~() == Nothing.typeNumber~()
        [1][:1] == [1]
        [1][:0] == []
        [1][:0].itemTypeNumber~() == Nothing.typeNumber~()
        [1, 2][:2] == [1, 2]
        [1, 2][:1] == [1]
        [1, 2][:0] == []
        [1, 2][:0].itemTypeNumber~() == Nothing.typeNumber~()
        [][:-9223372036854775808] : error_outOfRange
        [][:9223372036854775807] : error_outOfRange
        [][:-1] : error_outOfRange
        [][:1] : error_outOfRange
        [][:2] : error_outOfRange
        [1, 2, 3][:0] == []
        [1, 2, 3][:1] == [1]
        [1, 2, 3][:2] == [1, 2]
        [1, 2, 3][:3] == [1, 2, 3]
        [1, 2, 3][:-9223372036854775808] : error_outOfRange
        [1, 2, 3][:9223372036854775807] : error_outOfRange
        [1, 2, 3][:-1] : error_outOfRange
        [1, 2, 3][:4] : error_outOfRange
        [1, 2, 3][:5] : error_outOfRange

def testArray_GetRange(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [][0:0] == []
        [][0:0].itemTypeNumber~() == Nothing.typeNumber~()
        [1][0:0] == []
        [1][0:0].itemTypeNumber~() == Nothing.typeNumber~()
        [1][0:1] == [1]
        [1, 2][0:0] == []
        [1, 2][0:0].itemTypeNumber~() == Nothing.typeNumber~()
        [1, 2][0:1] == [1]
        [1, 2][1:2] == [2]
        [1, 2][0:2] == [1, 2]
        [1, 2][2:2] == []
        [1, 2][2:2].itemTypeNumber~() == Nothing.typeNumber~()
        [][-9223372036854775808:-9223372036854775808] : error_outOfRange
        [][-9223372036854775808:-1] : error_outOfRange
        [][-9223372036854775808:9223372036854775807] : error_outOfRange
        [][9223372036854775807:9223372036854775807] : error_outOfRange
        [][-1:-1] : error_outOfRange
        [][-1:0] : error_outOfRange
        [][0:-1] : error_outOfRange
        [][0:1] : error_outOfRange
        [][1:0] : error_outOfRange
        [][1:1] : error_outOfRange
        [][2:1] : error_outOfRange
        [][2:0] : error_outOfRange
        [][2:-1] : error_outOfRange
        [][2:-9223372036854775808] : error_outOfRange
        [][2:9223372036854775807] : error_outOfRange
        [1, 2, 3][0:3] == [1, 2, 3]
        [1, 2, 3][0:2] == [1, 2]
        [1, 2, 3][1:3] == [2, 3]
        [1, 2, 3][-9223372036854775808:-9223372036854775808] : error_outOfRange
        [1, 2, 3][-9223372036854775808:-1] : error_outOfRange
        [1, 2, 3][-9223372036854775808:9223372036854775807] : error_outOfRange
        [1, 2, 3][9223372036854775807:9223372036854775807] : error_outOfRange
        [1, 2, 3][-1:-1] : error_outOfRange
        [1, 2, 3][-1:0] : error_outOfRange
        [1, 2, 3][0:-1] : error_outOfRange
        [1, 2, 3][1:0] : error_outOfRange
        [1, 2, 3][2:1] : error_outOfRange
        [1, 2, 3][2:0] : error_outOfRange
        [1, 2, 3][2:-1] : error_outOfRange
        [1, 2, 3][2:-9223372036854775808] : error_outOfRange
        [1, 2, 3][2:9223372036854775807] : error_outOfRange

#noinline
def testArray_GetItem(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [][0] : error_outOfRange
        [][1] : error_outOfRange
        [][-1] : error_outOfRange
        [][-9223372036854775808] : error_outOfRange
        [][9223372036854775807] : error_outOfRange
        [1][0] == 1
        [1][1] : error_outOfRange
        [1][-1] : error_outOfRange
        [1][-9223372036854775808] : error_outOfRange
        [1][9223372036854775807] : error_outOfRange
        [1, 2, 3][0] == 1
        [1, 2, 3][1] == 2
        [1, 2, 3][2] == 3
        [1, 2, 3][3] : error_outOfRange
        [1, 2, 3][-1] : error_outOfRange
        [1, 2, 3][-9223372036854775808] : error_outOfRange
        [1, 2, 3][9223372036854775807] : error_outOfRange

#noinline
def testArray_Add(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [] + [] == []
        ([] + []).itemTypeNumber~() == Nothing.typeNumber~()
        [] + [1] == [1]
        [1] + [] == [1]
        [] + [1, 2] == [1, 2]
        [1, 2] + [] == [1, 2]
        [1, 2] + [3] == [1, 2, 3]
        [0] + [1, 2] == [0, 1, 2]
        [1, 2] + [3, 4] == [1, 2, 3, 4]
        [-1, 0] + [1, 2] == [-1, 0, 1, 2]
        [1] + [2.0] : error_invalidType
    var array1 Array  = []
    var array2 Array  = []
    var array3 Array  = []
    var array4 Array  = [1, 2]
    var array5 Array  = [1, 2]
    var array6 Array = [0]
    var array7 Array = []
    var array8 Array = [1, 2]
    var array9 Array = [-1, 0]
    var array10 Array = [1]
    test: ok, errorsCoordinates
        (array1 += []).nothing?()
        array1 == []
        array1.itemTypeNumber~() == Nothing.typeNumber~()
        (array2 += [1]).nothing?()
        array2 == [1]
        (array3 += [1]).nothing?()
        array3 == [1]
        (array4 += []).nothing?()
        array4 == [1, 2]
        (array5 += [3]).nothing?()
        array5 == [1, 2, 3]
        (array6 += [1, 2]).nothing?()
        array6 == [0, 1, 2]
        (array7 += [1, 2]).nothing?()
        array7 == [1, 2]
        (array8 += [3, 4]).nothing?()
        array8 == [1, 2, 3, 4]
        (array9 += [1, 2]).nothing?()
        array9 == [-1, 0, 1, 2]
        array10 += [2.0] : error_invalidType
        array10 == [1]
    array1 = [].clone()
    array2 = [].clone()
    array3 = [1].clone()
    array4 = [1, 2].clone()
    array5 = [1, 2].clone()
    array6 = [0].clone()
    array7 = [].clone()
    array8 = [1, 2].clone()
    array9 = [-1, 0].clone()
    array10 = [1].clone()
    test: ok, errorsCoordinates
        (array1 += []).nothing?()
        array1 == []
        array1.itemTypeNumber~() == Nothing.typeNumber~()
        (array2 += [1]).nothing?()
        array2 == [1]
        (array3 += []).nothing?()
        array3 == [1]
        (array4 += []).nothing?()
        array4 == [1, 2]
        (array5 += [3]).nothing?()
        array5 == [1, 2, 3]
        (array6 += [1, 2]).nothing?()
        array6 == [0, 1, 2]
        (array7 += [1, 2]).nothing?()
        array7 == [1, 2]
        (array8 += [3, 4]).nothing?()
        array8 == [1, 2, 3, 4]
        (array9 += [1, 2]).nothing?()
        array9 == [-1, 0, 1, 2]
        array10 += [2.0] : error_invalidType
        array10 == [1]

#noinline
def testArray_StringWriter(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].toString() == "[]"
        [0].toString() == "[0]"
        [1, 2, 3].toString() == "[1, 2, 3]"
        [1.1, 1.2].toString() == "[1.1, 1.2]"
        [[], [1, 2, 3], [[[]]]].toString() == "[[], [1, 2, 3], [[[]]]]"

#noinline
def testArray_Hashed(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].getHash().type?(Int)
        [1].getHash().type?(Int)
        [].getRandomizedHash().type?(Int)
        [1].getRandomizedHash().type?(Int)
        [].getHash() == [].getHash()
        [1].getHash() == [1].getHash()

#noinline
def testArray_Long(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].length~() == 0
        [123].length~() == 1
        [10, 23].length~() == 2
        [10, 23, 0].length~() == 3

#noinline
def testArray_Empty(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Array.createEmpty() == []

#noinline
def testArray_Container(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].addItem$([]) == [[]]
        [].addItem$(1) == [1]
        [[1, 2]].addItem$([]) == [[1, 2], []]
        [1].addItem$(2) == [1, 2]
        [1, 2].addItem$(3) == [1, 2, 3]
        [1, 2].addItem$(1.0) : error_invalidType
        [1, 2].addItem$(nothing) : error_invalidType
        [].addItem$(nothing) : error_invalidType
    var array1 Array = []
    var array2 Array = []
    var array3 Array = [[1, 2]]
    var array4 Array = [1]
    var array5 Array = [1, 2]
    var array6 Array = [1, 2]
    var array7 Array = []
    test: ok, errorsCoordinates
        array1.addItem([]).nothing?()
        array1 == [[]]
        array2.addItem(1).nothing?()
        array2 == [1]
        array3.addItem([]).nothing?()
        array3 == [[1, 2], []]
        array4.addItem(2).nothing?()
        array4 == [1, 2]
        array5.addItem(3).nothing?()
        array5 == [1, 2, 3]
        array6.addItem(1.0) : error_invalidType
        array6 == [1, 2]
        array6.addItem(nothing) : error_invalidType
        array6 == [1, 2]
        array7.addItem(nothing) : error_invalidType
        array7 == []
    array1 = [].clone()
    array2 = [].clone()
    array3 = [[1, 2]].clone()
    array4 = [1].clone()
    array5 = [1, 2].clone()
    array6 = [1, 2].clone()
    array7 = [].clone()
    test: ok, errorsCoordinates
        array1.addItem([]).nothing?()
        array1 == [[]]
        array2.addItem(1).nothing?()
        array2 == [1]
        array3.addItem([]).nothing?()
        array3 == [[1, 2], []]
        array4.addItem(2).nothing?()
        array4 == [1, 2]
        array5.addItem(3).nothing?()
        array5 == [1, 2, 3]
        array6.addItem(1.0) : error_invalidType
        array6 == [1, 2]
        array6.addItem(nothing) : error_invalidType
        array6 == [1, 2]
        array7.addItem(nothing) : error_invalidType
        array7 == []
    array1 = [1]
    array2 = [1, 2]
    array3 = [1, 2]
    array4 = [1, 2]
    array5 = [1, 2, 3]
    array6 = []
    test: ok, errorsCoordinates
        array1.setItem(0, -1).nothing?()
        array1 == [-1]
        array2.setItem(0, -1).nothing?()
        array2 == [-1, 2]
        array3.setItem(1, -2).nothing?()
        array3 == [1, -2]
        array4.setItem(0, -1).nothing?()
        array4.setItem(1, -2).nothing?()
        array4 == [-1, -2]
        array5.setItem(2, -3).nothing?()
        array5 == [1, 2, -3]
        array6.setItem(0, 1) : error_outOfRange
        array6 == []
        array6.setItem(-1, 1) : error_outOfRange
        array6 == []
        array6.setItem(1, 1) : error_outOfRange
        array6 == []
        array6.setItem(-9223372036854775808, 1) : error_outOfRange
        array6 == []
        array6.setItem(9223372036854775807, 1) : error_outOfRange
        array6 == []
        array1.setItem(-1, 1) : error_outOfRange
        array1 == [-1]
        array1.setItem(1, 1) : error_outOfRange
        array1 == [-1]
        array1.setItem(-9223372036854775808, 1) : error_outOfRange
        array1 == [-1]
        array1.setItem(9223372036854775807, 1) : error_outOfRange
        array1 == [-1]
        array2.setItem(-1, 1) : error_outOfRange
        array2 == [-1, 2]
        array2.setItem(2, 1) : error_outOfRange
        array2 == [-1, 2]
        array2.setItem(-9223372036854775808, 1) : error_outOfRange
        array2 == [-1, 2]
        array2.setItem(9223372036854775807, 1) : error_outOfRange
        array2 == [-1, 2]
        array1.setItem(0, 1.0) : error_invalidType
        array1 == [-1]
        array1.setItem(0, nothing) : error_invalidType
        array1 == [-1]
    array1 = [1].clone()
    array2 = [1, 2].clone()
    array3 = [1, 2].clone()
    array4 = [1, 2].clone()
    array5 = [1, 2, 3].clone()
    array6 = [].clone()
    test: ok, errorsCoordinates
        array1.setItem(0, -1).nothing?()
        array1 == [-1]
        array2.setItem(0, -1).nothing?()
        array2 == [-1, 2]
        array3.setItem(1, -2).nothing?()
        array3 == [1, -2]
        array4.setItem(0, -1).nothing?()
        array4.setItem(1, -2).nothing?()
        array4 == [-1, -2]
        array5.setItem(2, -3).nothing?()
        array5 == [1, 2, -3]
        array6.setItem(0, 1) : error_outOfRange
        array6 == []
        array6.setItem(-1, 1) : error_outOfRange
        array6 == []
        array6.setItem(1, 1) : error_outOfRange
        array6 == []
        array6.setItem(-9223372036854775808, 1) : error_outOfRange
        array6 == []
        array6.setItem(9223372036854775807, 1) : error_outOfRange
        array6 == []
        array1.setItem(-1, 1) : error_outOfRange
        array1 == [-1]
        array1.setItem(1, 1) : error_outOfRange
        array1 == [-1]
        array1.setItem(-9223372036854775808, 1) : error_outOfRange
        array1 == [-1]
        array1.setItem(9223372036854775807, 1) : error_outOfRange
        array1 == [-1]
        array2.setItem(-1, 1) : error_outOfRange
        array2 == [-1, 2]
        array2.setItem(2, 1) : error_outOfRange
        array2 == [-1, 2]
        array2.setItem(-9223372036854775808, 1) : error_outOfRange
        array2 == [-1, 2]
        array2.setItem(9223372036854775807, 1) : error_outOfRange
        array2 == [-1, 2]
        array1.setItem(0, 1.0) : error_invalidType
        array1 == [-1]
        array1.setItem(0, nothing) : error_invalidType
        array1 == [-1]

#noinline
def testArray_Sort(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [NotEqType_Array.fromList({})].sort$(true) : error_invalidType
        [NotEqType_Array.fromList({})].sort$(false) : error_invalidType
        [NotEqType_Array.fromList({}), NotEqType_Array.fromList({})].sort$(true) : error_invalidType
        [NotEqType_Array.fromList({}), NotEqType_Array.fromList({})].sort$(false) : error_invalidType
        [].sort$(true) == []
        [].sort$(false) == []
        [].sort$(true).itemTypeNumber~() == Nothing.typeNumber~()
        [].sort$(false).itemTypeNumber~() == Nothing.typeNumber~()
        [1].sort$(true) == [1]
        [1].sort$(false) == [1]
        [1, 2].sort$(true) == [1, 2]
        [1, 2].sort$(false) == [2, 1]
        [2, 1].sort$(true) == [1, 2]
        [2, 1].sort$(false) == [2, 1]
        [1, 2, 3].sort$(true) == [1, 2, 3]
        [1, 2, 3].sort$(false) == [3, 2, 1]
        [1, 3, 2].sort$(true) == [1, 2, 3]
        [1, 3, 2].sort$(false) == [3, 2, 1]
        [2, 1, 3].sort$(true) == [1, 2, 3]
        [2, 1, 3].sort$(false) == [3, 2, 1]
        [2, 3, 1].sort$(true) == [1, 2, 3]
        [2, 3, 1].sort$(false) == [3, 2, 1]
        [3, 1, 2].sort$(true) == [1, 2, 3]
        [3, 1, 2].sort$(false) == [3, 2, 1]
        [3, 2, 1].sort$(true) == [1, 2, 3]
        [3, 2, 1].sort$(false) == [3, 2, 1]
        [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301].sort$(true) == [-301, -92, -3, 0, 9, 15, 26, 45, 172, 7134]
        [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301].sort$(false) == [7134, 172, 45, 26, 15, 9, 0, -3, -92, -301]
        [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100] {
            .sort$(true) ==
            [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]

        }
        [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100] {
            .sort$(false) ==
            [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100]

        }
        [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100] {
            .sort$(true) ==
            [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]

        }
        [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100] {
            .sort$(false) ==
            [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100]

        }
    var a1 Array = []
    var a2 Array = [1]
    var a3 Array = [1, 2]
    var a4 Array = [1, 2, 3]
    var a5 Array = [2, 1, 3]
    var a6 Array = [2, 1, 3]
    var a7 Array = [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301]
    var a8 Array = [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301]
    var a9 Array = [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
    var a10 Array = [NotEqType_Array.fromList({})]
    var a11 Array = [NotEqType_Array.fromList({}), NotEqType_Array.fromList({})]
    test: ok, errorsCoordinates
        a1.sort(true).nothing?()
        a1 == []
        a1.sort(false).nothing?()
        a1 == []
        a1.sort(true).nothing?()
        a1.itemTypeNumber~() == Nothing.typeNumber~()
        a1 == []
        a1.sort(false).nothing?()
        a1.itemTypeNumber~() == Nothing.typeNumber~()
        a1 == []
        a2.sort(true).nothing?()
        a2 == [1]
        a2.sort(false).nothing?()
        a2 == [1]
        a3.sort(true).nothing?()
        a3 == [1, 2]
        a3.sort(false).nothing?()
        a3 == [2, 1]
        a3.sort(false).nothing?()
        a3 == [2, 1]
        a4.sort(true).nothing?()
        a4 == [1, 2, 3]
        a4.sort(false).nothing?()
        a4 == [3, 2, 1]
        a4.sort(false).nothing?()
        a4 == [3, 2, 1]
        a5.sort(true).nothing?()
        a5 == [1, 2, 3]
        a6.sort(false).nothing?()
        a6 == [3, 2, 1]
        a7.sort(true).nothing?()
        a7 == [-301, -92, -3, 0, 9, 15, 26, 45, 172, 7134]
        a8.sort(false).nothing?()
        a8 == [7134, 172, 45, 26, 15, 9, 0, -3, -92, -301]
        a9.sort(true).nothing?()
        a9 == [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
        a9.sort(false).nothing?()
        a9 == [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100]
        a9.sort(true).nothing?()
        a9 == [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
        a10.sort(true) : error_invalidType
        a10.sort(false) : error_invalidType
        a11.sort(true) : error_invalidType
        a11.sort(false) : error_invalidType
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a1.sort(true)
    var allOk Bool = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i - 1] <= a1[i]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a1.sort(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i] <= a1[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a2 = a1.sort$(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i - 1] <= a2[i]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a2 = a1.sort$(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i] <= a2[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a1.sort(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i - 1] <= a1[i]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a1.sort(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i] <= a1[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a2 = a1.sort$(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i - 1] <= a2[i]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a2 = a1.sort$(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i] <= a2[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = Array.repeat(123, 12)
    a1.sort(true)
    a2 = Array.repeat(123, 200)
    a2.sort(true)
    a3 = Array.repeat(123, 12)
    a3.sort(false)
    a4 = Array.repeat(123, 200)
    a4.sort(false)
    test: ok, errorsCoordinates
        a1 == Array.repeat(123, 12)
        a2 == Array.repeat(123, 200)
        a3 == Array.repeat(123, 12)
        a4 == Array.repeat(123, 200)
        Array.repeat(123, 12).sort$(true) == Array.repeat(123, 12)
        Array.repeat(123, 12).sort$(false) == Array.repeat(123, 12)
        Array.repeat(123, 200).sort$(true) == Array.repeat(123, 200)
        Array.repeat(123, 200).sort$(false) == Array.repeat(123, 200)

#noinline
def testArray_StableSort(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [NotEqType_Array.fromList({})].stableSort$(true) : error_invalidType
        [NotEqType_Array.fromList({})].stableSort$(false) : error_invalidType
        [NotEqType_Array.fromList({}), NotEqType_Array.fromList({})].stableSort$(true) : error_invalidType
        [NotEqType_Array.fromList({}), NotEqType_Array.fromList({})].stableSort$(false) : error_invalidType
        [].stableSort$(true) == []
        [].stableSort$(false) == []
        [].stableSort$(true).itemTypeNumber~() == Nothing.typeNumber~()
        [].stableSort$(false).itemTypeNumber~() == Nothing.typeNumber~()
        [1].stableSort$(true) == [1]
        [1].stableSort$(false) == [1]
        [1, 2].stableSort$(true) == [1, 2]
        [1, 2].stableSort$(false) == [2, 1]
        [2, 1].stableSort$(true) == [1, 2]
        [2, 1].stableSort$(false) == [2, 1]
        [1, 2, 3].stableSort$(true) == [1, 2, 3]
        [1, 2, 3].stableSort$(false) == [3, 2, 1]
        [1, 3, 2].stableSort$(true) == [1, 2, 3]
        [1, 3, 2].stableSort$(false) == [3, 2, 1]
        [2, 1, 3].stableSort$(true) == [1, 2, 3]
        [2, 1, 3].stableSort$(false) == [3, 2, 1]
        [2, 3, 1].stableSort$(true) == [1, 2, 3]
        [2, 3, 1].stableSort$(false) == [3, 2, 1]
        [3, 1, 2].stableSort$(true) == [1, 2, 3]
        [3, 1, 2].stableSort$(false) == [3, 2, 1]
        [3, 2, 1].stableSort$(true) == [1, 2, 3]
        [3, 2, 1].stableSort$(false) == [3, 2, 1]
        [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301].stableSort$(true) == [-301, -92, -3, 0, 9, 15, 26, 45, 172, 7134]
        [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301].stableSort$(false) == [7134, 172, 45, 26, 15, 9, 0, -3, -92, -301]
        [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100] {
            .stableSort$(true) ==
            [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]

        }
        [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100] {
            .stableSort$(false) ==
            [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100]

        }
        [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100] {
            .stableSort$(true) ==
            [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]

        }
        [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100] {
            .stableSort$(false) ==
            [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100]

        }
    var a1 Array = []
    var a2 Array = [1]
    var a3 Array = [1, 2]
    var a4 Array = [1, 2, 3]
    var a5 Array = [2, 1, 3]
    var a6 Array = [2, 1, 3]
    var a7 Array = [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301]
    var a8 Array = [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301]
    var a9 Array = [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
    var a10 Array = [NotEqType_Array.fromList({})]
    var a11 Array = [NotEqType_Array.fromList({}), NotEqType_Array.fromList({})]
    test: ok, errorsCoordinates
        a1.stableSort(true).nothing?()
        a1 == []
        a1.stableSort(false).nothing?()
        a1 == []
        a1.stableSort(true).nothing?()
        a1.itemTypeNumber~() == Nothing.typeNumber~()
        a1 == []
        a1.stableSort(false).nothing?()
        a1.itemTypeNumber~() == Nothing.typeNumber~()
        a1 == []
        a2.stableSort(true).nothing?()
        a2 == [1]
        a2.stableSort(false).nothing?()
        a2 == [1]
        a3.stableSort(true).nothing?()
        a3 == [1, 2]
        a3.stableSort(false).nothing?()
        a3 == [2, 1]
        a3.stableSort(false).nothing?()
        a3 == [2, 1]
        a4.stableSort(true).nothing?()
        a4 == [1, 2, 3]
        a4.stableSort(false).nothing?()
        a4 == [3, 2, 1]
        a4.stableSort(false).nothing?()
        a4 == [3, 2, 1]
        a5.stableSort(true).nothing?()
        a5 == [1, 2, 3]
        a6.stableSort(false).nothing?()
        a6 == [3, 2, 1]
        a7.stableSort(true).nothing?()
        a7 == [-301, -92, -3, 0, 9, 15, 26, 45, 172, 7134]
        a8.stableSort(false).nothing?()
        a8 == [7134, 172, 45, 26, 15, 9, 0, -3, -92, -301]
        a9.stableSort(true).nothing?()
        a9 == [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
        a9.stableSort(false).nothing?()
        a9 == [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100]
        a9.stableSort(true).nothing?()
        a9 == [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
        a10.stableSort(true) : error_invalidType
        a10.stableSort(false) : error_invalidType
        a11.stableSort(true) : error_invalidType
        a11.stableSort(false) : error_invalidType
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a1.stableSort(true)
    var allOk Bool = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i - 1] <= a1[i]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a1.stableSort(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i] <= a1[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a2 = a1.stableSort$(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i - 1] <= a2[i]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a2 = a1.stableSort$(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i] <= a2[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a1.stableSort(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i - 1] <= a1[i]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a1.stableSort(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i] <= a1[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a2 = a1.stableSort$(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i - 1] <= a2[i]
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a2 = a1.stableSort$(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i] <= a2[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = Array.repeat(123, 12)
    a1.stableSort(true)
    a2 = Array.repeat(123, 200)
    a2.stableSort(true)
    a3 = Array.repeat(123, 12)
    a3.stableSort(false)
    a4 = Array.repeat(123, 200)
    a4.stableSort(false)
    test: ok, errorsCoordinates
        a1 == Array.repeat(123, 12)
        a2 == Array.repeat(123, 200)
        a3 == Array.repeat(123, 12)
        a4 == Array.repeat(123, 200)
        Array.repeat(123, 12).stableSort$(true) == Array.repeat(123, 12)
        Array.repeat(123, 12).stableSort$(false) == Array.repeat(123, 12)
        Array.repeat(123, 200).stableSort$(true) == Array.repeat(123, 200)
        Array.repeat(123, 200).stableSort$(false) == Array.repeat(123, 200)
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Array(Int.getRandom() & 63, i))
    a1.stableSort(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && (a1[i - 1].sortedItem_Array~() == a1[i].sortedItem_Array~()).select(a1[i - 1].id_Array~() < a1[i].id_Array~(), true)
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Array(Int.getRandom() & 63, i))
    a1.stableSort(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && (a1[i - 1].sortedItem_Array~() == a1[i].sortedItem_Array~()).select(a1[i - 1].id_Array~() < a1[i].id_Array~(), true)
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Array(Int.getRandom() & 63, i))
    a2 = a1.stableSort$(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && (a2[i - 1].sortedItem_Array~() == a2[i].sortedItem_Array~()).select(a2[i - 1].id_Array~() < a2[i].id_Array~(), true)
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Array(Int.getRandom() & 63, i))
    a2 = a1.stableSort$(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && (a2[i - 1].sortedItem_Array~() == a2[i].sortedItem_Array~()).select(a2[i - 1].id_Array~() < a2[i].id_Array~(), true)
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Array(11, i))
    a1.stableSort(true)
    allOk = true
    for :(i Int = 0) i < 200; i++
        allOk = allOk && a1[i].id_Array~() == i
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Array(11, i))
    a1.stableSort(false)
    allOk = true
    for :(i Int = 0) i < 200; i++
        allOk = allOk && a1[i].id_Array~() == i
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Array(11, i))
    a2 = a1.stableSort$(true)
    allOk = true
    for :(i Int = 0) i < 200; i++
        allOk = allOk && a2[i].id_Array~() == i
    test: ok, errorsCoordinates
        allOk
    a1 = []
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Array(11, i))
    a2 = a1.stableSort$(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i].id_Array~() == i
    test: ok, errorsCoordinates
        allOk

#noinline
def testArray_Put(write ok Int, write errorsCoordinates List)
    var a1 Array = []
    var a2 Array = [1]
    var a3 Array = [1, 2, 3, 4]
    test: ok, errorsCoordinates
        a1.put(0, 2) : error_outOfRange
        a1 == []
        a1.put(1, 2) : error_outOfRange
        a1 == []
        a1.put(9223372036854775807, 2) : error_outOfRange
        a1 == []
        a1.put(-1, 2) : error_outOfRange
        a1 == []
        a1.put(-9223372036854775808, 2) : error_outOfRange
        a1 == []
        a2.put(0, 2.0) : error_invalidType
        a2 == [1]
        a2.put(0, 2) == 1
        a2 == [2]
        a2.put(0, 3) == 2
        a2 == [3]
        a2.put(1, 0) : error_outOfRange
        a2 == [3]
        a2.put(9223372036854775807, 0) : error_outOfRange
        a2 == [3]
        a2.put(-1, 0) : error_outOfRange
        a2 == [3]
        a2.put(-9223372036854775808, 0) : error_outOfRange
        a2 == [3]
        a3.put(0, -2) == 1
        a3 == [-2, 2, 3, 4]
        a3.put(1, 3) == 2
        a3 == [-2, 3, 3, 4]
        a3.put(3, 0) == 4
        a3 == [-2, 3, 3, 0]
        a3.put(4, 1) : error_outOfRange
        a3 == [-2, 3, 3, 0]
        a3.put(9223372036854775807, 1) : error_outOfRange
        a3 == [-2, 3, 3, 0]
        a3.put(-1, 1) : error_outOfRange
        a3 == [-2, 3, 3, 0]
        a3.put(-9223372036854775808, 1) : error_outOfRange
        a3 == [-2, 3, 3, 0]
        a3.put(0, 1.0) : error_invalidType
        a3 == [-2, 3, 3, 0]
        a3.put(1, 1.0) : error_invalidType
        a3 == [-2, 3, 3, 0]
        a3.put(3, 1.0) : error_invalidType
        a3 == [-2, 3, 3, 0]

#noinline
def testArray_Iterator(write ok Int, write errorsCoordinates List)
    var allOk Bool = true
    try
        parse _, _ = []
            allOk = false
    catch
        allOk = false
    test: ok, errorsCoordinates
        allOk
    allOk = false
    var count Int = 0
    try
        parse :(parse) index, item = [1, 2, 3, 4, 5]
            count++
            allOk = index.inRange?(0, 5) && item.inRange?(1, 6)
            if !allOk
                end parse
    catch
        count = 0
    test: ok, errorsCoordinates
        allOk
        count == 5

#noinline
def testArray_Swap(write ok Int, write errorsCoordinates List)
    var a1 Array = []
    var a2 Array = [1]
    var a3 Array = [1, 2]
    var a4 Array = [1, 2, 3]
    var a5 Array = [1, 2, 3, 4, 5]
    test: ok, errorsCoordinates
        a1.swap(0, 0) : error_outOfRange
        a1 == []
        a1.swap(-1, 0) : error_outOfRange
        a1 == []
        a1.swap(-1, -1) : error_outOfRange
        a1 == []
        a1.swap(0, -1) : error_outOfRange
        a1 == []
        a1.swap(9223372036854775807, 0) : error_outOfRange
        a1 == []
        a1.swap(0, 9223372036854775807) : error_outOfRange
        a1 == []
        a1.swap(0, 1) : error_outOfRange
        a1 == []
        a1.swap(1, 1) : error_outOfRange
        a1 == []
        a1.swap(1, 0) : error_outOfRange
        a1 == []
        a1.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a1 == []
        a2.swap(0, 0).nothing?()
        a2 == [1]
        a2.swap(1, 1) : error_outOfRange
        a2 == [1]
        a2.swap(-1, 0) : error_outOfRange
        a2 == [1]
        a2.swap(-1, -1) : error_outOfRange
        a2 == [1]
        a2.swap(0, -1) : error_outOfRange
        a2 == [1]
        a2.swap(9223372036854775807, 0) : error_outOfRange
        a2 == [1]
        a2.swap(0, 9223372036854775807) : error_outOfRange
        a2 == [1]
        a2.swap(0, 1) : error_outOfRange
        a2 == [1]
        a2.swap(1, 0) : error_outOfRange
        a2 == [1]
        a2.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a2 == [1]
        a3.swap(0, 0).nothing?()
        a3 == [1, 2]
        a3.swap(1, 1).nothing?()
        a3 == [1, 2]
        a3.swap(0, 1).nothing?()
        a3 == [2, 1]
        a3.swap(1, 0).nothing?()
        a3 == [1, 2]
        a3.swap(2, 2) : error_outOfRange
        a3 == [1, 2]
        a3.swap(-1, 0) : error_outOfRange
        a3 == [1, 2]
        a3.swap(-1, -1) : error_outOfRange
        a3 == [1, 2]
        a3.swap(0, -1) : error_outOfRange
        a3 == [1, 2]
        a3.swap(9223372036854775807, 0) : error_outOfRange
        a3 == [1, 2]
        a3.swap(0, 9223372036854775807) : error_outOfRange
        a3 == [1, 2]
        a3.swap(0, 2) : error_outOfRange
        a3 == [1, 2]
        a3.swap(2, 0) : error_outOfRange
        a3 == [1, 2]
        a3.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a3 == [1, 2]
        a4.swap(0, 0).nothing?()
        a4 == [1, 2, 3]
        a4.swap(1, 1).nothing?()
        a4 == [1, 2, 3]
        a4.swap(2, 2).nothing?()
        a4 == [1, 2, 3]
        a4.swap(0, 1).nothing?()
        a4 == [2, 1, 3]
        a4.swap(1, 0).nothing?()
        a4 == [1, 2, 3]
        a4.swap(1, 2).nothing?()
        a4 == [1, 3, 2]
        a4.swap(0, 2).nothing?()
        a4 == [2, 3, 1]
        a4.swap(2, 0).nothing?()
        a4 == [1, 3, 2]
        a4.swap(3, 3) : error_outOfRange
        a4 == [1, 3, 2]
        a4.swap(-1, 0) : error_outOfRange
        a4 == [1, 3, 2]
        a4.swap(-1, -1) : error_outOfRange
        a4 == [1, 3, 2]
        a4.swap(0, -1) : error_outOfRange
        a4 == [1, 3, 2]
        a4.swap(9223372036854775807, 0) : error_outOfRange
        a4 == [1, 3, 2]
        a4.swap(0, 9223372036854775807) : error_outOfRange
        a4 == [1, 3, 2]
        a4.swap(0, 3) : error_outOfRange
        a4 == [1, 3, 2]
        a4.swap(3, 0) : error_outOfRange
        a4 == [1, 3, 2]
        a4.swap(3, 1) : error_outOfRange
        a4 == [1, 3, 2]
        a4.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a4 == [1, 3, 2]
        a5.swap(0, 0).nothing?()
        a5 == [1, 2, 3, 4, 5]
        a5.swap(1, 1).nothing?()
        a5 == [1, 2, 3, 4, 5]
        a5.swap(2, 2).nothing?()
        a5 == [1, 2, 3, 4, 5]
        a5.swap(3, 3).nothing?()
        a5 == [1, 2, 3, 4, 5]
        a5.swap(4, 4).nothing?()
        a5 == [1, 2, 3, 4, 5]
        a5.swap(0, 1).nothing?()
        a5 == [2, 1, 3, 4, 5]
        a5.swap(1, 0).nothing?()
        a5 == [1, 2, 3, 4, 5]
        a5.swap(1, 2).nothing?()
        a5 == [1, 3, 2, 4, 5]
        a5.swap(0, 2).nothing?()
        a5 == [2, 3, 1, 4, 5]
        a5.swap(2, 0).nothing?()
        a5 == [1, 3, 2, 4, 5]
        a5.swap(0, 4).nothing?()
        a5 == [5, 3, 2, 4, 1]
        a5.swap(4, 0).nothing?()
        a5 == [1, 3, 2, 4, 5]
        a5.swap(5, 5) : error_outOfRange
        a5 == [1, 3, 2, 4, 5]
        a5.swap(-1, 0) : error_outOfRange
        a5 == [1, 3, 2, 4, 5]
        a5.swap(-1, -1) : error_outOfRange
        a5 == [1, 3, 2, 4, 5]
        a5.swap(0, -1) : error_outOfRange
        a5 == [1, 3, 2, 4, 5]
        a5.swap(9223372036854775807, 0) : error_outOfRange
        a5 == [1, 3, 2, 4, 5]
        a5.swap(0, 9223372036854775807) : error_outOfRange
        a5 == [1, 3, 2, 4, 5]
        a5.swap(0, 5) : error_outOfRange
        a5 == [1, 3, 2, 4, 5]
        a5.swap(5, 0) : error_outOfRange
        a5 == [1, 3, 2, 4, 5]
        a5.swap(5, 1) : error_outOfRange
        a5 == [1, 3, 2, 4, 5]
        a5.swap(-9223372036854775808, 9223372036854775807) : error_outOfRange
        a5 == [1, 3, 2, 4, 5]
    a1 = ["1".clone(), "2".clone(), "3".clone()]
    test: ok, errorsCoordinates
        a1.swap(0, 2).nothing?()
        a1[0].unsafe_getI64(0) == 2
        a1[1].unsafe_getI64(0) == 2
        a1[2].unsafe_getI64(0) == 2
        a1.swap(1, 0).nothing?()
        a1[0].unsafe_getI64(0) == 2
        a1[1].unsafe_getI64(0) == 2
        a1[2].unsafe_getI64(0) == 2
        a1.swap(0, 3) : error_outOfRange
        a1[0].unsafe_getI64(0) == 2
        a1[1].unsafe_getI64(0) == 2
        a1[2].unsafe_getI64(0) == 2
        a1.swap(-1, 0) : error_outOfRange
        a1[0].unsafe_getI64(0) == 2
        a1[1].unsafe_getI64(0) == 2
        a1[2].unsafe_getI64(0) == 2
        a1.swap(0, -1) : error_outOfRange
        a1[0].unsafe_getI64(0) == 2
        a1[1].unsafe_getI64(0) == 2
        a1[2].unsafe_getI64(0) == 2
    a1 = [1, 2, 3].clone()
    a2 = a1
    test: ok, errorsCoordinates
        a1.swap(0, 2).nothing?()
        a1 == [3, 2, 1]
        a2 == [1, 2, 3]
        a1.swap(0, -1) : error_outOfRange
        a1 == [3, 2, 1]
        a2 == [1, 2, 3]
        a1.swap(0, 3) : error_outOfRange
        a1 == [3, 2, 1]
        a2 == [1, 2, 3]
        a1.swap(3, 0) : error_outOfRange
        a1 == [3, 2, 1]
        a2 == [1, 2, 3]


#noinline
def testArray_Delete$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].delete$(0, 0) == []
        [].delete$(1, 0) : error_outOfRange
        [].delete$(9223372036854775807, 0) : error_outOfRange
        [].delete$(-1, 0) : error_outOfRange
        [].delete$(-9223372036854775808, 0) : error_outOfRange
        [].delete$(0, 1) : error_outOfRange
        [].delete$(0, 9223372036854775807) : error_outOfRange
        [].delete$(0, -1) : error_outOfRange
        [].delete$(0, -9223372036854775808) : error_outOfRange
        [1].delete$(0, 0) == [1]
        [1].delete$(1, 0) == [1]
        [1].delete$(0, 1) == []
        [1].delete$(1, 1) : error_outOfRange
        [1].delete$(9223372036854775807, 0) : error_outOfRange
        [1].delete$(-1, 0) : error_outOfRange
        [1].delete$(-9223372036854775808, 0) : error_outOfRange
        [1].delete$(0, 2) : error_outOfRange
        [1].delete$(0, 9223372036854775807) : error_outOfRange
        [1].delete$(0, -1) : error_outOfRange
        [1].delete$(0, -9223372036854775808) : error_outOfRange
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(0, 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(0, 1) == [2, 3, 4, 5, 6, 7, 8, 9]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(0, 2) == [3, 4, 5, 6, 7, 8, 9]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(0, 9) == []
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(0, 10) : error_outOfRange
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(1, 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(1, 1) == [1, 3, 4, 5, 6, 7, 8, 9]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(1, 2) == [1, 4, 5, 6, 7, 8, 9]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(1, 8) == [1]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(1, 9) : error_outOfRange
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(4, 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(4, 1) == [1, 2, 3, 4, 6, 7, 8, 9]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(4, 2) == [1, 2, 3, 4, 7, 8, 9]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(4, 5) == [1, 2, 3, 4]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(4, 6) : error_outOfRange
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(8, 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(8, 1) == [1, 2, 3, 4, 5, 6, 7, 8]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(8, 2) : error_outOfRange
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(9, 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        [1, 2, 3, 4, 5, 6, 7, 8, 9].delete$(9, 1) : error_outOfRange
    var l1 Array = [1].clone()
    var l2 Array = [2].clone()
    var l3 Array = [3].clone()
    var l4 Array = [l1, l2, l3]
    var l5 Array = [l1, l2, l3].clone()
    var l6 Array = l4.delete$(1, 1)
    var l7 Array = l5.delete$(1, 1)
    test: ok, errorsCoordinates
        l6 == [[1], [3]]
        l7 == [[1], [3]]
        l1.unsafe_getI64(0) == 5
        l2.unsafe_getI64(0) == 3
        l3.unsafe_getI64(0) == 5

#noinline
def testArray_Delete(write ok Int, write errorsCoordinates List)
    var c1 Array = []
    var c2 Array = [1]
    var c3 Array = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    var c4 Array = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    var c5 Array = [1, 2, 3, 4, 5, 6, 7, 8, 9].clone()
    var c6 Array = [1, 2, 3, 4, 5, 6, 7, 8, 9].clone()
    var c7 Array = c6
    test: ok, errorsCoordinates
        c1.delete(0, 0).nothing?()
        c1 == []
        c1.delete(1, 0) : error_outOfRange
        c1 == []
        c1.delete(9223372036854775807, 0) : error_outOfRange
        c1 == []
        c1.delete(-1, 0) : error_outOfRange
        c1 == []
        c1.delete(-9223372036854775808, 0) : error_outOfRange
        c1 == []
        c1.delete(0, 1) : error_outOfRange
        c1 == []
        c1.delete(0, 9223372036854775807) : error_outOfRange
        c1 == []
        c1.delete(0, -1) : error_outOfRange
        c1 == []
        c1.delete(0, -9223372036854775808) : error_outOfRange
        c1 == []
        c2.delete(0, 0).nothing?()
        c2 == [1]
        c2.delete(1, 0).nothing?()
        c2 == [1]
        c2.delete(0, 2) : error_outOfRange
        c2 == [1]
        c2.delete(0, 9223372036854775807) : error_outOfRange
        c2 == [1]
        c2.delete(0, -1) : error_outOfRange
        c2 == [1]
        c2.delete(0, -9223372036854775807) : error_outOfRange
        c2 == [1]
        c2.delete(2, 0) : error_outOfRange
        c2 == [1]
        c2.delete(9223372036854775807, 0) : error_outOfRange
        c2 == [1]
        c2.delete(-1, 0) : error_outOfRange
        c2 == [1]
        c2.delete(-9223372036854775808, 0) : error_outOfRange
        c2 == [1]
        c3.delete(0, 10) : error_outOfRange
        c3 == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        c3.delete(1, 9) : error_outOfRange
        c3 == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        c3.delete(4, 6) : error_outOfRange
        c3 == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        c3.delete(9, 1) : error_outOfRange
        c3 == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        c3.delete(0, 0).nothing?()
        c3 == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        c3.delete(0, 1).nothing?()
        c3 == [2, 3, 4, 5, 6, 7, 8, 9]
        c3.delete(0, 2).nothing?()
        c3 == [4, 5, 6, 7, 8, 9]
        c3.delete(0, 6).nothing?()
        c3 == []
        c4.delete(1, 0).nothing?()
        c4 == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        c4.delete(1, 1).nothing?()
        c4 == [1, 3, 4, 5, 6, 7, 8, 9]
        c4.delete(1, 2).nothing?()
        c4 == [1, 5, 6, 7, 8, 9]
        c4.delete(1, 5).nothing?()
        c4 == [1]
        c5.delete(4, 0).nothing?()
        c5 == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        c5.delete(4, 1).nothing?()
        c5 == [1, 2, 3, 4, 6, 7, 8, 9]
        c5.delete(4, 2).nothing?()
        c5 == [1, 2, 3, 4, 8, 9]
        c5.delete(4, 2).nothing?()
        c5 == [1, 2, 3, 4]
        c6.delete(8, 0).nothing?()
        c6 == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        c6.delete(8, 1).nothing?()
        c6 == [1, 2, 3, 4, 5, 6, 7, 8]
        c6.delete(8, 0).nothing?()
        c6 == [1, 2, 3, 4, 5, 6, 7, 8]
        c7 == [1, 2, 3, 4, 5, 6, 7, 8, 9]
    var l1 Array = [1].clone()
    var l2 Array = [2].clone()
    var l3 Array = [3].clone()
    var l4 Array = [l1, l2, l3]
    var l5 Array = [l1, l2, l3].clone()
    var l6 Array = [l1, l2, l3].clone()
    var l7 Array = l6
    var l8 Array = l2
    test: ok, errorsCoordinates
        l4.delete(1, 1).nothing?()
        l5.delete(1, 1).nothing?()
        l6.delete(1, 1).nothing?()
        l7.delete(1, 1).nothing?()
        l4 == [[1], [3]]
        l5 == [[1], [3]]
        l6 == [[1], [3]]
        l7 == [[1], [3]]
        l1.unsafe_getI64(0) == 5
        l2.unsafe_getI64(0) == 2
        l3.unsafe_getI64(0) == 5
        l8 == l2

#noinline
def testArray_Insert$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].insert$(1, 1) : error_outOfRange
        [].insert$(9223372036854775807, 1) : error_outOfRange
        [].insert$(-1, 1) : error_outOfRange
        [].insert$(-9223372036854775808, 1) : error_outOfRange
        [].insert$(0, 1) == [1]
        [1].insert$(2, 1) : error_outOfRange
        [1].insert$(9223372036854775807, 1) : error_outOfRange
        [1].insert$(-1, 1) : error_outOfRange
        [1].insert$(-9223372036854775808, 1) : error_outOfRange
        [1].insert$(0, 2) == [2, 1]
        [1].insert$(1, 2) == [1, 2]
        [1, 2, 3, 4, 5].insert$(0, 10) == [10, 1, 2, 3, 4, 5]
        [1, 2, 3, 4, 5].insert$(2, 10) == [1, 2, 10, 3, 4, 5]
        [1, 2, 3, 4, 5].insert$(3, 10) == [1, 2, 3, 10, 4, 5]
        [1, 2, 3, 4, 5].insert$(5, 10) == [1, 2, 3, 4, 5, 10]
        [1, 2, 3, 4, 5].insert$(5, 1.0) : error_invalidType
        [1, 2, 3, 4, 5].insert$(0, nothing) : error_invalidType
        [].insert$(0, nothing) : error_invalidType
    var l1 Array = [1].clone()
    var l2 Array = [2].clone()
    var l3 Array = [3].clone()
    var l4 Array = [l1, l2, l3]
    var l5 Array = [l1, l2, l3].clone()
    var l6 Array = l4.insert$(3, l1)
    var l7 Array = l4.insert$(0, l1)
    var l8 Array = l5.insert$(3, l1)
    var l9 Array = l5.insert$(0, l1)
    test: ok, errorsCoordinates
        l6 == [[1], [2], [3], [1]]
        l7 == [[1], [1], [2], [3]]
        l8 == [[1], [2], [3], [1]]
        l9 == [[1], [1], [2], [3]]
        l1.unsafe_getI64(0) == 11
        l2.unsafe_getI64(0) == 7
        l3.unsafe_getI64(0) == 7
        l4.unsafe_getI64(0) == 1
        l5.unsafe_getI64(0) == 1
        l6.unsafe_getI64(0) == 1
        l7.unsafe_getI64(0) == 1
        l8.unsafe_getI64(0) == 1
        l9.unsafe_getI64(0) == 1

#noinline
def testArray_Insert(write ok Int, write errorsCoordinates List)
    var c1 Array = []
    var c2 Array = [1]
    test: ok, errorsCoordinates
        c1.insert(1, 1) : error_outOfRange
        c1 == []
        c1.insert(9223372036854775807, 1) : error_outOfRange
        c1 == []
        c1.insert(-1, 1) : error_outOfRange
        c1 == []
        c1.insert(-9223372036854775808, 1) : error_outOfRange
        c1 == []
        c1.insert(0, nothing) : error_invalidType
        c1 == []
        c1.insert(0, 1).nothing?()
        c1 == [1]
        c1.insert(2, 1) : error_outOfRange
        c1 == [1]
        c1.insert(9223372036854775807, 1) : error_outOfRange
        c1 == [1]
        c1.insert(-1, 1) : error_outOfRange
        c1 == [1]
        c1.insert(-9223372036854775808, 1) : error_outOfRange
        c1 == [1]
        c1.insert(0, 2).nothing?()
        c1 == [2, 1]
        c2.insert(1, 2).nothing?()
        c2 == [1, 2]
        c2.insert(0, 10).nothing?()
        c2 == [10, 1, 2]
        c2.insert(2, 15).nothing?()
        c2 == [10, 1, 15, 2]
        c2.insert(1, 3).nothing?()
        c2 == [10, 3,  1, 15, 2]
        c2.insert(3, 100).nothing?()
        c2 == [10, 3,  1, 100, 15, 2]
        c2.insert(7, 1) : error_outOfRange
        c2 == [10, 3,  1, 100, 15, 2]
        c2.insert(9223372036854775807, 1) : error_outOfRange
        c2 == [10, 3,  1, 100, 15, 2]
        c2.insert(-1, 1) : error_outOfRange
        c2 == [10, 3,  1, 100, 15, 2]
        c2.insert(-9223372036854775808, 1) : error_outOfRange
        c2 == [10, 3,  1, 100, 15, 2]
        c2.insert(0, 1.0) : error_invalidType
        c2 == [10, 3,  1, 100, 15, 2]
        c2.insert(0, nothing) : error_invalidType
        c2 == [10, 3,  1, 100, 15, 2]
    var l1 Array = [1].clone()
    var l2 Array = [2].clone()
    var l3 Array = [3].clone()
    var l4 Array = [l1, l2, l3]
    var l5 Array = [l1, l2, l3].clone()
    var l6 Array = [l1, l2, l3].clone()
    var l7 Array = l6
    var l8 Array = l2
    test: ok, errorsCoordinates
        l4.insert(0, l1).nothing?()
        l4.insert(4, l1).nothing?()
        l5.insert(0, l1).nothing?()
        l5.insert(4, l1).nothing?()
        l6.insert(0, l1).nothing?()
        l6.insert(4, l1).nothing?()
        l7.insert(0, l1).nothing?()
        l7.insert(4, l1).nothing?()
        l4 == [[1], [1], [2], [3], [1]]
        l5 == [[1], [1], [2], [3], [1]]
        l6 == [[1], [1], [2], [3], [1]]
        l7 == [[1], [1], [2], [3], [1]]
        l1.unsafe_getI64(0) == 13
        l2.unsafe_getI64(0) == 6
        l3.unsafe_getI64(0) == 5
        l4.unsafe_getI64(0) == 1
        l5.unsafe_getI64(0) == 1
        l6.unsafe_getI64(0) == 1
        l7.unsafe_getI64(0) == 1
        l8.unsafe_getI64(0) == 6
        l8 == l2

#noinline
def testArray_InsertPart$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].insertPart$(1, [1]) : error_outOfRange
        [].insertPart$(9223372036854775807, [1]) : error_outOfRange
        [].insertPart$(-1, [1]) : error_outOfRange
        [].insertPart$(-9223372036854775808, [1]) : error_outOfRange
        [].insertPart$(0, []) == []
        [].insertPart$(0, [1]) == [1]
        [].insertPart$(0, [1, 2, 3]) == [1, 2, 3]
        [1].insertPart$(2, [1]) : error_outOfRange
        [1].insertPart$(9223372036854775807, [1]) : error_outOfRange
        [1].insertPart$(-1, [1]) : error_outOfRange
        [1].insertPart$(-9223372036854775808, [1]) : error_outOfRange
        [1].insertPart$(0, []) == [1]
        [1].insertPart$(1, []) == [1]
        [1].insertPart$(0, [2]) == [2, 1]
        [1].insertPart$(0, [2, 3]) == [2, 3, 1]
        [1].insertPart$(1, [1, 3]) == [1, 1, 3]
        [1, 2, 3, 4, 5].insertPart$(0, [-1, -2]) == [-1, -2, 1, 2, 3, 4, 5]
        [1, 2, 3, 4, 5].insertPart$(2, [-1, -2]) == [1, 2, -1, -2, 3, 4, 5]
        [1, 2, 3, 4, 5].insertPart$(3, [-1, -2]) == [1, 2, 3, -1, -2, 4, 5]
        [1, 2, 3, 4, 5].insertPart$(5, [-1, -2]) == [1, 2, 3, 4, 5, -1, -2]
        [1, 2, 3, 4, 5].insertPart$(5, [1.0]) : error_invalidType
    var l1 Array = [1].clone()
    var l2 Array = [2].clone()
    var l3 Array = [3].clone()
    var l4 Array = [l1, l2, l3]
    var l5 Array = [l1, l2, l3].clone()
    var l6 Array = l4.insertPart$(2, l5)
    var l7 Array = l4.insertPart$(1, l5)
    var l8 Array = l5.insertPart$(2, l4)
    var l9 Array = l5.insertPart$(1, l4)
    test: ok, errorsCoordinates
        l6 == [[1], [2], [1], [2], [3], [3]]
        l7 == [[1], [1], [2], [3], [2], [3]]
        l8 == [[1], [2], [1], [2], [3], [3]]
        l9 == [[1], [1], [2], [3], [2], [3]]
        l1.unsafe_getI64(0) == 11
        l2.unsafe_getI64(0) == 11
        l3.unsafe_getI64(0) == 11
        l4.unsafe_getI64(0) == 1
        l5.unsafe_getI64(0) == 1
        l6.unsafe_getI64(0) == 1
        l7.unsafe_getI64(0) == 1
        l8.unsafe_getI64(0) == 1
        l9.unsafe_getI64(0) == 1

#noinline
def testArray_InsertPart(write ok Int, write errorsCoordinates List)
    var c1 Array = []
    var c2 Array = [1]
    test: ok, errorsCoordinates
        c1.insertPart(1, [1]) : error_outOfRange
        c1 == []
        c1.insertPart(9223372036854775807, [1]) : error_outOfRange
        c1 == []
        c1.insertPart(-1, [1]) : error_outOfRange
        c1 == []
        c1.insertPart(-9223372036854775808, [1]) : error_outOfRange
        c1 == []
        c1.insertPart(0, []).nothing?()
        c1 == []
        c1.insertPart(0, [1]).nothing?()
        c1 == [1]
        c1.insertPart(2, [1]) : error_outOfRange
        c1 == [1]
        c1.insertPart(9223372036854775807, [1]) : error_outOfRange
        c1 == [1]
        c1.insertPart(-1, [1]) : error_outOfRange
        c1 == [1]
        c1.insertPart(-9223372036854775808, [1]) : error_outOfRange
        c1 == [1]
        c1.insertPart(0, []).nothing?()
        c1 == [1]
        c1.insertPart(1, []).nothing?()
        c1 == [1]
        c1.insertPart(0, [2]).nothing?()
        c1 == [2, 1]
        c2.insertPart(1, [2]).nothing?()
        c2 == [1, 2]
        c2.insertPart(0, [2, 3]).nothing?()
        c2 == [2, 3, 1, 2]
        c2.insertPart(1, [1, 3]).nothing?()
        c2 == [2, 1, 3, 3, 1, 2]
        c2.insertPart(2, []).nothing?()
        c2 == [2, 1, 3, 3, 1, 2]
        c2.insertPart(3, []).nothing?()
        c2 == [2, 1, 3, 3, 1, 2]
        c2.insertPart(0, []).nothing?()
        c2 == [2, 1, 3, 3, 1, 2]
        c2.insertPart(6, []).nothing?()
        c2 == [2, 1, 3, 3, 1, 2]
        c2.insertPart(6, [-1, -2]).nothing?()
        c2 == [2, 1, 3, 3, 1, 2, -1, -2]
        c2.insertPart(0, [1.0]) : error_invalidType
        c2 == [2, 1, 3, 3, 1, 2, -1, -2]
    var l1 Array = [1].clone()
    var l2 Array = [2].clone()
    var l3 Array = [3].clone()
    var l4 Array = [l1, l2, l3]
    var l5 Array = [l1, l2, l3].clone()
    var l6 Array = [l1, l2, l3].clone()
    var l7 Array = l6
    var l8 Array = l2
    test: ok, errorsCoordinates
        l4.insertPart(2, l5).nothing?()
        l5.insertPart(2, l6).nothing?()
        l6.insertPart(2, l4).nothing?()
        l7.insertPart(2, l4).nothing?()
        l4 == [[1], [2], [1], [2], [3], [3]]
        l5 == [[1], [2], [1], [2], [3], [3]]
        l6 == [[1], [2], [1], [2], [1], [2], [3], [3], [3]]
        l7 == [[1], [2], [1], [2], [1], [2], [3], [3], [3]]
        l1.unsafe_getI64(0) == 11
        l2.unsafe_getI64(0) == 12
        l3.unsafe_getI64(0) == 11
        l4.unsafe_getI64(0) == 1
        l5.unsafe_getI64(0) == 1
        l6.unsafe_getI64(0) == 1
        l7.unsafe_getI64(0) == 1
        l8.unsafe_getI64(0) == 12
        l8 == l2

#noinline
def testArray_Repeat(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        Array.repeat(12, 0) == []
        Array.repeat(12, 1) == [12]
        Array.repeat(12, 2) == [12, 12]
        Array.repeat(12, 10) == [12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
        Array.repeat(12, 11) == [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
        Array.repeat(12, 16) == [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
        Array.repeat(12, -1) : error_outOfRange
        Array.repeat(12, -2) : error_outOfRange
        Array.repeat(12, -9223372036854775808) : error_outOfRange
        Array.repeat(nothing, 12) : error_invalidType
    var l1 Array = [1].clone()
    test: ok, errorsCoordinates
        l1.unsafe_getI64(0) == 1
    var l2 Array = Array.repeat(l1, 0)
    test: ok, errorsCoordinates
        l1.unsafe_getI64(0) == 1
    var l3 Array = Array.repeat(l1, 3)
    test: ok, errorsCoordinates
        l1.unsafe_getI64(0) == 4
        l2 == []
        l3 == [[1], [1], [1]]

#noinline
def testArray_RepeatPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].repeatPart(0) == []
        [].repeatPart(120) == []
        [].repeatPart(-1) : error_outOfRange
        [].repeatPart(-9223372036854775808) : error_outOfRange
        [13].repeatPart(0) == []
        [13].repeatPart(1) == [13]
        [13].repeatPart(2) == [13, 13]
        [13].repeatPart(10) == [13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
        [13].repeatPart(11) == [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
        [13].repeatPart(16) == [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
        [13].repeatPart(-1) : error_outOfRange
        [13].repeatPart(-9223372036854775808) : error_outOfRange
        [13, 110, 100].repeatPart(0) == []
        [13, 110, 100].repeatPart(1) == [13, 110, 100]
        [13, 110, 100].repeatPart(2) == [13, 110, 100, 13, 110, 100]
        [13, 110, 100].repeatPart(10) == [13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100]
        [13, 110, 100].repeatPart(11) == [13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100]
        [13, 110, 100].repeatPart(16) == [13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100, 13, 110, 100]
        [13, 110, 100].repeatPart(-1) : error_outOfRange
        [13, 110, 100].repeatPart(-9223372036854775808) : error_outOfRange
    var l1 Array = [1].clone()
    var l2 Array = [l1].clone()
    test: ok, errorsCoordinates
        l1.unsafe_getI64(0) == 2
        l2.unsafe_getI64(0) == 1
        l1 == [1]
        l2 == [[1]]
    var l3 Array = l2.repeatPart(0)
    test: ok, errorsCoordinates
        l1.unsafe_getI64(0) == 2
        l2.unsafe_getI64(0) == 1
        l1 == [1]
        l2 == [[1]]
        l3 == []
    var l4 Array = l2.repeatPart(3)
    test: ok, errorsCoordinates
        l1.unsafe_getI64(0) == 5
        l2.unsafe_getI64(0) == 1
        l1 == [1]
        l2 == [[1]]
        l4 == [[1], [1], [1]]

#noinline
def testArray_ReversePart(write ok Int, write errorsCoordinates List)
    var c Array = []
    test: ok, errorsCoordinates
        c.reversePart(0, 0).nothing?()
        c == []
        c.reversePart(0, 1) : error_outOfRange
        c == []
        c.reversePart(1, 1) : error_outOfRange
        c == []
        c.reversePart(1, 0) : error_outOfRange
        c == []
        c.reversePart(-1, -1) : error_outOfRange
        c == []
        c.reversePart(-9223372036854775808, 0) : error_outOfRange
        c == []
        c.reversePart(0, -9223372036854775808) : error_outOfRange
        c == []
        c.reversePart(0, 9223372036854775807) : error_outOfRange
        c == []
        c.reversePart(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == []
    c = [1]
    test: ok, errorsCoordinates
        c.reversePart(0, 0).nothing?()
        c == [1]
        c.reversePart(0, 1).nothing?()
        c == [1]
        c.reversePart(1, 1).nothing?()
        c == [1]
        c.reversePart(0, 2) : error_outOfRange
        c == [1]
        c.reversePart(2, 1) : error_outOfRange
        c == [1]
        c.reversePart(1, 2) : error_outOfRange
        c == [1]
        c.reversePart(2, 2) : error_outOfRange
        c == [1]
        c.reversePart(1, 0) : error_outOfRange
        c == [1]
        c.reversePart(-1, -1) : error_outOfRange
        c == [1]
        c.reversePart(-9223372036854775808, 1) : error_outOfRange
        c == [1]
        c.reversePart(0, -9223372036854775808) : error_outOfRange
        c == [1]
        c.reversePart(0, 9223372036854775807) : error_outOfRange
        c == [1]
        c.reversePart(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == [1]
    c = [1, 2]
    test: ok, errorsCoordinates
        c.reversePart(0, 0).nothing?()
        c == [1, 2]
        c.reversePart(0, 1).nothing?()
        c == [1, 2]
        c.reversePart(1, 1).nothing?()
        c == [1, 2]
        c.reversePart(1, 2).nothing?()
        c == [1, 2]
        c.reversePart(2, 2).nothing?()
        c == [1, 2]
        c.reversePart(0, 2).nothing?()
        c == [2, 1]
        c.reversePart(0, 3) : error_outOfRange
        c == [2, 1]
        c.reversePart(3, 0) : error_outOfRange
        c == [2, 1]
        c.reversePart(1, 3) : error_outOfRange
        c == [2, 1]
        c.reversePart(3, 3) : error_outOfRange
        c == [2, 1]
        c.reversePart(1, 0) : error_outOfRange
        c == [2, 1]
        c.reversePart(-1, -1) : error_outOfRange
        c == [2, 1]
        c.reversePart(-9223372036854775808, 0) : error_outOfRange
        c == [2, 1]
        c.reversePart(0, -9223372036854775808) : error_outOfRange
        c == [2, 1]
        c.reversePart(0, 9223372036854775807) : error_outOfRange
        c == [2, 1]
        c.reversePart(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == [2, 1]
    c = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    test: ok, errorsCoordinates
        c.reversePart(0, 0).nothing?()
        c == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        c.reversePart(0, 1).nothing?()
        c == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        c.reversePart(1, 1).nothing?()
        c == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        c.reversePart(1, 2).nothing?()
        c == [1, 2, 3, 4, 5, 6, 7, 8, 9]
        c.reversePart(0, 5).nothing?()
        c == [5, 4, 3, 2, 1, 6, 7, 8, 9]
        c.reversePart(5, 9).nothing?()
        c == [5, 4, 3, 2, 1, 9, 8, 7, 6]
        c.reversePart(0, 9).nothing?()
        c == [6, 7, 8, 9, 1, 2, 3, 4, 5]
        c.reversePart(3, 7).nothing?()
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5]
        c.reversePart(0, 10) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5]
        c.reversePart(3, 0) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5]
        c.reversePart(9, 0) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5]
        c.reversePart(10, 0) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5]
        c.reversePart(3, -1) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5]
        c.reversePart(-1, -1) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5]
        c.reversePart(-9223372036854775808, 0) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5]
        c.reversePart(0, -9223372036854775808) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5]
        c.reversePart(0, 9223372036854775807) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5]
        c.reversePart(-9223372036854775808, 9223372036854775807) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5]
        c.reversePart(9223372036854775807, -9223372036854775808) : error_outOfRange
        c == [6, 7, 8, 3, 2, 1, 9, 4, 5]

#noinline
def testArray_Dump(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].dump(0) == "Type: STD::Array = []\n"
        [].dump(1) == "  Type: STD::Array = []\n"
        [1].dump(0) == "Type: STD::Array = [\n  0:\n    Type: STD::Int = 1\n]\n"
        [1].dump(1) == "  Type: STD::Array = [\n    0:\n      Type: STD::Int = 1\n  ]\n"
        [1, 12].dump(0) == "Type: STD::Array = [\n  0:\n    Type: STD::Int = 1\n  1:\n    Type: STD::Int = 12\n]\n"
        [1, 12].dump(1) == "  Type: STD::Array = [\n    0:\n      Type: STD::Int = 1\n    1:\n      Type: STD::Int = 12\n  ]\n"
