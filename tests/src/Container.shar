module Main

type Container
    l List

def intArrayToBytes_Container(array Array) Bytes
    var result Bytes = Bytes()
    parse _, int Int = array
        result.addItem(intToByte(int))
    return result

attach Container to Equal

attach Container to Shar__sugar__equal
    def shar__sugar__equal(container1, container2 Container) Bool
        return container1.l~() == container2.l~()

attach Container to Shar__sugar__notEqual
    def shar__sugar__notEqual(container1, container2 Container) Bool
        return container1.l~() != container2.l~()

attach Container to Shar__sugar__getFromAToLast
    #alwaysinline
    def shar__sugar__getFromAToLast(container Container, a Int) Container
        return Container{l : container.l~()[a:]}

attach Container to Shar__sugar__getFromFirstToA
    #alwaysinline
    def shar__sugar__getFromFirstToA(container Container, a Int) Container
        return Container{l : container.l~()[:a]}

attach Container to Shar__sugar__getRange
    def shar__sugar__getRange(container Container, from, to $Any) Container
        return Container{l : container.l~()[from:to]}

attach Container to Shar__sugar__getItem
    def shar__sugar__getItem(container Container, index $Any) $Any
        return container.l~()[index]

attach Container to Shar__sugar__add
    def shar__sugar__add(container, addedContainer Container) Container
        return Container{l : container.l~() + addedContainer.l~()}

attach Container to Shar__sugar__addSet
    def shar__sugar__addSet(write container, addedContainer Container)
        container = container + addedContainer

attach Container to StringWriter
    def toString(container Container) String
        return container.l~().toString()

attach Container to Hashable
    def getHash(container Container) Int
        return container.l~().getHash()

    def getRandomizedHash(container Container) Int
        return container.l~().getRandomizedHash()

attach Container to Long
    def length(container Container) Int
        return container.l~().length()

attach Container to Empty
    def createEmpty(noread type Container) Container
        return Container{l : {}}

attach Container to Put
    def put(write container Container, index, newItem $Any) $Any
        var l List = container.l`({})
        const result $Any = l.put(index, newItem)
        container.l`(l)
        return result

attach Container to Iterable
    #alwaysinline nothrow
    def parse__init(container Container) Int
        return 0

    #alwaysinline nothrow
    def parse__predicate(container Container, index Int) Bool
        return index != container.length()

    #alwaysinline nothrow
    def parse__next(container Container, write index Int)
        index++

    #alwaysinline nothrow
    def parse__get__key(container Container, index Int) Int
        return index

    #alwaysinline nothrow
    def parse__get__item(container Container, index Int) $Any
        return container[index]

attach Container to Container
    def addItem(write container Container, newItem $Any)
        var l List = container.l~()
        l.addItem(newItem)
        container.l`(l)

    def addItem$(container Container, newItem $Any) Container
        return Container{l : container.l~().addItem$(newItem)}

def listToContainer(list List) Container
    return Container{l : list}

type SortableContainer
    a Array

attach SortableContainer to Equal

attach SortableContainer to Shar__sugar__equal
    def shar__sugar__equal(container1, container2 SortableContainer) Bool
        return container1.a~() == container2.a~()

attach SortableContainer to Shar__sugar__notEqual
    def shar__sugar__notEqual(container1, container2 SortableContainer) Bool
        return container1.a~() != container2.a~()

attach SortableContainer to Ordered
    def compare(container1, container2 SortableContainer) CompareResult
        return container1.a~().compare(container2.a~())

attach SortableContainer to Shar__sugar__less
    def shar__sugar__less(contaner1, contaner2 SortableContainer) Bool
        return contaner1.sortableContainerToArray() < contaner2.sortableContainerToArray()

attach SortableContainer to Shar__sugar__great
    def shar__sugar__great(contaner1, contaner2 SortableContainer) Bool
        return contaner1.sortableContainerToArray() > contaner2.sortableContainerToArray()

attach SortableContainer to Shar__sugar__lessOrEqual
    def shar__sugar__lessOrEqual(contaner1, contaner2 SortableContainer) Bool
        return contaner1.sortableContainerToArray() <= contaner2.sortableContainerToArray()

attach SortableContainer to Shar__sugar__greatOrEqual
    def shar__sugar__greatOrEqual(contaner1, contaner2 SortableContainer) Bool
        return contaner1.sortableContainerToArray() >= contaner2.sortableContainerToArray()

attach SortableContainer to Shar__sugar__getFromAToLast
    #alwaysinline
    def shar__sugar__getFromAToLast(container SortableContainer, a Int) SortableContainer
        return SortableContainer{a : container.a~()[a:]}

attach SortableContainer to Shar__sugar__getFromFirstToA
    #alwaysinline
    def shar__sugar__getFromFirstToA(container SortableContainer, a Int) SortableContainer
        return SortableContainer{a : container.a~()[:a]}

attach SortableContainer to Shar__sugar__getRange
    def shar__sugar__getRange(container SortableContainer, from, to $Any) SortableContainer
        return SortableContainer{a : container.a~()[from:to]}

attach SortableContainer to Shar__sugar__getItem
    def shar__sugar__getItem(container SortableContainer, index $Any) $Any
        return container.a~()[index]

attach SortableContainer to Shar__sugar__add
    def shar__sugar__add(container, addedSortableContainer SortableContainer) SortableContainer
        return SortableContainer{a : container.a~() + addedSortableContainer.a~()}

attach SortableContainer to Shar__sugar__addSet
    def shar__sugar__addSet(write container, addedSortableContainer SortableContainer)
        container = container + addedSortableContainer

attach SortableContainer to StringWriter
    def toString(container SortableContainer) String
        return container.a~().toString()

attach SortableContainer to Hashable
    def getHash(container SortableContainer) Int
        return container.a~().getHash()

    def getRandomizedHash(container SortableContainer) Int
        return container.a~().getRandomizedHash()

attach SortableContainer to Long
    def length(container SortableContainer) Int
        return container.a~().length()

attach SortableContainer to Empty
    def createEmpty(noread type SortableContainer) SortableContainer
        return SortableContainer{a: []}

attach SortableContainer to Put
    def put(write container SortableContainer, index, newItem $Any) $Any
        var a Array = container.a`([])
        const result $Any = a.put(index, newItem)
        container.a`(a)
        return result

attach SortableContainer to Iterable
    #alwaysinline nothrow
    def parse__init(container SortableContainer) Int
        return 0

    #alwaysinline nothrow
    def parse__predicate(container SortableContainer, index Int) Bool
        return index != container.length()

    #alwaysinline nothrow
    def parse__next(container SortableContainer, write index Int)
        index++

    #alwaysinline nothrow
    def parse__get__key(container SortableContainer, index Int) Int
        return index

    #alwaysinline nothrow
    def parse__get__item(container SortableContainer, index Int) $Any
        return container[index]

attach SortableContainer to Container
    def addItem(write container SortableContainer, newItem $Any)
        container = container.addItem$(newItem)

    def addItem$(container SortableContainer, newItem $Any) SortableContainer
        return SortableContainer{a : container.a~().addItem$(newItem)}

attach SortableContainer to ItemTypeNumber
    def itemTypeNumber(container SortableContainer) Int
        if container.empty?()
            return nothing.typeNumber()
        return container[0].typeNumber()

def arrayToSortableContainer(array Array) SortableContainer
    return SortableContainer{a: array}

def sortableContainerToArray(container SortableContainer) Array
    return container.a~()

type NotEqType_Container

type ItemForStableSort_Container
    sortedItem Int
    id         Int

def ItemForStableSort_Container(sortedItem, id Int) ItemForStableSort_Container
    return ItemForStableSort_Container{sortedItem : sortedItem,  id : id}

attach ItemForStableSort_Container to Equal

attach ItemForStableSort_Container to Shar__sugar__equal
    def shar__sugar__equal(item1, item2 ItemForStableSort_Container) Bool
        return item1.sortedItem~() == item2.sortedItem~()

attach ItemForStableSort_Container to Shar__sugar__notEqual
    def shar__sugar__notEqual(item1, item2 ItemForStableSort_Container) Bool
        return item1.sortedItem~() != item2.sortedItem~()

attach ItemForStableSort_Container to Ordered
    def compare(item1, item2 ItemForStableSort_Container) CompareResult
        return item1.sortedItem~().compare(item2.sortedItem~())

attach ItemForStableSort_Container to Shar__sugar__less
    def shar__sugar__less(item1, item2 ItemForStableSort_Container) Bool
        return item1.sortedItem~() < item2.sortedItem~()

attach ItemForStableSort_Container to Shar__sugar__great
    def shar__sugar__great(item1, item2 ItemForStableSort_Container) Bool
        return item1.sortedItem~() > item2.sortedItem~()

attach ItemForStableSort_Container to Shar__sugar__lessOrEqual
    def shar__sugar__lessOrEqual(item1, item2 ItemForStableSort_Container) Bool
        return item1.sortedItem~() <= item2.sortedItem~()

attach ItemForStableSort_Container to Shar__sugar__greatOrEqual
    def shar__sugar__greatOrEqual(item1, item2 ItemForStableSort_Container) Bool
        return item1.sortedItem~() >= item2.sortedItem~()

def testContainer(write ok Int, write errorsCoordinates List)
    testContainer_Swap(ok, errorsCoordinates)
    testContainer_Contain(ok, errorsCoordinates)
    testContainer_ContainFromAtoB(ok, errorsCoordinates)
    testContainer_ContainAny(ok, errorsCoordinates)
    testContainer_ContainAnyFromAtoB(ok, errorsCoordinates)
    testContainer_ContainPart(ok, errorsCoordinates)
    testContainer_ContainPartFromAtoB(ok, errorsCoordinates)
    testContainer_ContainAnyPart(ok, errorsCoordinates)
    testContainer_ContainAnyPartFromAtoB(ok, errorsCoordinates)
    testContainer_Copy(ok, errorsCoordinates)
    testContainer_CopySelf(ok, errorsCoordinates)
    testContainer_Move(ok, errorsCoordinates)
    testContainer_Count(ok, errorsCoordinates)
    testContainer_CountFromAtoB(ok, errorsCoordinates)
    testContainer_CountAny(ok, errorsCoordinates)
    testContainer_CountAnyFromAtoB(ok, errorsCoordinates)
    testContainer_CountPart(ok, errorsCoordinates)
    testContainer_CountPartFromAtoB(ok, errorsCoordinates)
    testContainer_CountAnyPart(ok, errorsCoordinates)
    testContainer_CountAnyPartFromAtoB(ok, errorsCoordinates)
    testContainer_PartsEqual?(ok, errorsCoordinates)
    testContainer_HasPrefix?(ok, errorsCoordinates)
    testContainer_HasSuffix?(ok, errorsCoordinates)
    testContainer_Look(ok, errorsCoordinates)
    testContainer_LookN(ok, errorsCoordinates)
    testContainer_LookFromAtoB(ok, errorsCoordinates)
    testContainer_LookNFromAtoB(ok, errorsCoordinates)
    testContainer_LookAny(ok, errorsCoordinates)
    testContainer_LookNAny(ok, errorsCoordinates)
    testContainer_LookAnyFromAtoB(ok, errorsCoordinates)
    testContainer_LookAnyNFromAtoB(ok, errorsCoordinates)
    testContainer_LookPart(ok, errorsCoordinates)
    testContainer_LookNPart(ok, errorsCoordinates)
    testContainer_LookPartFromAtoB(ok, errorsCoordinates)
    testContainer_LookNPartFromAtoB(ok, errorsCoordinates)
    testContainer_LookAnyPart(ok, errorsCoordinates)
    testContainer_LookAnyNPart(ok, errorsCoordinates)
    testContainer_LookAnyPartFromAtoB(ok, errorsCoordinates)
    testContainer_LookAnyNPartFromAtoB(ok, errorsCoordinates)
    testContainer_LookAll(ok, errorsCoordinates)
    testContainer_LookAllFromAtoB(ok, errorsCoordinates)
    testContainer_LookAllAny(ok, errorsCoordinates)
    testContainer_LookAllAnyFromaAtoB(ok, errorsCoordinates)
    testContainer_LookAllParts(ok, errorsCoordinates)
    testContainer_LookAllPartsFromAtoB(ok, errorsCoordinates)
    testContainer_LookAllAnyParts(ok, errorsCoordinates)
    testContainer_LookAllAnyPartsFromAtoB(ok, errorsCoordinates)
    testContainer_LookBack(ok, errorsCoordinates)
    testContainer_LookBackN(ok, errorsCoordinates)
    testContainer_LookBackFromAtoB(ok, errorsCoordinates)
    testContainer_LookBackNFromAtoB(ok, errorsCoordinates)
    testContainer_LookBackAny(ok, errorsCoordinates)
    testContainer_LookBackNAny(ok, errorsCoordinates)
    testContainer_LookBackAnyFromAtoB(ok, errorsCoordinates)
    testContainer_LookBackAnyNFromAtoB(ok, errorsCoordinates)
    testContainer_LookBackPart(ok, errorsCoordinates)
    testContainer_LookBackNPart(ok, errorsCoordinates)
    testContainer_LookBackPartFromAtoB(ok, errorsCoordinates)
    testContainer_LookBackNPartFromAtoB(ok, errorsCoordinates)
    testContainer_LookBackAnyPart(ok, errorsCoordinates)
    testContainer_LookBackAnyNPart(ok, errorsCoordinates)
    testContainer_LookBackAnyPartFromAtoB(ok, errorsCoordinates)
    testContainer_LookBackAnyNPartFromAtoB(ok, errorsCoordinates)
    testContainer_RepackTo(ok, errorsCoordinates)
    testContainer_Delete$(ok, errorsCoordinates)
    testContainer_Delete(ok, errorsCoordinates)
    testContainer_Replace$(ok, errorsCoordinates)
    testContainer_Replace(ok, errorsCoordinates)
    testContainer_ReplaceAny$(ok, errorsCoordinates)
    testContainer_ReplaceAny(ok, errorsCoordinates)
    testContainer_ReplacePart$(ok, errorsCoordinates)
    testContainer_ReplacePart(ok, errorsCoordinates)
    testContainer_ReplaceAnyPart$(ok, errorsCoordinates)
    testContainer_ReplaceAnyPart(ok, errorsCoordinates)
    testContainer_Split(ok, errorsCoordinates)
    testContainer_SplitByPart(ok, errorsCoordinates)
    testContainer_SplitByAny(ok, errorsCoordinates)
    testContainer_SplitByAnyPart(ok, errorsCoordinates)
    testContainer_Insert$(ok, errorsCoordinates)
    testContainer_Insert(ok, errorsCoordinates)
    testContainer_InsertPart$(ok, errorsCoordinates)
    testContainer_InsertPart(ok, errorsCoordinates)
    testContainer_Repeat(ok, errorsCoordinates)
    testContainer_RepeatPart(ok, errorsCoordinates)
    testContainer_ReverseFromAtoB$(ok, errorsCoordinates)
    testContainer_ReverseFromAtoB(ok, errorsCoordinates)
    testContainer_Reverse$(ok, errorsCoordinates)
    testContainer_Reverse(ok, errorsCoordinates)
    testContainer_Sort(ok, errorsCoordinates)
    testContainer_StableSort(ok, errorsCoordinates)
    testContainer_Join(ok, errorsCoordinates)
    testContainer_Uniq$(ok, errorsCoordinates)
    testContainer_Uniq(ok, errorsCoordinates)
    testContainer_Serialize(ok, errorsCoordinates)

#noinline
def testContainer_Swap(write ok Int, write errorsCoordinates List)
    var container1 Container = listToContainer({})
    var container2 Container = listToContainer({1})
    var container3 Container = listToContainer({1, 2.2})
    var container4 Container = listToContainer({1, 2.2, '3'})
    test: ok, errorsCoordinates
        container1.swap(0, 0) : eid_outOfRange
        container1.swap(-1, 0) : eid_outOfRange
        container1.swap(-1, 1) : eid_outOfRange
        container1.swap(-1, -1) : eid_outOfRange
        container1.swap(1, 1) : eid_outOfRange
        container2.swap(0, 0).nothing?()
        container2.l~() == {1}
        container2.swap(1, 1) : eid_outOfRange
        container2.swap(-1, 1) : eid_outOfRange
        container2.swap(1, -1) : eid_outOfRange
        container2.swap(-1, -1) : eid_outOfRange
        container2.swap(1, 1) : eid_outOfRange
        container3.swap(0, 0).nothing?()
        container3.l~() == {1, 2.2}
        container3.swap(1, 1).nothing?()
        container3.l~() == {1, 2.2}
        container3.swap(0, 1).nothing?()
        container3.l~() == {2.2, 1}
        container3.swap(1, 0).nothing?()
        container3.l~() == {1, 2.2}
        container3.swap(2, 1) : eid_outOfRange
        container3.swap(1, 2) : eid_outOfRange
        container3.swap(1, -1) : eid_outOfRange
        container3.swap(-1, 1) : eid_outOfRange
        container4.swap(0, 0).nothing?()
        container4.l~() == {1, 2.2, '3'}
        container4.swap(2, 2).nothing?()
        container4.l~() == {1, 2.2, '3'}
        container4.swap(0, 2).nothing?()
        container4.l~() == {'3', 2.2, 1}
        container4.swap(1, 0).nothing?()
        container4.l~() == {2.2, '3', 1}
        container4.swap(3, 1) : eid_outOfRange
        container4.swap(2, 3) : eid_outOfRange
        container4.swap(0, -1) : eid_outOfRange
        container4.swap(-1, 0) : eid_outOfRange

#noinline
def testContainer_Contain(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        !listToContainer({}).contain?(1)
        !listToContainer({}).contain?(0)
        listToContainer({0}).contain?(0)
        !listToContainer({0}).contain?(1)
        listToContainer({0, 1.1}).contain?(0)
        listToContainer({0, 1.1}).contain?(1.1)
        !listToContainer({0, 1.1}).contain?(-1)
        listToContainer({0, 1.1, 'a'}).contain?(0)
        listToContainer({0, 1.1, 'a'}).contain?(1.1)
        listToContainer({0, 1.1, 'a'}).contain?('a')
        !listToContainer({0, 1.1, 'a'}).contain?(-1)
        listToContainer({0, 1.1, nothing, 'a'}).contain?('a')

#noinline
def testContainer_ContainFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        !listToContainer({}).containFromAtoB?('a', 0, 0)
        listToContainer({}).containFromAtoB?('a', 1, 0) : eid_outOfRange
        listToContainer({}).containFromAtoB?('a', 0, 1) : eid_outOfRange
        listToContainer({'a'}).containFromAtoB?('a', 0, 1)
        !listToContainer({'a'}).containFromAtoB?('a', 0, 0)
        !listToContainer({'a'}).containFromAtoB?('a', 1, 1)
        !listToContainer({'a'}).containFromAtoB?('b', 0, 1)
        !listToContainer({'a'}).containFromAtoB?(97, 0, 1)
        listToContainer({'a'}).containFromAtoB?('a', 1, 0) : eid_outOfRange
        listToContainer({'a'}).containFromAtoB?(97, -1, 0) : eid_outOfRange
        listToContainer({'a'}).containFromAtoB?(97, 0, -1) : eid_outOfRange
        listToContainer({'a'}).containFromAtoB?('a', 0, 2) : eid_outOfRange
        listToContainer({'a'}).containFromAtoB?('a', 2, 0) : eid_outOfRange
        listToContainer({'a', -2}).containFromAtoB?('a', 0, 1)
        listToContainer({'a', -2}).containFromAtoB?('a', 0, 2)
        listToContainer({'a', -2}).containFromAtoB?(-2, 0, 2)
        listToContainer({'a', -2}).containFromAtoB?(-2, 1, 2)
        !listToContainer({'a', -2}).containFromAtoB?('a', 0, 0)
        !listToContainer({'a', -2}).containFromAtoB?(-2, 0, 0)
        !listToContainer({'a', -2}).containFromAtoB?('a', 1, 1)
        !listToContainer({'a', -2}).containFromAtoB?('a', 1, 2)
        !listToContainer({'a', -2}).containFromAtoB?(-2, 1, 1)
        !listToContainer({'a', -2}).containFromAtoB?('b', 0, 2)
        !listToContainer({'a', -2}).containFromAtoB?(97, 0, 2)
        listToContainer({'a', -2}).containFromAtoB?('a', 1, 0) : eid_outOfRange
        listToContainer({'a', -2}).containFromAtoB?('a', 3, 0) : eid_outOfRange
        listToContainer({'a', -2}).containFromAtoB?(97, -1, 0) : eid_outOfRange
        listToContainer({'a', -2}).containFromAtoB?(97, 0, -1) : eid_outOfRange
        listToContainer({'a', -2}).containFromAtoB?('a', 0, 3) : eid_outOfRange
        listToContainer({'a', -2}).containFromAtoB?('a', 3, 0) : eid_outOfRange
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).containFromAtoB?('a', 0, 6)
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).containFromAtoB?(3, 0, 6)
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).containFromAtoB?(-2, 0, 6)
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).containFromAtoB?('2', 0, 6)
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).containFromAtoB?('2', 2, 6)
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).containFromAtoB?(1000, 0, 6)
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).containFromAtoB?(-1.0, 0, 6)
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).containFromAtoB?(3, 0, 6)
        !listToContainer({'a', -2, '2', 1000, -1.0, 3}).containFromAtoB?('2', 3, 6)
        !listToContainer({'a', -2, '2', 1000, -1.0, 3}).containFromAtoB?(3, 0, 5)
        !listToContainer({'a', -2, '2', 1000, -1.0, 3}).containFromAtoB?('b', 0, 6)

#noinline
def testContainer_ContainAny(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        !listToContainer({}).containAny?({0})
        !listToContainer({}).containAny?({1})
        !listToContainer({}).containAny?({1, 2})
        !listToContainer({}).containAny?({nothing})
        listToContainer({0}).containAny?({0})
        listToContainer({0}).containAny?({0, 1})
        listToContainer({0}).containAny?({1, 0})
        !listToContainer({0}).containAny?({1})
        !listToContainer({0}).containAny?({1, 2})
        !listToContainer({0}).containAny?({nothing})
        listToContainer({0}).containAny?({0, nothing})
        listToContainer({0}).containAny?({nothing, 0})
        listToContainer({0, 1.1}).containAny?({0})
        listToContainer({0, 1.1}).containAny?({1.1})
        listToContainer({0, 1.1}).containAny?({0, 2})
        listToContainer({0, 1.1}).containAny?({2, 0})
        listToContainer({0, 1.1}).containAny?({1.1, 0})
        listToContainer({0, 1.1}).containAny?({0, 1.1})
        listToContainer({0, 1.1}).containAny?({2, 0, 1.1})
        listToContainer({0, 1.1}).containAny?({2, -2, 1.1})
        !listToContainer({0, 1.1}).containAny?({2, -2, 0.0})
        listToContainer({0, 1.1, nothing, 'a'}).containAny?({'a'})
        listToContainer({0, 1.1, nothing, 'a'}).containAny?({0})
        listToContainer({0, 1.1, nothing, 'a'}).containAny?({3, 'a'})
        listToContainer({0, 1.1, nothing, 'a'}).containAny?({3, nothing, 'a'})
        !listToContainer({0, 1.1, nothing, 'a'}).containAny?({3, nothing})
        listToContainer({}).containAny?({}) : eid_nothingToLook
        listToContainer({1, 2}).containAny?({}) : eid_nothingToLook

#noinline
def testContainer_ContainAnyFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        !listToContainer({}).containAnyFromAtoB?({0}, 0, 0)
        !listToContainer({}).containAnyFromAtoB?({1, 2}, 0, 0)
        !listToContainer({}).containAnyFromAtoB?({nothing}, 0, 0)
        listToContainer({0}).containAnyFromAtoB?({0}, 0, 1)
        listToContainer({0}).containAnyFromAtoB?({0, 1}, 0, 1)
        listToContainer({0}).containAnyFromAtoB?({1, 0}, 0, 1)
        listToContainer({0}).containAnyFromAtoB?({0, 0}, 0, 1)
        listToContainer({0}).containAnyFromAtoB?({0, nothing}, 0, 1)
        listToContainer({0}).containAnyFromAtoB?({nothing, 0}, 0, 1)
        !listToContainer({0}).containAnyFromAtoB?({1}, 0, 1)
        !listToContainer({0}).containAnyFromAtoB?({0}, 0, 0)
        !listToContainer({0}).containAnyFromAtoB?({0}, 1, 1)
        !listToContainer({0}).containAnyFromAtoB?({1, 2}, 0, 1)
        !listToContainer({0}).containAnyFromAtoB?({0, 2}, 0, 0)
        !listToContainer({0}).containAnyFromAtoB?({1, 0}, 1, 1)
        listToContainer({0, 1.1}).containAnyFromAtoB?({0}, 0, 2)
        listToContainer({0, 1.1}).containAnyFromAtoB?({2, 0}, 0, 2)
        listToContainer({0, 1.1}).containAnyFromAtoB?({1.1, 0}, 0, 2)
        listToContainer({0, 1.1}).containAnyFromAtoB?({1.1, 2}, 0, 2)
        listToContainer({0, 1.1}).containAnyFromAtoB?({0, 2}, 0, 1)
        listToContainer({0, 1.1}).containAnyFromAtoB?({2, 0}, 0, 1)
        listToContainer({0, 1.1}).containAnyFromAtoB?({1.1, 2}, 1, 2)
        listToContainer({0, 1.1}).containAnyFromAtoB?({2, 1.1}, 1, 2)
        !listToContainer({0, 1.1}).containAnyFromAtoB?({2, -2, 0.0}, 0, 2)
        !listToContainer({0, 1.1}).containAnyFromAtoB?({0}, 1, 2)
        !listToContainer({0, 1.1}).containAnyFromAtoB?({1.1}, 0, 1)
        !listToContainer({0, 1.1}).containAnyFromAtoB?({0, 1}, 1, 2)
        !listToContainer({0, 1.1}).containAnyFromAtoB?({1, 0}, 1, 2)
        !listToContainer({0, 1.1}).containAnyFromAtoB?({1.1, 1}, 0, 1)
        !listToContainer({0, 1.1}).containAnyFromAtoB?({1, 1.1}, 0, 1)
        !listToContainer({0, 1.1}).containAnyFromAtoB?({1, 1.1}, 0, 0)
        !listToContainer({0, 1.1}).containAnyFromAtoB?({1, 1.1}, 1, 1)
        !listToContainer({0, 1.1}).containAnyFromAtoB?({1, 1.1}, 2, 2)
        listToContainer({0, 1.1, nothing, 'a'}).containAnyFromAtoB?({'a'}, 0, 4)
        listToContainer({0, 1.1, nothing, 'a'}).containAnyFromAtoB?({'a'}, 1, 4)
        listToContainer({0, 1.1, nothing, 'a'}).containAnyFromAtoB?({'a'}, 2, 4)
        listToContainer({0, 1.1, nothing, 'a'}).containAnyFromAtoB?({'a'}, 3, 4)
        listToContainer({0, 1.1, nothing, 'a'}).containAnyFromAtoB?({0, 'b'}, 0, 1)
        listToContainer({0, 1.1, nothing, 'a'}).containAnyFromAtoB?({'b', 0}, 0, 1)
        listToContainer({0, 1.1, nothing, 'a'}).containAnyFromAtoB?({'b', 0}, 0, 4)
        listToContainer({0, 1.1, nothing, 'a'}).containAnyFromAtoB?({3, 'a'}, 2, 4)
        listToContainer({0, 1.1, nothing, 'a'}).containAnyFromAtoB?({nothing, 3, 'a'}, 2, 4)
        !listToContainer({0, 1.1, nothing, 'a'}).containAnyFromAtoB?({nothing, 3}, 2, 4)
        !listToContainer({0, 1.1, nothing, 'a'}).containAnyFromAtoB?({'a'}, 0, 3)
        listToContainer({}).containAnyFromAtoB?({'a'}, 0, 1) : eid_outOfRange
        listToContainer({}).containAnyFromAtoB?({'a'}, 1, 0) : eid_outOfRange
        listToContainer({}).containAnyFromAtoB?({'a'}, 1, 1) : eid_outOfRange
        listToContainer({}).containAnyFromAtoB?({'b'}, -1, 1) : eid_outOfRange
        listToContainer({}).containAnyFromAtoB?({'a'}, 1, -1) : eid_outOfRange
        listToContainer({}).containAnyFromAtoB?({'c'}, -1, -1) : eid_outOfRange
        listToContainer({}).containAnyFromAtoB?({'a'}, -10, -10) : eid_outOfRange
        listToContainer({}).containAnyFromAtoB?({}, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).containAnyFromAtoB?({}, 0, 0) : eid_nothingToLook

#noinline
def testContainer_ContainPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        !listToContainer({}).containPart?(listToContainer({0}))
        !listToContainer({}).containPart?(listToContainer({'a'}))
        listToContainer({1}).containPart?(listToContainer({1}))
        !listToContainer({2}).containPart?(listToContainer({1}))
        !listToContainer({2}).containPart?(listToContainer({2, 1}))
        !listToContainer({2}).containPart?(listToContainer({1, 2}))
        listToContainer({1, 2, nothing, 2, 3, 4}).containPart?(listToContainer({1}))
        listToContainer({1, 2, nothing, 2, 3, 4}).containPart?(listToContainer({4}))
        listToContainer({1, 2, nothing, 2, 3, 4}).containPart?(listToContainer({1, 2}))
        listToContainer({1, 2, nothing, 2, 3, 4}).containPart?(listToContainer({2, 3}))
        listToContainer({1, 2, nothing, 2, 3, 4}).containPart?(listToContainer({2, 3, 4}))
        listToContainer({1, 2, nothing, 2, 3, 4}).containPart?(listToContainer({3, 4}))
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPart?(listToContainer({2, 2}))
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPart?(listToContainer({5}))
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPart?(listToContainer({1, 1}))
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPart?(listToContainer({4, 4}))
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPart?(listToContainer({4, 1}))
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPart?(listToContainer({4, 5}))
        !listToContainer({nothing}).containPart?(listToContainer({nothing}))
        listToContainer({}).containPart?(listToContainer({})) : eid_nothingToLook
        listToContainer({1, 2}).containPart?(listToContainer({})) : eid_nothingToLook

#noinline
def testContainer_ContainPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        !listToContainer({}).containPartFromAtoB?(listToContainer({0}), 0, 0)
        !listToContainer({}).containPartFromAtoB?(listToContainer({'a'}), 0, 0)
        listToContainer({1}).containPartFromAtoB?(listToContainer({1}), 0, 1)
        !listToContainer({1}).containPartFromAtoB?(listToContainer({1}), 0, 0)
        !listToContainer({1}).containPartFromAtoB?(listToContainer({1}), 1, 1)
        !listToContainer({2}).containPartFromAtoB?(listToContainer({1}), 0, 1)
        !listToContainer({2}).containPartFromAtoB?(listToContainer({1}), 0, 0)
        !listToContainer({2}).containPartFromAtoB?(listToContainer({1}), 1, 1)
        !listToContainer({2}).containPartFromAtoB?(listToContainer({2, 1}), 0, 1)
        !listToContainer({2}).containPartFromAtoB?(listToContainer({1, 2}), 0, 1)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({1}), 0, 1)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({1}), 0, 2)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({1}), 0, 6)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({4}), 0, 6)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({4}), 1, 6)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({4}), 2, 6)
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({4}), 2, 5)
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({4}), 0, 5)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({1, 2}), 0, 6)
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({1, 2}), 1, 6)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2, 3}), 0, 6)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2, 3}), 0, 5)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2, 3}), 1, 5)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2, 3}), 3, 5)
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2, 3}), 3, 4)
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2, 3}), 4, 6)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2, 3, 4}), 0, 6)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2, 3, 4}), 3, 6)
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2, 3, 4}), 0, 5)
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2, 3, 4}), 4, 6)
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2, 2}), 0, 6)
        !listToContainer({nothing}).containPartFromAtoB?(listToContainer({nothing}), 0, 0)
        !listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2, nothing}), 0, 6)
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2}), -1, 2) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2}), 2, 1) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).containPartFromAtoB?(listToContainer({2}), -10, -1) : eid_outOfRange
        listToContainer({}).containPartFromAtoB?(listToContainer({}), 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).containPartFromAtoB?(listToContainer({}), 0, 0) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).containPartFromAtoB?(listToContainer({1, 2}), 0, 3)
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).containPartFromAtoB?(listToContainer({1, 2}), 4, 6)

#noinline
def testContainer_ContainAnyPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        !listToContainer({}).containAnyPart?([listToContainer({1, 2}), listToContainer({23})])
        !listToContainer({}).containAnyPart?([listToContainer({1, 2})])
        !listToContainer({}).containAnyPart?([listToContainer({nothing})])
        listToContainer({}).containAnyPart?([{nothing}]) : eid_invalidType
        listToContainer({1}).containAnyPart?([listToContainer({1})])
        listToContainer({1}).containAnyPart?([listToContainer({1}), listToContainer({2})])
        listToContainer({1}).containAnyPart?([listToContainer({2}), listToContainer({1})])
        !listToContainer({1}).containAnyPart?([listToContainer({2}), listToContainer({0})])
        !listToContainer({1}).containAnyPart?([listToContainer({0})])
        !listToContainer({1}).containAnyPart?([listToContainer({1, 2})])
        !listToContainer({1}).containAnyPart?([listToContainer({2, 1})])
        listToContainer({1}).containAnyPart?([{12}]) : eid_invalidType
        listToContainer({1, 2}).containAnyPart?([listToContainer({0}), listToContainer({1})])
        listToContainer({1, 2}).containAnyPart?([listToContainer({1}), listToContainer({0})])
        listToContainer({1, 2}).containAnyPart?([listToContainer({1, 2}), listToContainer({0})])
        listToContainer({1, 2}).containAnyPart?([listToContainer({0}), listToContainer({1, 2})])
        !listToContainer({1, 2}).containAnyPart?([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})])
        listToContainer({1, 2}).containAnyPart?([{12}]) : eid_invalidType
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPart?([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})])
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPart?([listToContainer({0, 2, 3}), listToContainer({4, 'a'}), listToContainer({1, 1, 2})])
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPart?([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})])
        !listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPart?([listToContainer({2, 3, 4, 4}), listToContainer({4, 'b', nothing}), listToContainer({12, "bbbb"})])
        listToContainer({}).containAnyPart?([]) : eid_nothingToLook
        listToContainer({}).containAnyPart?([listToContainer({})]) : eid_nothingToLook
        listToContainer({}).containAnyPart?([listToContainer({}), listToContainer({12})]) : eid_nothingToLook
        listToContainer({}).containAnyPart?([listToContainer({12}), listToContainer({})]) : eid_nothingToLook
        listToContainer({12}).containAnyPart?([]) : eid_nothingToLook
        listToContainer({12}).containAnyPart?([listToContainer({})]) : eid_nothingToLook
        listToContainer({12}).containAnyPart?([listToContainer({}), listToContainer({12})]) : eid_nothingToLook
        listToContainer({12}).containAnyPart?([listToContainer({12}), listToContainer({})]) : eid_nothingToLook
        listToContainer({1, 12}).containAnyPart?([]) : eid_nothingToLook
        listToContainer({1, 12}).containAnyPart?([listToContainer({})]) : eid_nothingToLook
        listToContainer({1, 12}).containAnyPart?([listToContainer({}), listToContainer({12})]) : eid_nothingToLook
        listToContainer({1, 12}).containAnyPart?([listToContainer({12}), listToContainer({})]) : eid_nothingToLook
        listToContainer({12, 1}).containAnyPart?([]) : eid_nothingToLook
        listToContainer({12, 1}).containAnyPart?([listToContainer({})]) : eid_nothingToLook
        listToContainer({12, 1}).containAnyPart?([listToContainer({}), listToContainer({12})]) : eid_nothingToLook
        listToContainer({12, 1}).containAnyPart?([listToContainer({12}), listToContainer({})]) : eid_nothingToLook

#noinline
def testContainer_ContainAnyPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        !listToContainer({}).containAnyPartFromAtoB?([listToContainer({1, 2}), listToContainer({23})], 0, 0)
        listToContainer({}).containAnyPartFromAtoB?([], 0, 0) : eid_nothingToLook
        listToContainer({}).containAnyPartFromAtoB?([listToContainer({}), listToContainer({23})], 0, 0) : eid_nothingToLook
        listToContainer({}).containAnyPartFromAtoB?([listToContainer({1}), listToContainer({})], 0, 0) : eid_nothingToLook
        listToContainer({}).containAnyPartFromAtoB?([listToContainer({1, 2}), listToContainer({23})], 0, 1) : eid_outOfRange
        listToContainer({}).containAnyPartFromAtoB?([listToContainer({1, 2}), listToContainer({23})], -1, 0) : eid_outOfRange
        listToContainer({}).containAnyPartFromAtoB?([listToContainer({1, 2}), listToContainer({23})], 0, -1) : eid_outOfRange
        !listToContainer({}).containAnyPartFromAtoB?([listToContainer({1, 2})], 0, 0)
        !listToContainer({}).containAnyPartFromAtoB?([listToContainer({nothing})], 0, 0)
        listToContainer({}).containAnyPartFromAtoB?([listToContainer({1, 2})], 0, 1) : eid_outOfRange
        listToContainer({}).containAnyPartFromAtoB?([listToContainer({1, 2})], -1, 0) : eid_outOfRange
        listToContainer({}).containAnyPartFromAtoB?([listToContainer({1, 2})], 0, -1) : eid_outOfRange
        listToContainer({}).containAnyPart?([{12}]) : eid_invalidType
        !listToContainer({1}).containAnyPartFromAtoB?([listToContainer({1})], 0, 0)
        !listToContainer({1}).containAnyPartFromAtoB?([listToContainer({1})], 1, 1)
        listToContainer({1}).containAnyPartFromAtoB?([listToContainer({1})], 0, 1)
        listToContainer({1}).containAnyPartFromAtoB?([listToContainer({})], 0, 1) : eid_nothingToLook
        listToContainer({1}).containAnyPartFromAtoB?([], 0, 1) : eid_nothingToLook
        listToContainer({1}).containAnyPartFromAtoB?([listToContainer({})], 1, 1) : eid_nothingToLook
        listToContainer({1}).containAnyPartFromAtoB?([], 1, 1) : eid_nothingToLook
        listToContainer({1}).containAnyPartFromAtoB?([listToContainer({})], 0, 0) : eid_nothingToLook
        listToContainer({1}).containAnyPartFromAtoB?([], 0, 0) : eid_nothingToLook
        listToContainer({1}).containAnyPartFromAtoB?([listToContainer({1})], -1, 0) : eid_outOfRange
        listToContainer({1}).containAnyPartFromAtoB?([listToContainer({1})], 0, 2) : eid_outOfRange
        listToContainer({1}).containAnyPartFromAtoB?([listToContainer({1})], 0, 9223372036854775807) : eid_outOfRange
        listToContainer({1}).containAnyPartFromAtoB?([listToContainer({1})], 0, -9223372036854775808) : eid_outOfRange
        listToContainer({1}).containAnyPartFromAtoB?([listToContainer({1})], -9223372036854775808, 9223372036854775807) : eid_outOfRange
        listToContainer({1}).containAnyPartFromAtoB?([listToContainer({1})], 1, 0) : eid_outOfRange
        listToContainer({1}).containAnyPartFromAtoB?([listToContainer({1}), listToContainer({2})], 0, 1)
        !listToContainer({1}).containAnyPartFromAtoB?([listToContainer({1}), listToContainer({2})], 1, 1)
        !listToContainer({1}).containAnyPartFromAtoB?([listToContainer({1}), listToContainer({2})], 0, 0)
        listToContainer({1}).containAnyPart?([{1}]) : eid_invalidType
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPartFromAtoB?([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 7)
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPartFromAtoB?([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 3)
        !listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPartFromAtoB?([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 2)
        !listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPartFromAtoB?([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 1, 3)
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPartFromAtoB?([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], -1, 3) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPartFromAtoB?([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 8) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPartFromAtoB?([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], -1, 8) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPartFromAtoB?([listToContainer({}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPartFromAtoB?([listToContainer({1, 2, 3}), listToContainer({}), listToContainer({1, 1, 2})], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPartFromAtoB?([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({})], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPartFromAtoB?([listToContainer({}), listToContainer({}), listToContainer({})], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).containAnyPartFromAtoB?([], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).containAnyPartFromAtoB?([listToContainer({1, 2})], 0, 3)
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).containAnyPartFromAtoB?([listToContainer({1, 2})], 4, 6)

#noinline
def testContainer_Copy(write ok Int, write errorsCoordinates List)
    var c1 Container = listToContainer({})
    var c2 Container = listToContainer({1})
    var c3 Container = listToContainer({1, 'a', "2323", 0, 0})
    test: ok, errorsCoordinates
        copy(c1, 0, listToContainer({}), 0, 0).nothing?()
        c1.length() == 0
        copy(c1, 0, listToContainer({1}), 0, 0).nothing?()
        c1.length() == 0
        copy(c1, 0, listToContainer({1, 2}), 1, 0).nothing?()
        c1.length() == 0
        copy(c1, -1, listToContainer({}), 0, 0) :eid_outOfRange
        c1.length() == 0
        copy(c1, -9223372036854775808, listToContainer({}), 0, 0) :eid_outOfRange
        c1.length() == 0
        copy(c1, 1, listToContainer({}), 0, 0) :eid_outOfRange
        c1.length() == 0
        copy(c1, 9223372036854775807, listToContainer({}), 0, 0) :eid_outOfRange
        c1.length() == 0
        copy(c1, 0, listToContainer({}), -1, 0) :eid_outOfRange
        c1.length() == 0
        copy(c1, 0, listToContainer({}), -9223372036854775808, 0) :eid_outOfRange
        c1.length() == 0
        copy(c1, 0, listToContainer({}), 1, 0) :eid_outOfRange
        c1.length() == 0
        copy(c1, 0, listToContainer({}), 9223372036854775807, 0) :eid_outOfRange
        c1.length() == 0
        copy(c1, 0, listToContainer({}), 0, -1) :eid_outOfRange
        c1.length() == 0
        copy(c1, 0, listToContainer({}), 0, -9223372036854775808) :eid_outOfRange
        c1.length() == 0
        copy(c1, 0, listToContainer({}), 0, 1) :eid_outOfRange
        c1.length() == 0
        copy(c1, 0, listToContainer({}), 0, 9223372036854775807) :eid_outOfRange
        c1.length() == 0
        copy(c2, 0, listToContainer({}), 0, 0).nothing?()
        c2 == listToContainer({1})
        copy(c2, 1, listToContainer({}), 0, 0).nothing?()
        c2 == listToContainer({1})
        copy(c2, 1, listToContainer({2}), 1, 0).nothing?()
        c2 == listToContainer({1})
        copy(c2, 0, listToContainer({2}), 0, 1).nothing?()
        c2 == listToContainer({2})
        copy(c2, 0, listToContainer({3, 4, 5}), 0, 1).nothing?()
        c2 == listToContainer({3})
        copy(c2, 0, listToContainer({3, 4, 5}), 1, 1).nothing?()
        c2 == listToContainer({4})
        copy(c2, 0, listToContainer({3, 4, 5}), 2, 1).nothing?()
        c2 == listToContainer({5})
        copy(c2, 0, listToContainer({3, 4, 5}), 0, 2) : eid_outOfRange
        c2 == listToContainer({5})
        copy(c2, 1, listToContainer({3, 4, 5}), 0, 1) : eid_outOfRange
        c2 == listToContainer({5})
        copy(c2, 0, listToContainer({3, 4, 5}), 2, 2) : eid_outOfRange
        c2 == listToContainer({5})
        copy(c2, -1, listToContainer({3, 4, 5}), 0, 1) : eid_outOfRange
        c2 == listToContainer({5})
        copy(c2, 2, listToContainer({3, 4, 5}), 0, 0) : eid_outOfRange
        c2 == listToContainer({5})
        copy(c2, 0, listToContainer({3, 4, 5}), -1, 0) : eid_outOfRange
        c2 == listToContainer({5})
        copy(c2, 0, listToContainer({3, 4, 5}), 0, -1) : eid_outOfRange
        c2 == listToContainer({5})
        copy(c3, 0, listToContainer({}), 0, 0).nothing?()
        c3 == listToContainer({1, 'a', "2323", 0, 0})
        copy(c3, 1, listToContainer({}), 0, 0).nothing?()
        c3 == listToContainer({1, 'a', "2323", 0, 0})
        copy(c3, 4, listToContainer({}), 0, 0).nothing?()
        c3 == listToContainer({1, 'a', "2323", 0, 0})
        copy(c3, 0, listToContainer({1, 2, 3, 4}), 0, 0).nothing?()
        c3 == listToContainer({1, 'a', "2323", 0, 0})
        copy(c3, 0, listToContainer({11, 2, 3, 4}), 0, 1).nothing?()
        c3 == listToContainer({11, 'a', "2323", 0, 0})
        copy(c3, 1, listToContainer({11, 2, 3, 4}), 0, 4).nothing?()
        c3 == listToContainer({11, 11, 2, 3, 4})
        copy(c3, 2, listToContainer({11, 2, 3, 4}), 2, 2).nothing?()
        c3 == listToContainer({11, 11, 3, 4, 4})
        copy(c3, 5, listToContainer({11, 2, 3, 4}), 4, 0).nothing?()
        c3 == listToContainer({11, 11, 3, 4, 4})
        copy(c3, 5, listToContainer({11, 2, 3, 4}), 5, 0) : eid_outOfRange
        c3 == listToContainer({11, 11, 3, 4, 4})
        copy(c3, 6, listToContainer({11, 2, 3, 4}), 4, 0) : eid_outOfRange
        c3 == listToContainer({11, 11, 3, 4, 4})
        copy(c3, 5, listToContainer({11, 2, 3, 4}), 4, 1) : eid_outOfRange
        c3 == listToContainer({11, 11, 3, 4, 4})
        copy(c3, 5, listToContainer({11, 2, 3, 4}), 4, -1) : eid_outOfRange
        c3 == listToContainer({11, 11, 3, 4, 4})
        copy(c3, -1, listToContainer({11, 2, 3, 4}), 4, 0) : eid_outOfRange
        c3 == listToContainer({11, 11, 3, 4, 4})
        copy(c3, 0, listToContainer({11, 2, 3, 4}), -1, 0) : eid_outOfRange
        c3 == listToContainer({11, 11, 3, 4, 4})

#noinline
def testContainer_CopySelf(write ok Int, write errorsCoordinates List)
    var c1 Container = listToContainer({})
    var c2 Container = listToContainer({1})
    var c3 Container = listToContainer({1, 2, 3, '4', 5})
    var c4 Container = listToContainer({1, 2, 3, 4, 5 ,6, 7, 8, 9, 10})
    test: ok, errorsCoordinates
        copySelf(c1, 0, 0, 0).nothing?()
        c1.length() == 0
        copySelf(c1, -1, 0, 0) : eid_outOfRange
        c1.length() == 0
        copySelf(c1, -9223372036854775808, 0, 0) : eid_outOfRange
        c1.length() == 0
        copySelf(c1, 1, 0, 0) : eid_outOfRange
        c1.length() == 0
        copySelf(c1, 9223372036854775807, 0, 0) : eid_outOfRange
        c1.length() == 0
        copySelf(c1, 0, -1, 0) : eid_outOfRange
        c1.length() == 0
        copySelf(c1, 0, -9223372036854775808, 0) : eid_outOfRange
        c1.length() == 0
        copySelf(c1, 0, 1, 0) : eid_outOfRange
        c1.length() == 0
        copySelf(c1, 0, 9223372036854775807, 0) : eid_outOfRange
        c1.length() == 0
        copySelf(c1, 0, 0, -1) : eid_outOfRange
        c1.length() == 0
        copySelf(c1, 0, 0, -9223372036854775808) : eid_outOfRange
        c1.length() == 0
        copySelf(c1, 0, 0, 1) : eid_outOfRange
        c1.length() == 0
        copySelf(c1, 0, 0, 9223372036854775807) : eid_outOfRange
        c1.length() == 0
        copySelf(c2, 0, 0, 0).nothing?()
        c2 == listToContainer({1})
        copySelf(c2, 0, 0, 1).nothing?()
        c2 == listToContainer({1})
        copySelf(c2, 0, 1, 0).nothing?()
        c2 == listToContainer({1})
        copySelf(c2, 1, 0, 0).nothing?()
        c2 == listToContainer({1})
        copySelf(c2, 1, 1, 0).nothing?()
        c2 == listToContainer({1})
        copySelf(c2, 0, 1, 1) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c2, 1, 0, 1) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c2, -1, 0, 0) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c2, -9223372036854775808, 0, 0) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c2, 2, 0, 0) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c2, 9223372036854775807, 0, 0) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c2, 0, -1, 0) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c2, 0, -9223372036854775808, 0) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c2, 0, 2, 0) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c2, 0, 9223372036854775807, 0) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c2, 0, 0, -1) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c2, 0, 0, -9223372036854775808) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c2, 0, 0, 2) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c2, 0, 0, 9223372036854775807) : eid_outOfRange
        c2 == listToContainer({1})
        copySelf(c3, 0, 0, 0).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        copySelf(c3, 1, 1, 0).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        copySelf(c3, 4, 4, 0).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        copySelf(c3, 5, 5, 0).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        copySelf(c3, 0, 0, 1).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        copySelf(c3, 1, 1, 1).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        copySelf(c3, 4, 4, 1).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        copySelf(c3, 0, 0, 5).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        copySelf(c3, 0, 2, 2).nothing?()
        c3 == listToContainer({1, 2, 1, 2, 5})
        copySelf(c3, 2, 0, 3).nothing?()
        c3 == listToContainer({1, 2, 5, 2, 5})
        copySelf(c3, 0, 2, 3).nothing?()
        c3 == listToContainer({1, 2, 1, 2, 5})
        copySelf(c3, 1, 0, 4).nothing?()
        c3 == listToContainer({2, 1, 2, 5, 5})
        copySelf(c3, 5, 5, 1) : eid_outOfRange
        c3 == listToContainer({2, 1, 2, 5, 5})
        copySelf(c3, 0, 0, 6) : eid_outOfRange
        c3 == listToContainer({2, 1, 2, 5, 5})
        copySelf(c3, 1, 1, 5) : eid_outOfRange
        c3 == listToContainer({2, 1, 2, 5, 5})
        copySelf(c3, 4, 4, 2) : eid_outOfRange
        c3 == listToContainer({2, 1, 2, 5, 5})
        copySelf(c3, 4, 0, 2) : eid_outOfRange
        c3 == listToContainer({2, 1, 2, 5, 5})
        copySelf(c3, -1, 0, 0) : eid_outOfRange
        c3 == listToContainer({2, 1, 2, 5, 5})
        copySelf(c3, 0, -1, 0) : eid_outOfRange
        c3 == listToContainer({2, 1, 2, 5, 5})
        copySelf(c3, 0, 0, -1) : eid_outOfRange
        c3 == listToContainer({2, 1, 2, 5, 5})
        copySelf(c3, -1, -1, -1) : eid_outOfRange
        c3 == listToContainer({2, 1, 2, 5, 5})
        copySelf(c4, 0, 5, 1).nothing?()
        c4 == listToContainer({1, 2, 3, 4, 5 ,1, 7, 8, 9, 10})
        copySelf(c4, 0, 5, 3).nothing?()
        c4 == listToContainer({1, 2, 3, 4, 5 ,1, 2, 3, 9, 10})
        copySelf(c4, 5, 0, 4).nothing?()
        c4 == listToContainer({1, 2, 3, 9, 5 ,1, 2, 3, 9, 10})
        copySelf(c4, 0, 4, 3).nothing?()
        c4 == listToContainer({1, 2, 3, 9, 1, 2, 3, 3, 9, 10})
        copySelf(c4, 4, 0, 4).nothing?()
        c4 == listToContainer({1, 2, 3, 3, 1, 2, 3, 3, 9, 10})
        copySelf(c4, 0, 5, 5).nothing?()
        c4 == listToContainer({1, 2, 3, 3, 1, 1, 2, 3, 3, 1})
        copySelf(c4, 5, 2, 5).nothing?()
        c4 == listToContainer({1, 2, 1, 2, 3, 3, 1, 3, 3, 1})
        copySelf(c4, 0, 3, 7).nothing?()
        c4 == listToContainer({1, 2, 1, 1, 2, 1, 2, 3, 3, 1})
        copySelf(c4, 1, 0, 9).nothing?()
        c4 == listToContainer({2, 1, 1, 2, 1, 2, 3, 3, 1, 1})
        copySelf(c4, 0, 1, 9).nothing?()
        c4 == listToContainer({2, 2, 1, 1, 2, 1, 2, 3, 3, 1})

#noinline
def testContainer_Move(write ok Int, write errorsCoordinates List)
    var c1 Container = listToContainer({})
    var c2 Container = listToContainer({1})
    var c3 Container = listToContainer({1, 2, 3, '4', 5})
    var c4 Container = listToContainer({1, 2, 3, 4, 5 ,6, 7, 8, 9, 10})
    test: ok, errorsCoordinates
        move(c1, 0, 0, 0).nothing?()
        c1.length() == 0
        move(c1, -1, 0, 0) : eid_outOfRange
        c1.length() == 0
        move(c1, -9223372036854775808, 0, 0) : eid_outOfRange
        c1.length() == 0
        move(c1, 1, 0, 0) : eid_outOfRange
        c1.length() == 0
        move(c1, 9223372036854775807, 0, 0) : eid_outOfRange
        c1.length() == 0
        move(c1, 0, -1, 0) : eid_outOfRange
        c1.length() == 0
        move(c1, 0, -9223372036854775808, 0) : eid_outOfRange
        c1.length() == 0
        move(c1, 0, 1, 0) : eid_outOfRange
        c1.length() == 0
        move(c1, 0, 9223372036854775807, 0) : eid_outOfRange
        c1.length() == 0
        move(c1, 0, 0, -1) : eid_outOfRange
        c1.length() == 0
        move(c1, 0, 0, -9223372036854775808) : eid_outOfRange
        c1.length() == 0
        move(c1, 0, 0, 1) : eid_outOfRange
        c1.length() == 0
        move(c1, 0, 0, 9223372036854775807) : eid_outOfRange
        c1.length() == 0
        move(c2, 0, 0, 0).nothing?()
        c2 == listToContainer({1})
        move(c2, 0, 0, 1).nothing?()
        c2 == listToContainer({1})
        move(c2, 0, 1, 0).nothing?()
        c2 == listToContainer({1})
        move(c2, 1, 0, 0).nothing?()
        c2 == listToContainer({1})
        move(c2, 1, 1, 0).nothing?()
        c2 == listToContainer({1})
        move(c2, 0, 1, 1) : eid_outOfRange
        c2 == listToContainer({1})
        move(c2, 1, 0, 1) : eid_outOfRange
        c2 == listToContainer({1})
        move(c2, -1, 0, 0) : eid_outOfRange
        c2 == listToContainer({1})
        move(c2, -9223372036854775808, 0, 0) : eid_outOfRange
        c2 == listToContainer({1})
        move(c2, 2, 0, 0) : eid_outOfRange
        c2 == listToContainer({1})
        move(c2, 9223372036854775807, 0, 0) : eid_outOfRange
        c2 == listToContainer({1})
        move(c2, 0, -1, 0) : eid_outOfRange
        c2 == listToContainer({1})
        move(c2, 0, -9223372036854775808, 0) : eid_outOfRange
        c2 == listToContainer({1})
        move(c2, 0, 2, 0) : eid_outOfRange
        c2 == listToContainer({1})
        move(c2, 0, 9223372036854775807, 0) : eid_outOfRange
        c2 == listToContainer({1})
        move(c2, 0, 0, -1) : eid_outOfRange
        c2 == listToContainer({1})
        move(c2, 0, 0, -9223372036854775808) : eid_outOfRange
        c2 == listToContainer({1})
        move(c2, 0, 0, 2) : eid_outOfRange
        c2 == listToContainer({1})
        move(c2, 0, 0, 9223372036854775807) : eid_outOfRange
        c2 == listToContainer({1})
        move(c3, 0, 0, 0).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        move(c3, 1, 1, 0).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        move(c3, 4, 4, 0).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        move(c3, 5, 5, 0).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        move(c3, 0, 0, 1).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        move(c3, 1, 1, 1).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        move(c3, 4, 4, 1).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        move(c3, 0, 0, 5).nothing?()
        c3 == listToContainer({1, 2, 3, '4', 5})
        move(c3, 0, 2, 2).nothing?()
        c3 == listToContainer({3, '4', 1, 2, 5})
        move(c3, 2, 0, 3).nothing?()
        c3 == listToContainer({1, 2, 5, 3, '4'})
        move(c3, 0, 2, 3).nothing?()
        c3 == listToContainer({3, '4', 1, 2, 5})
        move(c3, 1, 0, 4).nothing?()
        c3 == listToContainer({'4', 1, 2, 5, 3})
        move(c3, 5, 5, 1) : eid_outOfRange
        c3 == listToContainer({'4', 1, 2, 5, 3})
        move(c3, 0, 0, 6) : eid_outOfRange
        c3 == listToContainer({'4', 1, 2, 5, 3})
        move(c3, 1, 1, 5) : eid_outOfRange
        c3 == listToContainer({'4', 1, 2, 5, 3})
        move(c3, 4, 4, 2) : eid_outOfRange
        c3 == listToContainer({'4', 1, 2, 5, 3})
        move(c3, 4, 0, 2) : eid_outOfRange
        c3 == listToContainer({'4', 1, 2, 5, 3})
        move(c3, -1, 0, 0) : eid_outOfRange
        c3 == listToContainer({'4', 1, 2, 5, 3})
        move(c3, 0, -1, 0) : eid_outOfRange
        c3 == listToContainer({'4', 1, 2, 5, 3})
        move(c3, 0, 0, -1) : eid_outOfRange
        c3 == listToContainer({'4', 1, 2, 5, 3})
        move(c3, -1, -1, -1) : eid_outOfRange
        c3 == listToContainer({'4', 1, 2, 5, 3})
        move(c4, 0, 5, 1).nothing?()
        c4 == listToContainer({2, 3, 4, 5 ,6, 1, 7, 8, 9, 10})
        move(c4, 0, 5, 3).nothing?()
        c4 == listToContainer({5 ,6, 1, 7, 8, 2, 3, 4, 9, 10})
        move(c4, 5, 0, 3).nothing?()
        c4 == listToContainer({2, 3, 4, 5 ,6, 1, 7, 8, 9, 10})
        move(c4, 0, 4, 3).nothing?()
        c4 == listToContainer({5 ,6, 1, 7, 2, 3, 4, 8, 9, 10})
        move(c4, 4, 0, 3).nothing?()
        c4 == listToContainer({2, 3, 4, 5 ,6, 1, 7, 8, 9, 10})
        move(c4, 0, 5, 5).nothing?()
        c4 == listToContainer({1, 7, 8, 9, 10, 2, 3, 4, 5 ,6})
        move(c4, 5, 0, 5).nothing?()
        c4 == listToContainer({2, 3, 4, 5 ,6, 1, 7, 8, 9, 10})
        move(c4, 0, 3, 7).nothing?()
        c4 == listToContainer({8, 9, 10, 2, 3, 4, 5 ,6, 1, 7})
        move(c4, 3, 0, 7).nothing?()
        c4 == listToContainer({2, 3, 4, 5 ,6, 1, 7, 8, 9, 10})
        move(c4, 0, 4, 6).nothing?()
        c4 == listToContainer({7, 8, 9, 10, 2, 3, 4, 5 ,6, 1})
        move(c4, 4, 0, 6).nothing?()
        c4 == listToContainer({2, 3, 4, 5 ,6, 1, 7, 8, 9, 10})
        move(c4, 1, 0, 9).nothing?()
        c4 == listToContainer({3, 4, 5 ,6, 1, 7, 8, 9, 10, 2})
        move(c4, 0, 1, 9).nothing?()
        c4 == listToContainer({2, 3, 4, 5 ,6, 1, 7, 8, 9, 10})

#noinline
def testContainer_Count(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).count(1) == 0
        listToContainer({}).count(0) == 0
        listToContainer({0}).count(0) == 1
        listToContainer({0}).count(1) == 0
        listToContainer({0, 1.1}).count(0) == 1
        listToContainer({0, 1.1, 0.0, 0}).count(0) == 2
        listToContainer({0, 1.1}).count(1.1) == 1
        listToContainer({0, 1.1, 'a'}).count(0) == 1
        listToContainer({0, 1.1, 'a'}).count(1.1) == 1
        listToContainer({0, 1.1, 'a'}).count('a') == 1
        listToContainer({0, 1.1, 'a'}).count(-1) == 0
        listToContainer({0, 1.1, nothing, 'a'}).count('a') == 1

#noinline
def testContainer_CountFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).countFromAtoB('a', 0, 0) == 0
        listToContainer({}).countFromAtoB('a', 1, 0) : eid_outOfRange
        listToContainer({}).countFromAtoB('a', 0, 1) : eid_outOfRange
        listToContainer({'a'}).countFromAtoB('a', 0, 1) == 1
        listToContainer({'a'}).countFromAtoB('a', 0, 0) == 0
        listToContainer({'a'}).countFromAtoB('a', 1, 1) == 0
        listToContainer({'a'}).countFromAtoB('b', 0, 1) == 0
        listToContainer({'a'}).countFromAtoB(97, 0, 1) == 0
        listToContainer({'a'}).countFromAtoB('a', 1, 0) : eid_outOfRange
        listToContainer({'a'}).countFromAtoB(97, -1, 0) : eid_outOfRange
        listToContainer({'a'}).countFromAtoB(97, 0, -1) : eid_outOfRange
        listToContainer({'a'}).countFromAtoB('a', 0, 2) : eid_outOfRange
        listToContainer({'a'}).countFromAtoB('a', 2, 0) : eid_outOfRange
        listToContainer({'a', -2}).countFromAtoB('a', 0, 1) == 1
        listToContainer({'a', -2}).countFromAtoB('a', 0, 2) == 1
        listToContainer({'a', -2}).countFromAtoB(-2, 0, 2) == 1
        listToContainer({'a', -2}).countFromAtoB(-2, 1, 2) == 1
        listToContainer({-2, -2}).countFromAtoB(-2, 0, 2) == 2
        listToContainer({'a', -2}).countFromAtoB('a', 0, 0) == 0
        listToContainer({'a', -2}).countFromAtoB(-2, 0, 0) == 0
        listToContainer({'a', 'a'}).countFromAtoB('a', 0, 1) == 1
        listToContainer({'a', 'a'}).countFromAtoB('a', 1, 2) == 1
        listToContainer({'a', 'a'}).countFromAtoB('a', 0, 2) == 2
        listToContainer({'a', 'a'}).countFromAtoB('a', 0, 0) == 0
        listToContainer({'a', 'a'}).countFromAtoB('a', 2, 2) == 0
        listToContainer({'a', -2}).countFromAtoB('a', 1, 2) == 0
        listToContainer({'a', -2}).countFromAtoB(-2, 1, 1) == 0
        listToContainer({'a', -2}).countFromAtoB('b', 0, 2) == 0
        listToContainer({'a', -2}).countFromAtoB(97, 0, 2) == 0
        listToContainer({'a', -2}).countFromAtoB('a', 1, 0) : eid_outOfRange
        listToContainer({'a', -2}).countFromAtoB('a', 3, 0) : eid_outOfRange
        listToContainer({'a', -2}).countFromAtoB(97, -1, 0) : eid_outOfRange
        listToContainer({'a', -2}).countFromAtoB(97, 0, -1) : eid_outOfRange
        listToContainer({'a', -2}).countFromAtoB('a', 0, 3) : eid_outOfRange
        listToContainer({'a', -2}).countFromAtoB('a', 3, 0) : eid_outOfRange
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).countFromAtoB('a', 0, 6) == 1
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).countFromAtoB(3, 0, 6) == 1
        listToContainer({'a', -2, '2', 2, -2.0, 2, 'a'}).countFromAtoB(2, 0, 6) == 2
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).countFromAtoB(1, 0, 8) == 8
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).countFromAtoB(1, 1, 8) == 7
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).countFromAtoB(1, 1, 7) == 6
        listToContainer({1, 1, 1, 1, 0, 1, 1, 1}).countFromAtoB(1, 1, 7) == 5
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).countFromAtoB('2', 2, 6) == 1
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).countFromAtoB(1000, 0, 6) == 1
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).countFromAtoB(-1.0, 0, 6) == 1
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).countFromAtoB(3, 0, 6) == 1
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).countFromAtoB('2', 3, 6) == 0
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).countFromAtoB(3, 0, 5) == 0
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).countFromAtoB('b', 0, 6) == 0

#noinline
def testContainer_CountAny(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).countAny({0}) == 0
        listToContainer({}).countAny({1}) == 0
        listToContainer({}).countAny({1, 2}) == 0
        listToContainer({}).countAny({nothing}) == 0
        listToContainer({0}).countAny({0}) == 1
        listToContainer({0}).countAny({0, 1}) == 1
        listToContainer({0}).countAny({1, 0}) == 1
        listToContainer({0}).countAny({1}) == 0
        listToContainer({0}).countAny({1, 2}) == 0
        listToContainer({0}).countAny({nothing}) == 0
        listToContainer({0}).countAny({0, nothing}) == 1
        listToContainer({0}).countAny({nothing, 0}) == 1
        listToContainer({0}).countAny({0, 0}) == 1
        listToContainer({0, 1.1}).countAny({0}) == 1
        listToContainer({0, 1.1}).countAny({1.1}) == 1
        listToContainer({0, 1.1}).countAny({0, 2}) == 1
        listToContainer({0, 1.1}).countAny({2, 0}) == 1
        listToContainer({0, 1.1}).countAny({1.1, 0}) == 2
        listToContainer({0, 1.1}).countAny({0, 1.1}) == 2
        listToContainer({0, 1.1}).countAny({2, 0, 1.1}) == 2
        listToContainer({0, 1.1}).countAny({2, -2, 1.1}) == 1
        listToContainer({0, 1.1}).countAny({2, -2, 0.0}) == 0
        listToContainer({0, 1.1, nothing, 'a'}).countAny({'a'}) == 1
        listToContainer({0, 1.1, nothing, 'a'}).countAny({0}) == 1
        listToContainer({0, 1.1, nothing, 'a'}).countAny({3, 'a'}) == 1
        listToContainer({0, 3, 1.1, nothing, 'a'}).countAny({3, nothing, 'a'}) == 2
        listToContainer({0, 1.1, nothing, 'a'}).countAny({3, nothing}) == 0
        listToContainer({}).countAny({}) : eid_nothingToLook
        listToContainer({1, 2}).countAny({}) : eid_nothingToLook

#noinline
def testContainer_CountAnyFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).countAnyFromAtoB({0}, 0, 0) == 0
        listToContainer({}).countAnyFromAtoB({1, 2}, 0, 0) == 0
        listToContainer({}).countAnyFromAtoB({nothing}, 0, 0) == 0
        listToContainer({0}).countAnyFromAtoB({0}, 0, 1) == 1
        listToContainer({0}).countAnyFromAtoB({0, 1}, 0, 1) == 1
        listToContainer({0}).countAnyFromAtoB({1, 0}, 0, 1) == 1
        listToContainer({0}).countAnyFromAtoB({0, 0}, 0, 1) == 1
        listToContainer({0}).countAnyFromAtoB({0, nothing}, 0, 1) == 1
        listToContainer({0}).countAnyFromAtoB({nothing, 0}, 0, 1) == 1
        listToContainer({0}).countAnyFromAtoB({1}, 0, 1) == 0
        listToContainer({0}).countAnyFromAtoB({0}, 0, 0) == 0
        listToContainer({0}).countAnyFromAtoB({0}, 1, 1) == 0
        listToContainer({0}).countAnyFromAtoB({1, 2}, 0, 1) == 0
        listToContainer({0}).countAnyFromAtoB({0, 2}, 0, 0) == 0
        listToContainer({0}).countAnyFromAtoB({1, 0}, 1, 1) == 0
        listToContainer({0, 1.1}).countAnyFromAtoB({0}, 0, 2) == 1
        listToContainer({0, 0}).countAnyFromAtoB({0}, 0, 2) == 2
        listToContainer({0, 0}).countAnyFromAtoB({0, 0}, 0, 2) == 2
        listToContainer({0, 0}).countAnyFromAtoB({0, 0}, 1, 2) == 1
        listToContainer({0, 0}).countAnyFromAtoB({0, 0}, 2, 2) == 0
        listToContainer({0, 1.1}).countAnyFromAtoB({2, 0}, 0, 2) == 1
        listToContainer({0, 1.1}).countAnyFromAtoB({1.1, 0}, 0, 2) == 2
        listToContainer({0, 1.1}).countAnyFromAtoB({1.1, 2}, 0, 2) == 1
        listToContainer({0, 1.1}).countAnyFromAtoB({0, 2}, 0, 1) == 1
        listToContainer({0, 1.1}).countAnyFromAtoB({2, 0}, 0, 1) == 1
        listToContainer({0, 1.1}).countAnyFromAtoB({1.1, 2}, 1, 2) == 1
        listToContainer({0, 1.1}).countAnyFromAtoB({2, 1.1}, 1, 2) == 1
        listToContainer({0, 1.1}).countAnyFromAtoB({2, -2, 0.0}, 0, 2) == 0
        listToContainer({0, 1.1}).countAnyFromAtoB({0}, 1, 2) == 0
        listToContainer({0, 1.1}).countAnyFromAtoB({1.1}, 0, 1) == 0
        listToContainer({0, 1.1}).countAnyFromAtoB({0, 1}, 1, 2) == 0
        listToContainer({0, 1.1}).countAnyFromAtoB({1, 0}, 1, 2) == 0
        listToContainer({0, 1.1}).countAnyFromAtoB({1.1, 1}, 0, 1) == 0
        listToContainer({0, 1.1}).countAnyFromAtoB({1, 1.1}, 0, 1) == 0
        listToContainer({0, 1.1}).countAnyFromAtoB({1, 1.1}, 0, 0) == 0
        listToContainer({0, 1.1}).countAnyFromAtoB({1, 1.1}, 1, 1) == 0
        listToContainer({0, 1.1}).countAnyFromAtoB({1, 1.1}, 2, 2) == 0
        listToContainer({0, 1.1, 0}).countAnyFromAtoB({1, 0}, 0, 3) == 2
        listToContainer({0, 1.1, 0}).countAnyFromAtoB({1.1, 0}, 0, 3) == 3
        listToContainer({0, 1.1, 0}).countAnyFromAtoB({0}, 1, 3) == 1
        listToContainer({0, 1.1, 0}).countAnyFromAtoB({0}, 0, 2) == 1
        listToContainer({0, 1.1, nothing, 'a'}).countAnyFromAtoB({'a'}, 0, 4) == 1
        listToContainer({0, 1.1, nothing, 'a'}).countAnyFromAtoB({'a'}, 1, 4) == 1
        listToContainer({0, 1.1, nothing, 'a'}).countAnyFromAtoB({'a'}, 2, 4) == 1
        listToContainer({0, 1.1, nothing, 'a'}).countAnyFromAtoB({'a'}, 3, 4) == 1
        listToContainer({0, 1.1, nothing, 'a'}).countAnyFromAtoB({0, 'b'}, 0, 1) == 1
        listToContainer({0, 1.1, nothing, 'a'}).countAnyFromAtoB({'b', 0}, 0, 1) == 1
        listToContainer({0, 1.1, nothing, 'a'}).countAnyFromAtoB({'b', 0}, 0, 4) == 1
        listToContainer({0, 1.1, nothing, 'a'}).countAnyFromAtoB({3, 'a'}, 2, 4) == 1
        listToContainer({0, 1.1, nothing, 'a'}).countAnyFromAtoB({nothing, 3, 'a'}, 2, 4) == 1
        listToContainer({0, 1.1, nothing, 'a'}).countAnyFromAtoB({nothing, 3}, 2, 4) == 0
        listToContainer({0, 1.1, nothing, 'a'}).countAnyFromAtoB({'a'}, 0, 3) == 0
        listToContainer({}).countAnyFromAtoB({'a'}, 0, 1) : eid_outOfRange
        listToContainer({}).countAnyFromAtoB({'a'}, 1, 0) : eid_outOfRange
        listToContainer({}).countAnyFromAtoB({'a'}, 1, 1) : eid_outOfRange
        listToContainer({}).countAnyFromAtoB({'b'}, -1, 1) : eid_outOfRange
        listToContainer({}).countAnyFromAtoB({'a'}, 1, -1) : eid_outOfRange
        listToContainer({}).countAnyFromAtoB({'c'}, -1, -1) : eid_outOfRange
        listToContainer({}).countAnyFromAtoB({'a'}, -10, -10) : eid_outOfRange
        listToContainer({}).countAnyFromAtoB({}, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).countAnyFromAtoB({}, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).countAnyFromAtoB({}, 0, 2) : eid_nothingToLook

#noinline
def testContainer_CountPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).countPart(listToContainer({0})) == 0
        listToContainer({}).countPart(listToContainer({'a'})) == 0
        listToContainer({1}).countPart(listToContainer({1})) == 1
        listToContainer({2}).countPart(listToContainer({1})) == 0
        listToContainer({2}).countPart(listToContainer({2, 1})) == 0
        listToContainer({2}).countPart(listToContainer({1, 2})) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPart(listToContainer({1})) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPart(listToContainer({4})) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPart(listToContainer({1, 2})) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPart(listToContainer({2, 3})) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPart(listToContainer({2, 3, 4})) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPart(listToContainer({3, 4})) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPart(listToContainer({2, 2})) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPart(listToContainer({5})) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPart(listToContainer({1, 1})) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPart(listToContainer({4, 4})) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPart(listToContainer({4, 1})) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPart(listToContainer({4, 5})) == 0
        listToContainer({nothing}).countPart(listToContainer({nothing})) == 0
        listToContainer({}).countPart(listToContainer({})) : eid_nothingToLook
        listToContainer({1, 2}).countPart(listToContainer({})) : eid_nothingToLook
        listToContainer({1, 2, nothing, 2, 3, 4, 1, 2, 1, 2, 1}).countPart(listToContainer({1, 2})) == 3
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2}).countPart(listToContainer({2, 2, 2, 2})) == 2
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}).countPart(listToContainer({2, 2, 2, 2})) == 2

#noinline
def testContainer_CountPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).countPartFromAtoB(listToContainer({0}), 0, 0) == 0
        listToContainer({}).countPartFromAtoB(listToContainer({'a'}), 0, 0) == 0
        listToContainer({1}).countPartFromAtoB(listToContainer({1}), 0, 1) == 1
        listToContainer({1}).countPartFromAtoB(listToContainer({1}), 0, 0) == 0
        listToContainer({1}).countPartFromAtoB(listToContainer({1}), 1, 1) == 0
        listToContainer({2}).countPartFromAtoB(listToContainer({1}), 0, 1) == 0
        listToContainer({2}).countPartFromAtoB(listToContainer({1}), 0, 0) == 0
        listToContainer({2}).countPartFromAtoB(listToContainer({1}), 1, 1) == 0
        listToContainer({2}).countPartFromAtoB(listToContainer({2, 1}), 0, 1) == 0
        listToContainer({2}).countPartFromAtoB(listToContainer({1, 2}), 0, 1) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({1}), 0, 1) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({1}), 0, 2) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({1}), 0, 6) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({4}), 0, 6) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({4}), 1, 6) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({4}), 2, 6) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({4}), 2, 5) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({4}), 0, 5) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2}), 0, 5) == 2
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({1, 2}), 0, 6) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({1, 2}), 1, 6) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2, 3}), 0, 6) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2, 3}), 0, 5) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2, 3}), 1, 5) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2, 3}), 3, 5) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2, 3}), 3, 4) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2, 3}), 4, 6) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2, 3, 4}), 0, 6) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2, 3, 4}), 3, 6) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2, 3, 4}), 0, 5) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2, 3, 4}), 4, 6) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2, 2}), 0, 6) == 0
        listToContainer({nothing}).countPartFromAtoB(listToContainer({nothing}), 0, 0) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2, nothing}), 0, 6) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2}), -1, 2) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2}), 2, 1) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).countPartFromAtoB(listToContainer({2}), -10, -1) : eid_outOfRange
        listToContainer({}).countPartFromAtoB(listToContainer({}), 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).countPartFromAtoB(listToContainer({}), 0, 0) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).countPartFromAtoB(listToContainer({1, 2}), 0, 3) == 1
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).countPartFromAtoB(listToContainer({1, 2}), 0, 6) == 2
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).countPartFromAtoB(listToContainer({2, 2, 2}), 0, 7) == 2
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).countPartFromAtoB(listToContainer({2, 2, 2}), 0, 6) == 2
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).countPartFromAtoB(listToContainer({2, 2, 2}), 0, 5) == 1
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).countPartFromAtoB(listToContainer({2, 2, 2}), 0, 8) == 2
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).countPartFromAtoB(listToContainer({2, 2, 2}), 0, 7) == 2
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).countPartFromAtoB(listToContainer({2, 2, 2}), 0, 6) == 2
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).countPartFromAtoB(listToContainer({2, 2, 2}), 0, 5) == 1
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).countPartFromAtoB(listToContainer({2, 2, 2}), 1, 7) == 2

#noinline
def testContainer_CountAnyPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).countAnyPart([listToContainer({1, 2}), listToContainer({23})]) == 0
        listToContainer({}).countAnyPart([listToContainer({1, 2})]) == 0
        listToContainer({}).countAnyPart([listToContainer({nothing})]) == 0
        listToContainer({}).countAnyPart([{nothing}]) : eid_invalidType
        listToContainer({1}).countAnyPart([listToContainer({1})]) == 1
        listToContainer({1}).countAnyPart([listToContainer({1}), listToContainer({2})]) == 1
        listToContainer({1}).countAnyPart([listToContainer({2}), listToContainer({1})]) == 1
        listToContainer({1}).countAnyPart([listToContainer({1}), listToContainer({1})]) == 1
        listToContainer({1}).countAnyPart([listToContainer({2}), listToContainer({0})]) == 0
        listToContainer({1}).countAnyPart([listToContainer({0})]) == 0
        listToContainer({1}).countAnyPart([listToContainer({1, 2})]) == 0
        listToContainer({1}).countAnyPart([listToContainer({2, 1})]) == 0
        listToContainer({1}).countAnyPart([{12}]) : eid_invalidType
        listToContainer({1, 2}).countAnyPart([listToContainer({0}), listToContainer({1})]) == 1
        listToContainer({1, 2}).countAnyPart([listToContainer({1}), listToContainer({0})]) == 1
        listToContainer({1, 2}).countAnyPart([listToContainer({1, 2}), listToContainer({0})]) == 1
        listToContainer({1, 2}).countAnyPart([listToContainer({0}), listToContainer({1, 2})]) == 1
        listToContainer({1, 2}).countAnyPart([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})]) == 0
        listToContainer({1, 2}).countAnyPart([{12}]) : eid_invalidType
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPart([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})]) == 1
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPart([listToContainer({0, 2, 3}), listToContainer({4, 'a'}), listToContainer({1, 1, 2})]) == 1
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPart([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})]) == 1
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPart([listToContainer({2, 3, 4, 4}), listToContainer({4, 'b', nothing}), listToContainer({12, "bbbb"})]) == 0
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).countAnyPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})]) == 2
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).countAnyPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})]) == 3
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).countAnyPart([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})]) == 2
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).countAnyPart([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})]) == 4
        listToContainer({}).countAnyPart([]) : eid_nothingToLook
        listToContainer({}).countAnyPart([listToContainer({})]) : eid_nothingToLook
        listToContainer({}).countAnyPart([listToContainer({}), listToContainer({12})]) : eid_nothingToLook
        listToContainer({}).countAnyPart([listToContainer({12}), listToContainer({})]) : eid_nothingToLook
        listToContainer({12}).countAnyPart([]) : eid_nothingToLook
        listToContainer({12}).countAnyPart([listToContainer({})]) : eid_nothingToLook
        listToContainer({12}).countAnyPart([listToContainer({}), listToContainer({12})]) : eid_nothingToLook
        listToContainer({12}).countAnyPart([listToContainer({12}), listToContainer({})]) : eid_nothingToLook
        listToContainer({1, 12}).countAnyPart([]) : eid_nothingToLook
        listToContainer({1, 12}).countAnyPart([listToContainer({})]) : eid_nothingToLook
        listToContainer({1, 12}).countAnyPart([listToContainer({}), listToContainer({12})]) : eid_nothingToLook
        listToContainer({1, 12}).countAnyPart([listToContainer({12}), listToContainer({})]) : eid_nothingToLook
        listToContainer({12, 1}).countAnyPart([]) : eid_nothingToLook
        listToContainer({12, 1}).countAnyPart([listToContainer({})]) : eid_nothingToLook
        listToContainer({12, 1}).countAnyPart([listToContainer({}), listToContainer({12})]) : eid_nothingToLook
        listToContainer({12, 1}).countAnyPart([listToContainer({12}), listToContainer({})]) : eid_nothingToLook
        listToContainer({1, 2, 3, 1, 7, 1, 7}).countAnyPart([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})]) == 2
        listToContainer({2, 2, 2, 2, 2, 2}).countAnyPart([listToContainer({2, 2, 2})]) == 2
        listToContainer({2, 2, 2, 2, 2}).countAnyPart([listToContainer({2, 2, 2})]) == 1
        listToContainer({2, 2, 2, 2, 2, 2}).countAnyPart([listToContainer({2, 2, 2, 2}), listToContainer({2, 2, 2})]) == 1
        listToContainer({2, 2, 2, 2, 2, 2}).countAnyPart([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2})]) == 2

#noinline
def testContainer_CountAnyPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).countAnyPartFromAtoB([listToContainer({1, 2}), listToContainer({23})], 0, 0) == 0
        listToContainer({}).countAnyPartFromAtoB([], 0, 0) : eid_nothingToLook
        listToContainer({}).countAnyPartFromAtoB([listToContainer({}), listToContainer({23})], 0, 0) : eid_nothingToLook
        listToContainer({}).countAnyPartFromAtoB([listToContainer({1}), listToContainer({})], 0, 0) : eid_nothingToLook
        listToContainer({}).countAnyPartFromAtoB([listToContainer({1, 2}), listToContainer({23})], 0, 1) : eid_outOfRange
        listToContainer({}).countAnyPartFromAtoB([listToContainer({1, 2}), listToContainer({23})], -1, 0) : eid_outOfRange
        listToContainer({}).countAnyPartFromAtoB([listToContainer({1, 2}), listToContainer({23})], 0, -1) : eid_outOfRange
        listToContainer({}).countAnyPartFromAtoB([listToContainer({1, 2})], 0, 0) == 0
        listToContainer({}).countAnyPartFromAtoB([listToContainer({nothing})], 0, 0) == 0
        listToContainer({}).countAnyPartFromAtoB([listToContainer({1, 2})], 0, 1) : eid_outOfRange
        listToContainer({}).countAnyPartFromAtoB([listToContainer({1, 2})], -1, 0) : eid_outOfRange
        listToContainer({}).countAnyPartFromAtoB([listToContainer({1, 2})], 0, -1) : eid_outOfRange
        listToContainer({}).countAnyPart([{12}]) : eid_invalidType
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({1})], 0, 0) == 0
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({1})], 1, 1) == 0
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({1})], 0, 1) == 1
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({})], 0, 1) : eid_nothingToLook
        listToContainer({1}).countAnyPartFromAtoB([], 0, 1) : eid_nothingToLook
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({})], 1, 1) : eid_nothingToLook
        listToContainer({1}).countAnyPartFromAtoB([], 1, 1) : eid_nothingToLook
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({})], 0, 0) : eid_nothingToLook
        listToContainer({1}).countAnyPartFromAtoB([], 0, 0) : eid_nothingToLook
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({1})], -1, 0) : eid_outOfRange
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({1})], 0, 2) : eid_outOfRange
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({1})], 0, 9223372036854775807) : eid_outOfRange
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({1})], 0, -9223372036854775808) : eid_outOfRange
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({1})], -9223372036854775808, 9223372036854775807) : eid_outOfRange
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({1})], 1, 0) : eid_outOfRange
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({1}), listToContainer({2})], 0, 1) == 1
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({1}), listToContainer({2})], 1, 1) == 0
        listToContainer({1}).countAnyPartFromAtoB([listToContainer({1}), listToContainer({2})], 0, 0) == 0
        listToContainer({1}).countAnyPart([{1}]) : eid_invalidType
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 7) == 1
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 3) == 1
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 2) == 0
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 1, 3) == 0
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], -1, 3) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 8) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], -1, 8) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPartFromAtoB([listToContainer({}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({}), listToContainer({1, 1, 2})], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({})], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPartFromAtoB([listToContainer({}), listToContainer({}), listToContainer({})], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).countAnyPartFromAtoB([], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).countAnyPartFromAtoB([listToContainer({1, 2})], 0, 3) == 1
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).countAnyPartFromAtoB([listToContainer({1, 2})], 4, 6) == 1
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).countAnyPartFromAtoB([listToContainer({1, 2})], 0, 6) == 2
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).countAnyPartFromAtoB([listToContainer({1, 2})], 0, 7) == 2
        listToContainer({1, 2, 3, 1, 7, 1, 7}).countAnyPartFromAtoB([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 0, 7) == 2
        listToContainer({2, 2, 2, 2, 2, 2}).countAnyPartFromAtoB([listToContainer({2, 2, 2})], 0, 6) == 2
        listToContainer({2, 2, 2, 2, 2, 2}).countAnyPartFromAtoB([listToContainer({2, 2, 2})], 0, 5) == 1
        listToContainer({2, 2, 2, 2, 2, 2}).countAnyPartFromAtoB([listToContainer({2, 2, 2})], 0, 3) == 1
        listToContainer({2, 2, 2, 2, 2}).countAnyPartFromAtoB([listToContainer({2, 2, 2})], 0, 5) == 1
        listToContainer({2, 2, 2, 2, 2}).countAnyPartFromAtoB([listToContainer({2, 2, 2})], 0, 3) == 1
        listToContainer({2, 2, 2, 2, 2, 2}).countAnyPartFromAtoB([listToContainer({2, 2, 2, 2}), listToContainer({2, 2, 2})], 0, 6) == 1
        listToContainer({2, 2, 2, 2, 2, 2}).countAnyPartFromAtoB([listToContainer({2, 2, 2, 2}), listToContainer({2, 2, 2})], 1, 6) == 1
        listToContainer({2, 2, 2, 2, 2, 2}).countAnyPartFromAtoB([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2})], 0, 6) == 2
        listToContainer({2, 2, 2, 2, 2, 2}).countAnyPartFromAtoB([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2})], 0, 5) == 1
        listToContainer({2, 2, 2, 2, 2, 2}).countAnyPartFromAtoB([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2})], 1, 6) == 1

#noinline
def testContainer_PartsEqual?(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).partsEqual?(0, listToContainer({}), 0, 0)
        !listToContainer({}).partsEqual?(1, listToContainer({}), 0, 0)
        !listToContainer({}).partsEqual?(-1, listToContainer({}), 0, 0)
        !listToContainer({}).partsEqual?(9223372036854775807, listToContainer({}), 0, 0)
        !listToContainer({}).partsEqual?(-9223372036854775808, listToContainer({}), 0, 0)
        !listToContainer({}).partsEqual?(0, listToContainer({}), 1, 0)
        !listToContainer({}).partsEqual?(0, listToContainer({}), -1, 0)
        !listToContainer({}).partsEqual?(0, listToContainer({}), 9223372036854775807, 0)
        !listToContainer({}).partsEqual?(0, listToContainer({}), -9223372036854775808, 0)
        !listToContainer({}).partsEqual?(0, listToContainer({}), 0, 1)
        !listToContainer({}).partsEqual?(0, listToContainer({}), 0, -1)
        !listToContainer({}).partsEqual?(0, listToContainer({}), 0, -9223372036854775808)
        !listToContainer({}).partsEqual?(0, listToContainer({}), 0, 9223372036854775807)
        !listToContainer({}).partsEqual?(-1, listToContainer({}), -1, -1)
        listToContainer({1}).partsEqual?(0, listToContainer({1}), 0, 1)
        listToContainer({1}).partsEqual?(1, listToContainer({1}), 1, 0)
        listToContainer({1}).partsEqual?(0, listToContainer({0, 1}), 1, 1)
        listToContainer({1}).partsEqual?(1, listToContainer({1}), 0, 0)
        listToContainer({1}).partsEqual?(1, listToContainer({2}), 0, 0)
        !listToContainer({1}).partsEqual?(0, listToContainer({0, 1}), 0, 1)
        !listToContainer({1}).partsEqual?(0, listToContainer({2}), 0, 1)
        !listToContainer({1}).partsEqual?(0, listToContainer({1}), 0, 2)
        !listToContainer({1}).partsEqual?(-1, listToContainer({1}), 0, 0)
        !listToContainer({1}).partsEqual?(-9223372036854775808, listToContainer({1}), 0, 0)
        !listToContainer({1}).partsEqual?(9223372036854775807, listToContainer({1}), 0, 0)
        listToContainer({1, 2, 3, 4, 5, 6}).partsEqual?(0, listToContainer({1, 2, 3, 4, 5, 6}), 0, 6)
        listToContainer({1, 2, 3, 4, 5, 6}).partsEqual?(1, listToContainer({1, 2, 3, 4, 5, 6}), 1, 5)
        !listToContainer({1, 2, 3, 4, 5, 6, nothing, 1.0, 7, 8, 9}).partsEqual?(6, listToContainer({nothing, 1.0}), 0, 2)
        !listToContainer({1, 2, 3, 4, 5, 6, nothing, 1.0, 7, 8, 9}).partsEqual?(5, listToContainer({6, 1.0}), 0, 2)
        listToContainer({1, 2, 3, 4, 5, 6, nothing, 1.0, 7, 8, 9}).partsEqual?(3, listToContainer({1, 2, 3, 4, 5, 6}), 3, 3)

#noinline
def testContainer_HasPrefix?(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).hasPrefix?(listToContainer({}))
        listToContainer({nothing}).hasPrefix?(listToContainer({}))
        !listToContainer({nothing}).hasPrefix?(listToContainer({nothing}))
        listToContainer({1}).hasPrefix?(listToContainer({}))
        listToContainer({1}).hasPrefix?(listToContainer({1}))
        !listToContainer({1}).hasPrefix?(listToContainer({1, 2}))
        !listToContainer({1}).hasPrefix?(listToContainer({1, 1}))
        listToContainer({1, 2}).hasPrefix?(listToContainer({1}))
        listToContainer({1, 2}).hasPrefix?(listToContainer({1, 2}))
        !listToContainer({1, 2}).hasPrefix?(listToContainer({1, 1}))
        !listToContainer({1, 2}).hasPrefix?(listToContainer({2}))
        !listToContainer({1, 2, nothing}).hasPrefix?(listToContainer({1, 2, nothing}))
        listToContainer({1, 2, 'a', 3, 4, 5}).hasPrefix?(listToContainer({1}))
        listToContainer({1, 2, 'a', 3, 4, 5}).hasPrefix?(listToContainer({1, 2}))
        listToContainer({1, 2, 'a', 3, 4, 5}).hasPrefix?(listToContainer({1, 2, 'a'}))
        listToContainer({1, 2, 'a', 3, 4, 5}).hasPrefix?(listToContainer({1, 2, 'a', 3}))
        listToContainer({1, 2, 'a', 3, 4, 5}).hasPrefix?(listToContainer({1, 2, 'a', 3, 4}))
        !listToContainer({1, 2, 'a', 3, 4, 5}).hasPrefix?(listToContainer({1, 2, "a", 3, 4}))

#noinline
def testContainer_HasSuffix?(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).hasSuffix?(listToContainer({}))
        listToContainer({nothing}).hasSuffix?(listToContainer({}))
        !listToContainer({nothing}).hasSuffix?(listToContainer({nothing}))
        listToContainer({1}).hasSuffix?(listToContainer({}))
        listToContainer({1}).hasSuffix?(listToContainer({1}))
        !listToContainer({1}).hasSuffix?(listToContainer({1, 2}))
        !listToContainer({1}).hasSuffix?(listToContainer({1, 1}))
        listToContainer({1, 2}).hasSuffix?(listToContainer({2}))
        listToContainer({1, 2}).hasSuffix?(listToContainer({1, 2}))
        !listToContainer({1, 2}).hasSuffix?(listToContainer({1, 1}))
        !listToContainer({1, 2}).hasSuffix?(listToContainer({1}))
        !listToContainer({1, 2, nothing}).hasSuffix?(listToContainer({1, 2, nothing}))
        listToContainer({1, 2, 'a', 3, 4, 5}).hasSuffix?(listToContainer({5}))
        listToContainer({1, 2, 'a', 3, 4, 5}).hasSuffix?(listToContainer({4, 5}))
        listToContainer({1, 2, 'a', 3, 4, 5}).hasSuffix?(listToContainer({3, 4, 5}))
        listToContainer({1, 2, 'a', 3, 4, 5}).hasSuffix?(listToContainer({'a', 3, 4, 5}))
        listToContainer({1, 2, 'a', 3, 4, 5}).hasSuffix?(listToContainer({2, 'a', 3, 4, 5}))
        !listToContainer({1, 2, 'a', 3, 4, 5}).hasSuffix?(listToContainer({2, "a", 3, 4, 5}))

#noinline
def testContainer_Look(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).look(1).nothing?()
        listToContainer({}).look(0).nothing?()
        listToContainer({0}).look(0) == 0
        listToContainer({0}).look(1).nothing?()
        listToContainer({0, 1.1}).look(0) == 0
        listToContainer({0, 1.1, 0.0, 0}).look(0) == 0
        listToContainer({0, 1.1}).look(1.1) == 1
        listToContainer({0, 1.1, 'a'}).look(0) == 0
        listToContainer({0, 1.1, 'a'}).look(1.1) == 1
        listToContainer({0, 1.1, 'a'}).look('a') == 2
        listToContainer({0, 1.1, 'a'}).look(-1).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).look('a') == 3

#noinline
def testContainer_LookN(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookN(1, 1).nothing?()
        listToContainer({}).lookN(1, 2).nothing?()
        listToContainer({}).lookN(1, 9223372036854775807).nothing?()
        listToContainer({}).lookN(1, 0) : eid_outOfRange
        listToContainer({}).lookN(1, -1) : eid_outOfRange
        listToContainer({}).lookN(1, -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookN(0, 1).nothing?()
        listToContainer({}).lookN(0, 2).nothing?()
        listToContainer({}).lookN(0, 9223372036854775807).nothing?()
        listToContainer({}).lookN(0, 0) : eid_outOfRange
        listToContainer({}).lookN(0, -1) : eid_outOfRange
        listToContainer({}).lookN(0, -9223372036854775808) : eid_outOfRange
        listToContainer({0}).lookN(0, 1) == 0
        listToContainer({0}).lookN(0, 2).nothing?()
        listToContainer({0}).lookN(0, 9223372036854775807).nothing?()
        listToContainer({0}).lookN(0, 0) : eid_outOfRange
        listToContainer({0}).lookN(0, -1) : eid_outOfRange
        listToContainer({0}).lookN(0, -9223372036854775808) : eid_outOfRange
        listToContainer({0}).lookN(1, 1).nothing?()
        listToContainer({0}).lookN(1, 2).nothing?()
        listToContainer({0}).lookN(1, -1) : eid_outOfRange
        listToContainer({0}).lookN(1, -9223372036854775808) : eid_outOfRange
        listToContainer({0, 1.1}).lookN(0, 1) == 0
        listToContainer({0, 1.1}).lookN(0, 2).nothing?()
        listToContainer({0, 1.1, 0.0, 0}).lookN(0, 1) == 0
        listToContainer({0, 1.1, 0.0, 0}).lookN(0, 2) == 3
        listToContainer({0, 1.1, 0.0, 0}).lookN(0, 3).nothing?()
        listToContainer({0, 1.1, 0.0, 0}).lookN(0, -1) : eid_outOfRange
        listToContainer({0, 1.1, 0.0, 0}).lookN(0, -9223372036854775808) : eid_outOfRange
        listToContainer({0, 1.1}).lookN(1.1, 1) == 1
        listToContainer({0, 1.1}).lookN(1.1, 2).nothing?()
        listToContainer({0, 1.1, 'a'}).lookN(0, 1) == 0
        listToContainer({0, 1.1, 'a'}).lookN(0, 2).nothing?()
        listToContainer({0, 1.1, 'a'}).lookN(1.1, 1) == 1
        listToContainer({0, 1.1, 'a'}).lookN(1.1, 2).nothing?()
        listToContainer({0, 1.1, 'a'}).lookN('a', 1) == 2
        listToContainer({0, 1.1, 'a'}).lookN('a', 2).nothing?()
        listToContainer({0, 1.1, 'a'}).lookN(-1, 1).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookN('a', 1) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookN('a', 2).nothing?()

#noinline
def testContainer_LookFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookFromAtoB('a', 0, 0).nothing?()
        listToContainer({}).lookFromAtoB('a', 1, 0) : eid_outOfRange
        listToContainer({}).lookFromAtoB('a', 0, 1) : eid_outOfRange
        listToContainer({'a'}).lookFromAtoB('a', 0, 1) == 0
        listToContainer({'a'}).lookFromAtoB('a', 0, 0).nothing?()
        listToContainer({'a'}).lookFromAtoB('a', 1, 1).nothing?()
        listToContainer({'a'}).lookFromAtoB('b', 0, 1).nothing?()
        listToContainer({'a'}).lookFromAtoB(97, 0, 1).nothing?()
        listToContainer({'a'}).lookFromAtoB('a', 1, 0) : eid_outOfRange
        listToContainer({'a'}).lookFromAtoB(97, -1, 0) : eid_outOfRange
        listToContainer({'a'}).lookFromAtoB(97, 0, -1) : eid_outOfRange
        listToContainer({'a'}).lookFromAtoB('a', 0, 2) : eid_outOfRange
        listToContainer({'a'}).lookFromAtoB('a', 2, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookFromAtoB('a', 0, 1) == 0
        listToContainer({'a', -2}).lookFromAtoB('a', 0, 2) == 0
        listToContainer({'a', -2}).lookFromAtoB(-2, 0, 2) == 1
        listToContainer({'a', -2}).lookFromAtoB(-2, 1, 2) == 1
        listToContainer({-2, -2}).lookFromAtoB(-2, 0, 2) == 0
        listToContainer({'a', -2}).lookFromAtoB('a', 0, 0).nothing?()
        listToContainer({'a', -2}).lookFromAtoB(-2, 0, 0).nothing?()
        listToContainer({'a', 'a'}).lookFromAtoB('a', 0, 1) == 0
        listToContainer({'a', 'a'}).lookFromAtoB('a', 1, 2) == 1
        listToContainer({'a', 'a'}).lookFromAtoB('a', 0, 2) == 0
        listToContainer({'a', 'a'}).lookFromAtoB('a', 0, 0).nothing?()
        listToContainer({'a', 'a'}).lookFromAtoB('a', 2, 2).nothing?()
        listToContainer({'a', -2}).lookFromAtoB('a', 1, 2).nothing?()
        listToContainer({'a', -2}).lookFromAtoB(-2, 1, 1).nothing?()
        listToContainer({'a', -2}).lookFromAtoB('b', 0, 2).nothing?()
        listToContainer({'a', -2}).lookFromAtoB(97, 0, 2).nothing?()
        listToContainer({'a', -2}).lookFromAtoB('a', 1, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookFromAtoB('a', 3, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookFromAtoB(97, -1, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookFromAtoB(97, 0, -1) : eid_outOfRange
        listToContainer({'a', -2}).lookFromAtoB('a', 0, 3) : eid_outOfRange
        listToContainer({'a', -2}).lookFromAtoB('a', 3, 0) : eid_outOfRange
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookFromAtoB('a', 0, 6) == 0
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookFromAtoB(3, 0, 6) == 5
        listToContainer({'a', -2, '2', 2, -2.0, 2, 'a'}).lookFromAtoB(2, 0, 6) == 3
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookFromAtoB(1, 0, 8) == 0
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookFromAtoB(1, 1, 8) == 1
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookFromAtoB(1, 1, 7) == 1
        listToContainer({1, 1, 1, 1, 0, 1, 1, 1}).lookFromAtoB(1, 1, 7) == 1
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookFromAtoB('2', 2, 6) == 2
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookFromAtoB(1000, 0, 6) == 3
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookFromAtoB(-1.0, 0, 6) == 4
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookFromAtoB(3, 0, 6) == 5
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookFromAtoB('2', 3, 6).nothing?()
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookFromAtoB(3, 0, 5).nothing?()
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookFromAtoB('b', 0, 6).nothing?()

#noinline
def testContainer_LookNFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookNFromAtoB('a', 1, 0, 0).nothing?()
        listToContainer({}).lookNFromAtoB('a', 2, 0, 0).nothing?()
        listToContainer({}).lookNFromAtoB('a', 9223372036854775807, 0, 0).nothing?()
        listToContainer({}).lookNFromAtoB('a', -1, 1, 0) : eid_outOfRange
        listToContainer({}).lookNFromAtoB('a', -9223372036854775808, 1, 0) : eid_outOfRange
        listToContainer({}).lookNFromAtoB('a', 1, 1, 0) : eid_outOfRange
        listToContainer({}).lookNFromAtoB('a', 1, 0, 1) : eid_outOfRange
        listToContainer({'a'}).lookNFromAtoB('a', 1, 0, 1) == 0
        listToContainer({'a'}).lookNFromAtoB('a', 2, 0, 1).nothing?()
        listToContainer({'a'}).lookNFromAtoB('a', 1, 0, 0).nothing?()
        listToContainer({'a'}).lookNFromAtoB('a', 1, 1, 1).nothing?()
        listToContainer({'a'}).lookNFromAtoB('b', 1, 0, 1).nothing?()
        listToContainer({'a'}).lookNFromAtoB(97, 1, 0, 1).nothing?()
        listToContainer({'a'}).lookNFromAtoB('a', 1, 1, 0) : eid_outOfRange
        listToContainer({'a'}).lookNFromAtoB('a', 0, 0, 0) : eid_outOfRange
        listToContainer({'a'}).lookNFromAtoB('a', -1, 0, 0) : eid_outOfRange
        listToContainer({'a'}).lookNFromAtoB('a', -9223372036854775808, 0, 0) : eid_outOfRange
        listToContainer({'a'}).lookNFromAtoB(97, 1, -1, 0) : eid_outOfRange
        listToContainer({'a'}).lookNFromAtoB(97, 1, 0, -1) : eid_outOfRange
        listToContainer({'a'}).lookNFromAtoB('a', 1, 0, 2) : eid_outOfRange
        listToContainer({'a'}).lookNFromAtoB('a', 1, 2, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookNFromAtoB('a', 1, 0, 1) == 0
        listToContainer({'a', -2}).lookNFromAtoB('a', 2, 0, 1).nothing?()
        listToContainer({'a', -2}).lookNFromAtoB('a', 1, 0, 2) == 0
        listToContainer({'a', -2}).lookNFromAtoB('a', 2, 0, 2).nothing?()
        listToContainer({'a', -2}).lookNFromAtoB(-2, 1, 0, 2) == 1
        listToContainer({'a', -2}).lookNFromAtoB(-2, 2, 0, 2).nothing?()
        listToContainer({'a', -2}).lookNFromAtoB(-2, 1, 1, 2) == 1
        listToContainer({'a', -2}).lookNFromAtoB(-2, 2, 1, 2).nothing?()
        listToContainer({-2, -2}).lookNFromAtoB(-2, 1, 0, 2) == 0
        listToContainer({-2, -2}).lookNFromAtoB(-2, 2, 0, 2) == 1
        listToContainer({'a', -2}).lookNFromAtoB('a', 1, 0, 0).nothing?()
        listToContainer({'a', -2}).lookNFromAtoB('a', 2, 0, 0).nothing?()
        listToContainer({'a', -2}).lookNFromAtoB('a', 0, 0, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookNFromAtoB('a', -1, 0, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookNFromAtoB(-2, 1, 0, 0).nothing?()
        listToContainer({'a', 'a'}).lookNFromAtoB('a', 1, 0, 1) == 0
        listToContainer({'a', 'a'}).lookNFromAtoB('a', 2, 0, 1).nothing?()
        listToContainer({'a', 'a'}).lookNFromAtoB('a', 1, 1, 2) == 1
        listToContainer({'a', 'a'}).lookNFromAtoB('a', 2, 1, 2).nothing?()
        listToContainer({'a', 'a'}).lookNFromAtoB('a', 1, 0, 2) == 0
        listToContainer({'a', 'a'}).lookNFromAtoB('a', 2, 0, 2) == 1
        listToContainer({'a', 'a'}).lookNFromAtoB('a', 1, 0, 0).nothing?()
        listToContainer({'a', 'a'}).lookNFromAtoB('a', 1, 2, 2).nothing?()
        listToContainer({'a', -2}).lookNFromAtoB('a', 1, 1, 2).nothing?()
        listToContainer({'a', -2}).lookNFromAtoB(-2, 1, 1, 2) == 1
        listToContainer({'a', -2}).lookNFromAtoB(-2, 1, 1, 1).nothing?()
        listToContainer({'a', -2}).lookNFromAtoB('b', 1, 0, 2).nothing?()
        listToContainer({'a', -2}).lookNFromAtoB(97, 1, 0, 2).nothing?()
        listToContainer({'a', -2}).lookNFromAtoB('a', 1, 1, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookNFromAtoB('a', 1, 3, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookNFromAtoB('a', 2, 3, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookNFromAtoB(97, 1, -1, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookNFromAtoB(97, 1, 0, -1) : eid_outOfRange
        listToContainer({'a', -2}).lookNFromAtoB('a', 1, 0, 3) : eid_outOfRange
        listToContainer({'a', -2}).lookNFromAtoB('a', 1, 3, 0) : eid_outOfRange
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookNFromAtoB('a', 1, 0, 6) == 0
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookNFromAtoB('a', 2, 0, 6).nothing?()
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookNFromAtoB(3, 1, 0, 6) == 5
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookNFromAtoB(3, 2, 0, 6).nothing?()
        listToContainer({'a', -2, '2', 2, -2.0, 2, 'a'}).lookNFromAtoB(2, 1, 0, 6) == 3
        listToContainer({'a', -2, '2', 2, -2.0, 2, 'a'}).lookNFromAtoB(2, 2, 0, 6) == 5
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookNFromAtoB(1, 1, 0, 8) == 0
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookNFromAtoB(1, 2, 0, 8) == 1
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookNFromAtoB(1, 7, 0, 8) == 6
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookNFromAtoB(1, 8, 0, 8) == 7
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookNFromAtoB(1, 2, 1, 8) == 2
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookNFromAtoB(1, 3, 1, 7) == 3
        listToContainer({1, 1, 1, 1, 0, 1, 1, 1}).lookNFromAtoB(1, 4, 1, 7) == 5
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookNFromAtoB('2', 1, 2, 6) == 2
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookNFromAtoB('2', 2, 2, 6).nothing?()
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookNFromAtoB(1000, 1, 0, 6) == 3
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookNFromAtoB(-1.0, 1, 0, 6) == 4
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookNFromAtoB(3, 1, 0, 6) == 5
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookNFromAtoB('2', 1, 3, 6).nothing?()
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookNFromAtoB(3, 1, 0, 5).nothing?()
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookNFromAtoB('b', 1, 0, 6).nothing?()

#noinline
def testContainer_LookAny(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookAny({0}).nothing?()
        listToContainer({}).lookAny({1}).nothing?()
        listToContainer({}).lookAny({1, 2}).nothing?()
        listToContainer({}).lookAny({nothing}).nothing?()
        listToContainer({0}).lookAny({0}) == 0
        listToContainer({0}).lookAny({0, 1}) == 0
        listToContainer({0}).lookAny({1, 0}) == 0
        listToContainer({0}).lookAny({1}).nothing?()
        listToContainer({0}).lookAny({1, 2}).nothing?()
        listToContainer({0}).lookAny({nothing}).nothing?()
        listToContainer({0}).lookAny({0, nothing}) == 0
        listToContainer({0}).lookAny({nothing, 0}) == 0
        listToContainer({0}).lookAny({0, 0}) == 0
        listToContainer({0, 1.1}).lookAny({0}) == 0
        listToContainer({0, 1.1}).lookAny({1.1}) == 1
        listToContainer({0, 1.1}).lookAny({0, 2}) == 0
        listToContainer({0, 1.1}).lookAny({2, 0}) == 0
        listToContainer({0, 1.1}).lookAny({1.1, 0}) == 0
        listToContainer({0, 1.1}).lookAny({0, 1.1}) == 0
        listToContainer({0, 1.1}).lookAny({2, 0, 1.1}) == 0
        listToContainer({0, 1.1}).lookAny({2, -2, 1.1}) == 1
        listToContainer({0, 1.1}).lookAny({2, -2, 0.0}).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookAny({'a'}) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAny({0}) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookAny({3, 'a'}) == 3
        listToContainer({0, 3, 1.1, nothing, 'a'}).lookAny({3, nothing, 'a'}) == 1
        listToContainer({0, 1.1, nothing, 'a'}).lookAny({3, nothing}).nothing?()
        listToContainer({}).lookAny({}) : eid_nothingToLook
        listToContainer({1, 2}).lookAny({}) : eid_nothingToLook

#noinline
def testContainer_LookNAny(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookAnyN({0}, 1).nothing?()
        listToContainer({}).lookAnyN({0}, 2).nothing?()
        listToContainer({}).lookAnyN({0}, 9223372036854775807).nothing?()
        listToContainer({}).lookAnyN({0}, 0) : eid_outOfRange
        listToContainer({}).lookAnyN({0}, -1) : eid_outOfRange
        listToContainer({}).lookAnyN({0}, -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookAnyN({1}, 1).nothing?()
        listToContainer({}).lookAnyN({1, 2}, 1).nothing?()
        listToContainer({}).lookAnyN({nothing}, 1).nothing?()
        listToContainer({}).lookAnyN({nothing}, 2).nothing?()
        listToContainer({0}).lookAnyN({0}, 1) == 0
        listToContainer({0}).lookAnyN({0}, 2).nothing?()
        listToContainer({0}).lookAnyN({0}, 9223372036854775807).nothing?()
        listToContainer({0}).lookAnyN({0}, 0) : eid_outOfRange
        listToContainer({0}).lookAnyN({0}, -1) : eid_outOfRange
        listToContainer({0}).lookAnyN({0}, -9223372036854775808) : eid_outOfRange
        listToContainer({0}).lookAnyN({0, 1}, 1) == 0
        listToContainer({0}).lookAnyN({0, 1}, 2).nothing?()
        listToContainer({0}).lookAnyN({1, 0}, 1) == 0
        listToContainer({0}).lookAnyN({1, 0}, 2).nothing?()
        listToContainer({0}).lookAnyN({1}, 1).nothing?()
        listToContainer({0}).lookAnyN({1}, 2).nothing?()
        listToContainer({0}).lookAnyN({1, 2}, 1).nothing?()
        listToContainer({0}).lookAnyN({1, 2}, 2).nothing?()
        listToContainer({0}).lookAnyN({nothing}, 1).nothing?()
        listToContainer({0}).lookAnyN({nothing}, 2).nothing?()
        listToContainer({0}).lookAnyN({nothing}, 9223372036854775807).nothing?()
        listToContainer({0}).lookAnyN({nothing}, 0) : eid_outOfRange
        listToContainer({0}).lookAnyN({nothing}, -1) : eid_outOfRange
        listToContainer({0}).lookAnyN({nothing}, -9223372036854775808) : eid_outOfRange
        listToContainer({0}).lookAnyN({0, nothing}, 1) == 0
        listToContainer({0}).lookAnyN({0, nothing}, 2).nothing?()
        listToContainer({0}).lookAnyN({nothing, 0}, 1) == 0
        listToContainer({0}).lookAnyN({nothing, 0}, 2).nothing?()
        listToContainer({0}).lookAnyN({0, 0}, 1) == 0
        listToContainer({0}).lookAnyN({0, 0}, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyN({0}, 1) == 0
        listToContainer({0, 1.1}).lookAnyN({0}, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyN({1.1}, 1) == 1
        listToContainer({0, 1.1}).lookAnyN({1.1}, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyN({0, 2}, 1) == 0
        listToContainer({0, 1.1}).lookAnyN({0, 2}, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyN({2, 0}, 1) == 0
        listToContainer({0, 1.1}).lookAnyN({2, 0}, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyN({1.1, 0}, 1) == 0
        listToContainer({0, 1.1}).lookAnyN({0, 1.1}, 1) == 0
        listToContainer({0, 1.1}).lookAnyN({2, 0, 1.1}, 1) == 0
        listToContainer({0, 1.1}).lookAnyN({2, 0, 1.1}, 2) == 1
        listToContainer({0, 1.1}).lookAnyN({2, 0, 1.1}, 3).nothing?()
        listToContainer({0, 1.1}).lookAnyN({2, -2, 1.1}, 1) == 1
        listToContainer({0, 1.1}).lookAnyN({2, -2, 1.1}, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyN({2, -2, 0.0}, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyN({2, -2, 0.0}, 2).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyN({'a'}, 1) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyN({'a'}, 2).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyN({0}, 1) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyN({3, 'a'}, 1) == 3
        listToContainer({0, 3, 1.1, nothing, 'a'}).lookAnyN({3, nothing, 'a'}, 1) == 1
        listToContainer({0, 3, 1.1, nothing, 'a'}).lookAnyN({3, nothing, 'a'}, 2) == 4
        listToContainer({0, 3, 1.1, nothing, 'a'}).lookAnyN({3, nothing, 'a'}, 3).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyN({3, nothing}, 1).nothing?()
        listToContainer({1, 2, 3, 1, 2, 3}).lookAnyN({1, 2, 4}, 1) == 0
        listToContainer({1, 2, 3, 1, 2, 3}).lookAnyN({1, 2, 4}, 2) == 1
        listToContainer({1, 2, 3, 1, 2, 3}).lookAnyN({1, 2, 4}, 3) == 3
        listToContainer({1, 2, 3, 1, 2, 3}).lookAnyN({1, 2, 4}, 4) == 4
        listToContainer({1, 2, 3, 1, 2, 3}).lookAnyN({1, 2, 4}, 5).nothing?()
        listToContainer({}).lookAnyN({}, 1) : eid_nothingToLook
        listToContainer({1, 2}).lookAnyN({}, 1) : eid_nothingToLook

#noinline
def testContainer_LookAnyFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookAnyFromAtoB({0}, 0, 0).nothing?()
        listToContainer({}).lookAnyFromAtoB({1, 2}, 0, 0).nothing?()
        listToContainer({}).lookAnyFromAtoB({nothing}, 0, 0).nothing?()
        listToContainer({0}).lookAnyFromAtoB({0}, 0, 1) == 0
        listToContainer({0}).lookAnyFromAtoB({0, 1}, 0, 1) == 0
        listToContainer({0}).lookAnyFromAtoB({1, 0}, 0, 1) == 0
        listToContainer({0}).lookAnyFromAtoB({0, 0}, 0, 1) == 0
        listToContainer({0}).lookAnyFromAtoB({0, nothing}, 0, 1) == 0
        listToContainer({0}).lookAnyFromAtoB({nothing, 0}, 0, 1) == 0
        listToContainer({0}).lookAnyFromAtoB({1}, 0, 1).nothing?()
        listToContainer({0}).lookAnyFromAtoB({0}, 0, 0).nothing?()
        listToContainer({0}).lookAnyFromAtoB({0}, 1, 1).nothing?()
        listToContainer({0}).lookAnyFromAtoB({1, 2}, 0, 1).nothing?()
        listToContainer({0}).lookAnyFromAtoB({0, 2}, 0, 0).nothing?()
        listToContainer({0}).lookAnyFromAtoB({1, 0}, 1, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyFromAtoB({0}, 0, 2) == 0
        listToContainer({0, 0}).lookAnyFromAtoB({0}, 0, 2) == 0
        listToContainer({0, 0}).lookAnyFromAtoB({0, 0}, 0, 2) == 0
        listToContainer({0, 0}).lookAnyFromAtoB({0, 0}, 1, 2) == 1
        listToContainer({0, 0}).lookAnyFromAtoB({0, 0}, 2, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyFromAtoB({2, 0}, 0, 2) == 0
        listToContainer({0, 1.1}).lookAnyFromAtoB({1.1, 0}, 0, 2) == 0
        listToContainer({0, 1.1}).lookAnyFromAtoB({1.1, 2}, 0, 2) == 1
        listToContainer({0, 1.1}).lookAnyFromAtoB({0, 2}, 0, 1) == 0
        listToContainer({0, 1.1}).lookAnyFromAtoB({2, 0}, 0, 1) == 0
        listToContainer({0, 1.1}).lookAnyFromAtoB({1.1, 2}, 1, 2) == 1
        listToContainer({0, 1.1}).lookAnyFromAtoB({2, 1.1}, 1, 2) == 1
        listToContainer({0, 1.1}).lookAnyFromAtoB({2, -2, 0.0}, 0, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyFromAtoB({0}, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyFromAtoB({1.1}, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyFromAtoB({0, 1}, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyFromAtoB({1, 0}, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyFromAtoB({1.1, 1}, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyFromAtoB({1, 1.1}, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyFromAtoB({1, 1.1}, 0, 0).nothing?()
        listToContainer({0, 1.1}).lookAnyFromAtoB({1, 1.1}, 1, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyFromAtoB({1, 1.1}, 2, 2).nothing?()
        listToContainer({0, 1.1, 0}).lookAnyFromAtoB({1, 0}, 0, 3) == 0
        listToContainer({0, 1.1, 0}).lookAnyFromAtoB({1.1, 0}, 0, 3) == 0
        listToContainer({0, 1.1, 0}).lookAnyFromAtoB({0}, 1, 3) == 2
        listToContainer({0, 1.1, 0}).lookAnyFromAtoB({0}, 0, 2) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyFromAtoB({'a'}, 0, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyFromAtoB({'a'}, 1, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyFromAtoB({'a'}, 2, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyFromAtoB({'a'}, 3, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyFromAtoB({0, 'b'}, 0, 1) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyFromAtoB({'b', 0}, 0, 1) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyFromAtoB({'b', 0}, 0, 4) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyFromAtoB({3, 'a'}, 2, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyFromAtoB({nothing, 3, 'a'}, 2, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyFromAtoB({nothing, 3}, 2, 4).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyFromAtoB({'a'}, 0, 3).nothing?()
        listToContainer({}).lookAnyFromAtoB({'a'}, 0, 1) : eid_outOfRange
        listToContainer({}).lookAnyFromAtoB({'a'}, 1, 0) : eid_outOfRange
        listToContainer({}).lookAnyFromAtoB({'a'}, 1, 1) : eid_outOfRange
        listToContainer({}).lookAnyFromAtoB({'b'}, -1, 1) : eid_outOfRange
        listToContainer({}).lookAnyFromAtoB({'a'}, 1, -1) : eid_outOfRange
        listToContainer({}).lookAnyFromAtoB({'c'}, -1, -1) : eid_outOfRange
        listToContainer({}).lookAnyFromAtoB({'a'}, -10, -10) : eid_outOfRange
        listToContainer({}).lookAnyFromAtoB({'a'}, -9223372036854775808, 0) : eid_outOfRange
        listToContainer({}).lookAnyFromAtoB({'a'}, 0, -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookAnyFromAtoB({'a'}, 9223372036854775807, 0) : eid_outOfRange
        listToContainer({}).lookAnyFromAtoB({'a'}, 0, 9223372036854775807) : eid_outOfRange
        listToContainer({}).lookAnyFromAtoB({}, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookAnyFromAtoB({}, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookAnyFromAtoB({}, 0, 2) : eid_nothingToLook

#noinline
def testContainer_LookAnyNFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookAnyNFromAtoB({0}, 1, 0, 0).nothing?()
        listToContainer({}).lookAnyNFromAtoB({0}, 2, 0, 0).nothing?()
        listToContainer({}).lookAnyNFromAtoB({0}, 9223372036854775807, 0, 0).nothing?()
        listToContainer({}).lookAnyNFromAtoB({0}, 0, 0, 0) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({0}, -1, 0, 0) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({0}, -9223372036854775808, 0, 0) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({1, 2}, 1, 0, 0).nothing?()
        listToContainer({}).lookAnyNFromAtoB({1, 2}, 2, 0, 0).nothing?()
        listToContainer({}).lookAnyNFromAtoB({nothing}, 1, 0, 0).nothing?()
        listToContainer({}).lookAnyNFromAtoB({nothing}, 2, 0, 0).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({0}, 1, 0, 1) == 0
        listToContainer({0}).lookAnyNFromAtoB({0}, 2, 0, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({0}, 9223372036854775807, 0, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({0}, 0, 0, 1) : eid_outOfRange
        listToContainer({0}).lookAnyNFromAtoB({0}, -1, 0, 1) : eid_outOfRange
        listToContainer({0}).lookAnyNFromAtoB({0}, -9223372036854775808, 0, 1) : eid_outOfRange
        listToContainer({0}).lookAnyNFromAtoB({0, 1}, 1, 0, 1) == 0
        listToContainer({0}).lookAnyNFromAtoB({0, 1}, 2, 0, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({1, 0}, 1, 0, 1) == 0
        listToContainer({0}).lookAnyNFromAtoB({1, 0}, 2, 0, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({0, 0}, 1, 0, 1) == 0
        listToContainer({0}).lookAnyNFromAtoB({0, 0}, 2, 0, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({0, nothing}, 1, 0, 1) == 0
        listToContainer({0}).lookAnyNFromAtoB({0, nothing}, 2, 0, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({nothing, 0}, 1, 0, 1) == 0
        listToContainer({0}).lookAnyNFromAtoB({nothing, 0}, 2, 0, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({1}, 1, 0, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({1}, 2, 0, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({0}, 1, 0, 0).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({0}, 2, 0, 0).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({0}, 1, 1, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({0}, 2, 1, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({1, 2}, 1, 0, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({1, 2}, 2, 0, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({0, 2}, 1, 0, 0).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({0, 2}, 2, 0, 0).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({1, 0}, 1, 1, 1).nothing?()
        listToContainer({0}).lookAnyNFromAtoB({1, 0}, 2, 1, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({0}, 1, 0, 2) == 0
        listToContainer({0, 1.1}).lookAnyNFromAtoB({0}, 2, 0, 2).nothing?()
        listToContainer({0, 0}).lookAnyNFromAtoB({0}, 1, 0, 2) == 0
        listToContainer({0, 0}).lookAnyNFromAtoB({0}, 2, 0, 2) == 1
        listToContainer({0, 0}).lookAnyNFromAtoB({0}, 3, 0, 2).nothing?()
        listToContainer({0, 0}).lookAnyNFromAtoB({0, 0}, 1, 0, 2) == 0
        listToContainer({0, 0}).lookAnyNFromAtoB({0, 0}, 2, 0, 2) == 1
        listToContainer({0, 0}).lookAnyNFromAtoB({0, 0}, 3, 0, 2).nothing?()
        listToContainer({0, 0}).lookAnyNFromAtoB({0, 0}, 1, 1, 2) == 1
        listToContainer({0, 0}).lookAnyNFromAtoB({0, 0}, 2, 1, 2).nothing?()
        listToContainer({0, 0}).lookAnyNFromAtoB({0, 0}, 1, 2, 2).nothing?()
        listToContainer({0, 0}).lookAnyNFromAtoB({0, 0}, 2, 2, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({2, 0}, 1, 0, 2) == 0
        listToContainer({0, 1.1}).lookAnyNFromAtoB({2, 0}, 2, 0, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1.1, 0}, 1, 0, 2) == 0
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1.1, 0}, 2, 0, 2) == 1
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1.1, 0}, 3, 0, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1.1, 2}, 1, 0, 2) == 1
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1.1, 2}, 2, 0, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({0, 2}, 1, 0, 1) == 0
        listToContainer({0, 1.1}).lookAnyNFromAtoB({0, 2}, 2, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({2, 0}, 1, 0, 1) == 0
        listToContainer({0, 1.1}).lookAnyNFromAtoB({2, 0}, 2, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1.1, 2}, 1, 1, 2) == 1
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1.1, 2}, 2, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({2, 1.1}, 1, 1, 2) == 1
        listToContainer({0, 1.1}).lookAnyNFromAtoB({2, 1.1}, 2, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({2, -2, 0.0}, 1, 0, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({2, -2, 0.0}, 2, 0, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({0}, 1, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({0}, 2, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1.1}, 1, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({0, 1}, 1, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({0, 1}, 2, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1, 0}, 1, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1, 0}, 2, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1.1, 1}, 1, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1.1, 1}, 2, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1, 1.1}, 1, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1, 1.1}, 2, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1, 1.1}, 1, 0, 0).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1, 1.1}, 2, 0, 0).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1, 1.1}, 1, 1, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1, 1.1}, 2, 1, 1).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1, 1.1}, 1, 2, 2).nothing?()
        listToContainer({0, 1.1}).lookAnyNFromAtoB({1, 1.1}, 2, 2, 2).nothing?()
        listToContainer({0, 1.1, 0}).lookAnyNFromAtoB({1, 0}, 1, 0, 3) == 0
        listToContainer({0, 1.1, 0}).lookAnyNFromAtoB({1, 0}, 2, 0, 3) == 2
        listToContainer({0, 1.1, 0}).lookAnyNFromAtoB({1, 0}, 3, 0, 3).nothing?()
        listToContainer({0, 1.1, 0}).lookAnyNFromAtoB({1.1, 0}, 1, 0, 3) == 0
        listToContainer({0, 1.1, 0}).lookAnyNFromAtoB({1.1, 0}, 2, 0, 3) == 1
        listToContainer({0, 1.1, 0}).lookAnyNFromAtoB({1.1, 0}, 3, 0, 3) == 2
        listToContainer({0, 1.1, 0}).lookAnyNFromAtoB({1.1, 0}, 4, 0, 3).nothing?()
        listToContainer({0, 1.1, 0}).lookAnyNFromAtoB({0}, 1, 1, 3) == 2
        listToContainer({0, 1.1, 0}).lookAnyNFromAtoB({0}, 2, 1, 3).nothing?()
        listToContainer({0, 1.1, 0}).lookAnyNFromAtoB({0}, 1, 0, 2) == 0
        listToContainer({0, 1.1, 0}).lookAnyNFromAtoB({0}, 2, 0, 2).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({'a'}, 1, 0, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({'a'}, 2, 0, 4).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({'a'}, 1, 1, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({'a'}, 2, 1, 4).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({'a'}, 1, 2, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({'a'}, 2, 2, 4).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({'a'}, 1, 3, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({'a'}, 2, 3, 4).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({0, 'b'}, 1, 0, 1) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({'b', 0}, 1, 0, 1) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({'b', 0}, 1, 0, 4) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({3, 'a'}, 1, 2, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({nothing, 3, 'a'}, 1, 2, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({nothing, 3}, 1, 2, 4).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookAnyNFromAtoB({'a'}, 1, 0, 3).nothing?()
        listToContainer({}).lookAnyNFromAtoB({'a'}, 1, 0, 1) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({'a'}, 1, 1, 0) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({'a'}, 1, 1, 1) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({'b'}, 1, -1, 1) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({'a'}, 1, 1, -1) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({'c'}, 1, -1, -1) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({'a'}, 1, -10, -10) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({'a'}, 1, -9223372036854775808, 0) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({'a'}, 2, -9223372036854775808, 0) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({'a'}, 1, 0, -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({'a'}, 1, 9223372036854775807, 0) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({'a'}, 1, 0, 9223372036854775807) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({'a'}, 2, 0, 9223372036854775807) : eid_outOfRange
        listToContainer({}).lookAnyNFromAtoB({}, 1, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookAnyNFromAtoB({}, 1, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookAnyNFromAtoB({}, 1, 0, 2) : eid_nothingToLook

#noinline
def testContainer_LookPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookPart(listToContainer({0})).nothing?()
        listToContainer({}).lookPart(listToContainer({'a'})).nothing?()
        listToContainer({1}).lookPart(listToContainer({1})) == 0
        listToContainer({2}).lookPart(listToContainer({1})).nothing?()
        listToContainer({2}).lookPart(listToContainer({2, 1})).nothing?()
        listToContainer({2}).lookPart(listToContainer({1, 2})).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPart(listToContainer({1})) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPart(listToContainer({4})) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPart(listToContainer({1, 2})) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPart(listToContainer({2, 3})) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPart(listToContainer({2, 3, 4})) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPart(listToContainer({3, 4})) == 4
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPart(listToContainer({2, 2})).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPart(listToContainer({5})).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPart(listToContainer({1, 1})).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPart(listToContainer({4, 4})).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPart(listToContainer({4, 1})).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPart(listToContainer({4, 5})).nothing?()
        listToContainer({nothing}).lookPart(listToContainer({nothing})).nothing?()
        listToContainer({}).lookPart(listToContainer({})) : eid_nothingToLook
        listToContainer({1, 2}).lookPart(listToContainer({})) : eid_nothingToLook
        listToContainer({1, 2, nothing, 2, 3, 4, 1, 2, 1, 2, 1}).lookPart(listToContainer({1, 2})) == 0
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2}).lookPart(listToContainer({2, 2, 2, 2})) == 3
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}).lookPart(listToContainer({2, 2, 2, 2})) == 3

#noinline
def testContainer_LookNPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookNPart(listToContainer({0}), 1).nothing?()
        listToContainer({}).lookNPart(listToContainer({0}), 2).nothing?()
        listToContainer({}).lookNPart(listToContainer({0}), 9223372036854775807).nothing?()
        listToContainer({}).lookNPart(listToContainer({0}), 0) : eid_outOfRange
        listToContainer({}).lookNPart(listToContainer({0}), -1) : eid_outOfRange
        listToContainer({}).lookNPart(listToContainer({0}), -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookNPart(listToContainer({'a'}), 1).nothing?()
        listToContainer({}).lookNPart(listToContainer({'a'}), 2).nothing?()
        listToContainer({1}).lookNPart(listToContainer({1}), 1) == 0
        listToContainer({1}).lookNPart(listToContainer({1}), 2).nothing?()
        listToContainer({1}).lookNPart(listToContainer({1}), 9223372036854775807).nothing?()
        listToContainer({1}).lookNPart(listToContainer({1}), 0) : eid_outOfRange
        listToContainer({1}).lookNPart(listToContainer({1}), -1) : eid_outOfRange
        listToContainer({1}).lookNPart(listToContainer({1}), -9223372036854775808) : eid_outOfRange
        listToContainer({2}).lookNPart(listToContainer({1}), 1).nothing?()
        listToContainer({2}).lookNPart(listToContainer({1}), 2).nothing?()
        listToContainer({2}).lookNPart(listToContainer({2, 1}), 1).nothing?()
        listToContainer({2}).lookNPart(listToContainer({2, 1}), 2).nothing?()
        listToContainer({2}).lookNPart(listToContainer({1, 2}), 1).nothing?()
        listToContainer({2}).lookNPart(listToContainer({1, 2}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({1}), 1) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({1}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({2}), 1) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({2}), 2) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({1}), 3).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({4}), 1) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({4}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({1, 2}), 1) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({1, 2}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({2, 2}), 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({2, 3}), 1) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({2, 3}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({2, 3, 4}), 1) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({2, 3, 4}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({3, 4}), 1) == 4
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({3, 4}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({5}), 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({5}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({1, 1}), 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({1, 1}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({4, 4}), 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({4, 4}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({4, 1}), 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({4, 1}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({4, 5}), 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPart(listToContainer({4, 5}), 2).nothing?()
        listToContainer({nothing}).lookNPart(listToContainer({nothing}), 1).nothing?()
        listToContainer({nothing}).lookNPart(listToContainer({nothing}), 2).nothing?()
        listToContainer({}).lookNPart(listToContainer({}), 1) : eid_nothingToLook
        listToContainer({1, 2}).lookNPart(listToContainer({}), 1) : eid_nothingToLook
        listToContainer({1, 2, nothing, 2, 3, 4, 1, 2, 1, 2, 1}).lookNPart(listToContainer({1, 2}), 1) == 0
        listToContainer({1, 2, nothing, 2, 3, 4, 1, 2, 1, 2, 1}).lookNPart(listToContainer({1, 2}), 2) == 6
        listToContainer({1, 2, nothing, 2, 3, 4, 1, 2, 1, 2, 1}).lookNPart(listToContainer({1, 2}), 3) == 8
        listToContainer({1, 2, nothing, 2, 3, 4, 1, 2, 1, 2, 1}).lookNPart(listToContainer({1, 2}), 4).nothing?()
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2}).lookNPart(listToContainer({2, 2, 2, 2}), 1) == 3
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2}).lookNPart(listToContainer({2, 2, 2, 2}), 2) == 7
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2}).lookNPart(listToContainer({2, 2, 2, 2}), 3).nothing?()
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}).lookNPart(listToContainer({2, 2, 2, 2}), 1) == 3
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}).lookNPart(listToContainer({2, 2, 2, 2}), 2) == 7
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}).lookNPart(listToContainer({2, 2, 2, 2}), 3).nothing?()

#noinline
def testContainer_LookPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookPartFromAtoB(listToContainer({0}), 0, 0).nothing?()
        listToContainer({}).lookPartFromAtoB(listToContainer({'a'}), 0, 0).nothing?()
        listToContainer({}).lookPartFromAtoB(listToContainer({'a'}), -1, 0) : eid_outOfRange
        listToContainer({}).lookPartFromAtoB(listToContainer({'a'}), -9223372036854775808, 0) : eid_outOfRange
        listToContainer({}).lookPartFromAtoB(listToContainer({'a'}), 1, 0) : eid_outOfRange
        listToContainer({}).lookPartFromAtoB(listToContainer({'a'}), 9223372036854775807, 0) : eid_outOfRange
        listToContainer({}).lookPartFromAtoB(listToContainer({'a'}), 0, -1) : eid_outOfRange
        listToContainer({}).lookPartFromAtoB(listToContainer({'a'}), 0, -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookPartFromAtoB(listToContainer({'a'}), 0, 1) : eid_outOfRange
        listToContainer({}).lookPartFromAtoB(listToContainer({'a'}), 0, 9223372036854775807) : eid_outOfRange
        listToContainer({1}).lookPartFromAtoB(listToContainer({1}), 0, 1) == 0
        listToContainer({1}).lookPartFromAtoB(listToContainer({1}), 1, 0) : eid_outOfRange
        listToContainer({1}).lookPartFromAtoB(listToContainer({1}), 0, 0).nothing?()
        listToContainer({1}).lookPartFromAtoB(listToContainer({1}), 1, 1).nothing?()
        listToContainer({2}).lookPartFromAtoB(listToContainer({1}), 0, 1).nothing?()
        listToContainer({2}).lookPartFromAtoB(listToContainer({1}), 0, 0).nothing?()
        listToContainer({2}).lookPartFromAtoB(listToContainer({1}), 1, 1).nothing?()
        listToContainer({2}).lookPartFromAtoB(listToContainer({2, 1}), 0, 1).nothing?()
        listToContainer({2}).lookPartFromAtoB(listToContainer({1, 2}), 0, 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({1}), 0, 1) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({1}), 0, 2) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({1}), 0, 6) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({4}), 0, 6) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({4}), 1, 6) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({4}), 2, 6) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({4}), 2, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({4}), 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2}), 0, 5) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({1, 2}), 0, 6) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({1, 2}), 1, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2, 3}), 0, 6) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2, 3}), 0, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2, 3}), 1, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2, 3}), 3, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2, 3}), 3, 4).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2, 3}), 4, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2, 3, 4}), 0, 6) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2, 3, 4}), 3, 6) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2, 3, 4}), 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2, 3, 4}), 4, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2, 2}), 0, 6).nothing?()
        listToContainer({nothing}).lookPartFromAtoB(listToContainer({nothing}), 0, 0).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2, nothing}), 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2}), -1, 2) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2}), 2, 1) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookPartFromAtoB(listToContainer({2}), -10, -1) : eid_outOfRange
        listToContainer({}).lookPartFromAtoB(listToContainer({}), 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookPartFromAtoB(listToContainer({}), 0, 0) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookPartFromAtoB(listToContainer({1, 2}), 0, 3) == 0
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookPartFromAtoB(listToContainer({1, 2}), 0, 6) == 0
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookPartFromAtoB(listToContainer({2, 2, 2}), 0, 7) == 0
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookPartFromAtoB(listToContainer({2, 2, 2}), 1, 6) == 1
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookPartFromAtoB(listToContainer({2, 2, 2}), 2, 5) == 2
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookPartFromAtoB(listToContainer({2, 2, 2}), 0, 8) == 0
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookPartFromAtoB(listToContainer({2, 2, 2}), 1, 7) == 1
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookPartFromAtoB(listToContainer({2, 2, 2}), 0, 6) == 0
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookPartFromAtoB(listToContainer({2, 2, 2}), 2, 5) == 2
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookPartFromAtoB(listToContainer({2, 2, 2}), 1, 7) == 1

#noinline
def testContainer_LookNPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookNPartFromAtoB(listToContainer({0}), 1, 0, 0).nothing?()
        listToContainer({}).lookNPartFromAtoB(listToContainer({0}), 2, 0, 0).nothing?()
        listToContainer({}).lookNPartFromAtoB(listToContainer({0}), 9223372036854775807, 0, 0).nothing?()
        listToContainer({}).lookNPartFromAtoB(listToContainer({0}), 0, 0, 0) : eid_outOfRange
        listToContainer({}).lookNPartFromAtoB(listToContainer({0}), -1, 0, 0) : eid_outOfRange
        listToContainer({}).lookNPartFromAtoB(listToContainer({0}), -9223372036854775808, 0, 0) : eid_outOfRange
        listToContainer({}).lookNPartFromAtoB(listToContainer({'a'}), 1, 0, 0).nothing?()
        listToContainer({}).lookNPartFromAtoB(listToContainer({'a'}), 2, 0, 0).nothing?()
        listToContainer({}).lookNPartFromAtoB(listToContainer({'a'}), 1, -1, 0) : eid_outOfRange
        listToContainer({}).lookNPartFromAtoB(listToContainer({'a'}), 1, -9223372036854775808, 0) : eid_outOfRange
        listToContainer({}).lookNPartFromAtoB(listToContainer({'a'}), 1, 1, 0) : eid_outOfRange
        listToContainer({}).lookNPartFromAtoB(listToContainer({'a'}), 1, 9223372036854775807, 0) : eid_outOfRange
        listToContainer({}).lookNPartFromAtoB(listToContainer({'a'}), 1, 0, -1) : eid_outOfRange
        listToContainer({}).lookNPartFromAtoB(listToContainer({'a'}), 1, 0, -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookNPartFromAtoB(listToContainer({'a'}), 1, 0, 1) : eid_outOfRange
        listToContainer({}).lookNPartFromAtoB(listToContainer({'a'}), 1, 0, 9223372036854775807) : eid_outOfRange
        listToContainer({1}).lookNPartFromAtoB(listToContainer({1}), 1, 0, 1) == 0
        listToContainer({1}).lookNPartFromAtoB(listToContainer({1}), 9223372036854775807, 0, 1).nothing?()
        listToContainer({1}).lookNPartFromAtoB(listToContainer({1}), 0, 0, 1) : eid_outOfRange
        listToContainer({1}).lookNPartFromAtoB(listToContainer({1}), -1, 0, 1) : eid_outOfRange
        listToContainer({1}).lookNPartFromAtoB(listToContainer({1}), -9223372036854775808, 0, 1) : eid_outOfRange
        listToContainer({1}).lookNPartFromAtoB(listToContainer({1}), 1, 1, 0) : eid_outOfRange
        listToContainer({1}).lookNPartFromAtoB(listToContainer({1}), 1, 0, 0).nothing?()
        listToContainer({1}).lookNPartFromAtoB(listToContainer({1}), 2, 0, 0).nothing?()
        listToContainer({1}).lookNPartFromAtoB(listToContainer({1}), 1, 1, 1).nothing?()
        listToContainer({1}).lookNPartFromAtoB(listToContainer({1}), 2, 1, 1).nothing?()
        listToContainer({2}).lookNPartFromAtoB(listToContainer({1}), 1, 0, 1).nothing?()
        listToContainer({2}).lookNPartFromAtoB(listToContainer({1}), 2, 0, 1).nothing?()
        listToContainer({2}).lookNPartFromAtoB(listToContainer({1}), 1, 0, 0).nothing?()
        listToContainer({2}).lookNPartFromAtoB(listToContainer({1}), 2, 0, 0).nothing?()
        listToContainer({2}).lookNPartFromAtoB(listToContainer({1}), 1, 1, 1).nothing?()
        listToContainer({2}).lookNPartFromAtoB(listToContainer({1}), 2, 1, 1).nothing?()
        listToContainer({2}).lookNPartFromAtoB(listToContainer({2, 1}), 1, 0, 1).nothing?()
        listToContainer({2}).lookNPartFromAtoB(listToContainer({2, 1}), 2, 0, 1).nothing?()
        listToContainer({2}).lookNPartFromAtoB(listToContainer({1, 2}), 1, 0, 1).nothing?()
        listToContainer({2}).lookNPartFromAtoB(listToContainer({1, 2}), 2, 0, 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({1}), 1, 0, 1) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({1}), 0, 0, 1) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({1}), -1, 0, 1) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({1}), -9223372036854775808, 0, 1) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({1}), 2, 0, 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({1}), 1, 0, 2) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({1}), 2, 0, 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({1}), 1, 0, 6) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({1}), 2, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({4}), 1, 0, 6) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({4}), 2, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({4}), 1, 1, 6) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({4}), 2, 1, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({4}), 1, 2, 6) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({4}), 2, 2, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({4}), 1, 2, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({4}), 2, 2, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({4}), 1, 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({4}), 2, 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2}), 1, 0, 5) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2}), 2, 0, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2}), 1, 2, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2}), 2, 2, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2}), 3, 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({1, 2}), 1, 0, 6) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({1, 2}), 2, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({1, 2}), 1, 1, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({1, 2}), 2, 1, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3}), 1, 0, 6) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3}), 2, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3}), 1, 0, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3}), 2, 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3}), 1, 1, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3}), 2, 1, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3}), 1, 3, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3}), 2, 3, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3}), 1, 3, 4).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3}), 2, 3, 4).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3}), 1, 4, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3}), 2, 4, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3, 4}), 1, 0, 6) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3, 4}), 2, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3, 4}), 1, 3, 6) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3, 4}), 2, 3, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3, 4}), 1, 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3, 4}), 2, 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3, 4}), 1, 4, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 3, 4}), 2, 4, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 2}), 1, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, 2}), 2, 0, 6).nothing?()
        listToContainer({nothing}).lookNPartFromAtoB(listToContainer({nothing}), 1, 0, 0).nothing?()
        listToContainer({nothing}).lookNPartFromAtoB(listToContainer({nothing}), 2, 0, 0).nothing?()
        listToContainer({nothing}).lookNPartFromAtoB(listToContainer({nothing}), 1, 0, 1).nothing?()
        listToContainer({nothing}).lookNPartFromAtoB(listToContainer({nothing}), 2, 0, 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, nothing}), 1, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2, nothing}), 2, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2}), 1, -1, 2) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2}), 1, 2, 1) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookNPartFromAtoB(listToContainer({2}), 1, -10, -1) : eid_outOfRange
        listToContainer({}).lookNPartFromAtoB(listToContainer({}), 1, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookNPartFromAtoB(listToContainer({}), 1, 0, 0) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookNPartFromAtoB(listToContainer({1, 2}), 1, 0, 3) == 0
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookNPartFromAtoB(listToContainer({1, 2}), 2, 0, 3).nothing?()
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookNPartFromAtoB(listToContainer({1, 2}), 1, 0, 6) == 0
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookNPartFromAtoB(listToContainer({1, 2}), 2, 0, 6) == 4
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookNPartFromAtoB(listToContainer({1, 2}), 3, 0, 6).nothing?()
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookNPartFromAtoB(listToContainer({2, 2, 2}), 1, 0, 7) == 0
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookNPartFromAtoB(listToContainer({2, 2, 2}), 2, 0, 7) == 3
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookNPartFromAtoB(listToContainer({2, 2, 2}), 3, 0, 7).nothing?()
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookNPartFromAtoB(listToContainer({2, 2, 2}), 1, 1, 6) == 1
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookNPartFromAtoB(listToContainer({2, 2, 2}), 2, 1, 6).nothing?()
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookNPartFromAtoB(listToContainer({2, 2, 2}), 1, 2, 5) == 2
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookNPartFromAtoB(listToContainer({2, 2, 2}), 1, 0, 8) == 0
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookNPartFromAtoB(listToContainer({2, 2, 2}), 2, 0, 8) == 3
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookNPartFromAtoB(listToContainer({2, 2, 2}), 3, 0, 8).nothing?()
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookNPartFromAtoB(listToContainer({2, 2, 2}), 1, 1, 7) == 1
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookNPartFromAtoB(listToContainer({2, 2, 2}), 2, 1, 7) == 4
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookNPartFromAtoB(listToContainer({2, 2, 2}), 3, 1, 7).nothing?()

#noinline
def testContainer_LookAnyPart(write ok Int, write errorsCoordinates List)
    var c <>Container = nothing
    test: ok, errorsCoordinates
        listToContainer({}).lookAnyPart([listToContainer({1, 2}), listToContainer({23})], c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyPart([listToContainer({1, 2})], c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyPart([listToContainer({nothing})], c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyPart([{nothing}], c) : eid_invalidType
        c.nothing?()
        listToContainer({1}).lookAnyPart([listToContainer({1})], c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyPart([listToContainer({1}), listToContainer({2})], c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyPart([listToContainer({2}), listToContainer({1})], c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyPart([listToContainer({1}), listToContainer({1})], c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyPart([listToContainer({2}), listToContainer({0})], c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyPart([listToContainer({0})], c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyPart([listToContainer({1, 2})], c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyPart([listToContainer({2, 1})], c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyPart([{12}], c) : eid_invalidType
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyPart([listToContainer({0}), listToContainer({1})], c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyPart([listToContainer({1}), listToContainer({0})], c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyPart([listToContainer({1, 2}), listToContainer({0})], c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyPart([listToContainer({0}), listToContainer({1, 2})], c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyPart([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyPart([{12}], c) : eid_invalidType
        c == listToContainer({1, 2})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyPart([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], c) == 0
        c == listToContainer({1, 2, 3})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyPart([listToContainer({0, 2, 3}), listToContainer({4, 'a'}), listToContainer({1, 1, 2})], c) == 3
        c == listToContainer({4, 'a'})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyPart([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})], c) == 5
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyPart([listToContainer({2, 3, 4, 4}), listToContainer({4, 'b', nothing}), listToContainer({12, "bbbb"})], c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyPart([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})], c) == 1
        c == listToContainer({2, 3, 4, 4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyPart([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], c) == 1
        c == listToContainer({2, 3})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyPart([listToContainer({4}), listToContainer({2, 3}), listToContainer({12, "bbb"})], c) == 1
        c == listToContainer({2, 3})
        listToContainer({}).lookAnyPart([], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookAnyPart([listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookAnyPart([listToContainer({}), listToContainer({12})], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookAnyPart([listToContainer({12}), listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookAnyPart([], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookAnyPart([listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookAnyPart([listToContainer({}), listToContainer({12})], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookAnyPart([listToContainer({12}), listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookAnyPart([], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookAnyPart([listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookAnyPart([listToContainer({}), listToContainer({12})], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookAnyPart([listToContainer({12}), listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookAnyPart([], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookAnyPart([listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookAnyPart([listToContainer({}), listToContainer({12})], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookAnyPart([listToContainer({12}), listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookAnyPart([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], c) == 2
        c == listToContainer({3, 1})
        listToContainer({2, 2, 2, 2, 2, 2}).lookAnyPart([listToContainer({2, 2, 2})], c) == 0
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2}).lookAnyPart([listToContainer({2, 2, 2})], c) == 0
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 1, 2}).lookAnyPart([listToContainer({2, 2, 2, 2, 1}), listToContainer({2, 2, 2})], c) == 0
        c == listToContainer({2, 2, 2, 2, 1})
        listToContainer({2, 2, 2, 2, 1, 2}).lookAnyPart([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2, 1})], c) == 0
        c == listToContainer({2, 2, 2})

#noinline
def testContainer_LookAnyNPart(write ok Int, write errorsCoordinates List)
    var c <>Container = nothing
    test: ok, errorsCoordinates
        listToContainer({}).lookAnyNPart([listToContainer({1, 2}), listToContainer({23})], 1, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPart([listToContainer({1, 2}), listToContainer({23})], 2, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPart([listToContainer({1, 2})], 1, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPart([listToContainer({1, 2})], 2, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPart([listToContainer({1, 2})], 9223372036854775807, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPart([listToContainer({1, 2})], 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPart([listToContainer({1, 2})], -1, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPart([listToContainer({1, 2})], -9223372036854775808, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPart([listToContainer({nothing})], 1, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPart([listToContainer({nothing})], 2, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPart([{nothing}], 1, c) : eid_invalidType
        c.nothing?()
        listToContainer({}).lookAnyNPart([{nothing}], 2, c) : eid_invalidType
        c.nothing?()
        listToContainer({1}).lookAnyNPart([listToContainer({1})], 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({1})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({1})], 9223372036854775807, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({1})], 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({1})], -1, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({1})], -9223372036854775808, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({1}), listToContainer({2})], 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({1}), listToContainer({2})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({2}), listToContainer({1})], 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({2}), listToContainer({1})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({1}), listToContainer({1})], 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({1}), listToContainer({1})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({2}), listToContainer({0})], 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({2}), listToContainer({0})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({0})], 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({0})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({1, 2})], 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({1, 2})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({2, 1})], 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([listToContainer({2, 1})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPart([{12}], 1, c) : eid_invalidType
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyNPart([listToContainer({0}), listToContainer({1})], 1, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyNPart([listToContainer({0}), listToContainer({1})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyNPart([listToContainer({1}), listToContainer({0})], 1, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyNPart([listToContainer({1}), listToContainer({0})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyNPart([listToContainer({1, 2}), listToContainer({0})], 1, c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyNPart([listToContainer({1, 2}), listToContainer({0})], 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyNPart([listToContainer({0}), listToContainer({1, 2})], 1, c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyNPart([listToContainer({0}), listToContainer({1, 2})], 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyNPart([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 1, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyNPart([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyNPart([{12}], 1, c) : eid_invalidType
        c == listToContainer({1, 2})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 1, c) == 0
        c == listToContainer({1, 2, 3})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({0, 2, 3}), listToContainer({4, 'a'}), listToContainer({1, 1, 2})], 1, c) == 3
        c == listToContainer({4, 'a'})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})], 1, c) == 5
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({2, 3, 4, 4}), listToContainer({4, 'b', nothing}), listToContainer({12, "bbbb"})], 1, c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 1, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 2, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 1, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 2, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 3, c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})], 1, c) == 1
        c == listToContainer({2, 3, 4, 4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})], 2, c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 1, c) == 1
        c == listToContainer({2, 3})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 2, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 3, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 4, c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPart([listToContainer({4}), listToContainer({2, 3}), listToContainer({12, "bbb"})], 5, c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({}).lookAnyNPart([], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({}).lookAnyNPart([listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({}).lookAnyNPart([listToContainer({}), listToContainer({12})], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({}).lookAnyNPart([listToContainer({12}), listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12}).lookAnyNPart([], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12}).lookAnyNPart([listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12}).lookAnyNPart([listToContainer({}), listToContainer({12})], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12}).lookAnyNPart([listToContainer({12}), listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({1, 12}).lookAnyNPart([], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({1, 12}).lookAnyNPart([listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({1, 12}).lookAnyNPart([listToContainer({}), listToContainer({12})], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({1, 12}).lookAnyNPart([listToContainer({12}), listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12, 1}).lookAnyNPart([], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12, 1}).lookAnyNPart([listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12, 1}).lookAnyNPart([listToContainer({}), listToContainer({12})], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12, 1}).lookAnyNPart([listToContainer({12}), listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookAnyNPart([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 1, c) == 2
        c == listToContainer({3, 1})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookAnyNPart([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 2, c) == 5
        c == listToContainer({1, 7})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookAnyNPart([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 3, c).nothing?()
        c == listToContainer({1, 7})
        listToContainer({2, 2, 2, 2, 2, 2}).lookAnyNPart([listToContainer({2, 2, 2})], 1, c) == 0
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2, 2}).lookAnyNPart([listToContainer({2, 2, 2})], 2, c) == 3
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2}).lookAnyNPart([listToContainer({2, 2, 2})], 1, c) == 0
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2}).lookAnyNPart([listToContainer({2, 2, 2})], 2, c).nothing?()
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 1, 2}).lookAnyNPart([listToContainer({2, 2, 2, 2, 1}), listToContainer({2, 2, 2})], 1, c) == 0
        c == listToContainer({2, 2, 2, 2, 1})
        listToContainer({2, 2, 2, 2, 1, 2}).lookAnyNPart([listToContainer({2, 2, 2, 2, 1}), listToContainer({2, 2, 2})], 2, c).nothing?()
        c == listToContainer({2, 2, 2, 2, 1})
        listToContainer({2, 2, 2, 2, 1, 2}).lookAnyNPart([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2, 1})], 1, c) == 0
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 1, 2}).lookAnyNPart([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2, 1})], 2, c).nothing?()
        c == listToContainer({2, 2, 2})

#noinline
def testContainer_LookAnyPartFromAtoB(write ok Int, write errorsCoordinates List)
    var c <>Container = nothing
    test: ok, errorsCoordinates
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({1, 2}), listToContainer({23})], 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({1, 2})], 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({1, 2})], 1, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({1, 2})], 9223372036854775807, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({1, 2})], -1, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({1, 2})], -9223372036854775808, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({1, 2})], 0, 1, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({1, 2})], 0, 9223372036854775807, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({1, 2})], 0, -1, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({1, 2})], 0, -9223372036854775808, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({nothing})], 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyPartFromAtoB([{nothing}], 0, 0, c) : eid_invalidType
        c.nothing?()
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1})], 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1})], 1, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1})], 2, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1})], 9223372036854775807, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1})], -1, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1})], -9223372036854775808, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1})], 0, 2, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1})], 0, 9223372036854775807, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1})], 0, -1, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1})], 0, -9223372036854775808, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1}), listToContainer({2})], 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1}), listToContainer({2})], 0, 0, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1}), listToContainer({2})], 1, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({2}), listToContainer({1})], 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1}), listToContainer({1})], 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({2}), listToContainer({0})], 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({0})], 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({1, 2})], 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([listToContainer({2, 1})], 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([{12}], 0, 0, c) : eid_invalidType
        c == listToContainer({1})
        listToContainer({1}).lookAnyPartFromAtoB([{12}], 0, 1, c) : eid_invalidType
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyPartFromAtoB([listToContainer({0}), listToContainer({1})], 0, 2, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyPartFromAtoB([listToContainer({0}), listToContainer({1})], 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyPartFromAtoB([listToContainer({0}), listToContainer({1})], 1, 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyPartFromAtoB([listToContainer({1}), listToContainer({0})], 0, 2, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyPartFromAtoB([listToContainer({1, 2}), listToContainer({0})], 0, 2, c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyPartFromAtoB([listToContainer({0}), listToContainer({1, 2})], 0, 2, c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyPartFromAtoB([{12}], 0, 0, c) : eid_invalidType
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyPartFromAtoB([{12}], 0, 2, c) : eid_invalidType
        c == listToContainer({1, 2})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 7, c) == 0
        c == listToContainer({1, 2, 3})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyPartFromAtoB([listToContainer({0, 2, 3}), listToContainer({4, 'a'}), listToContainer({1, 1, 2})], 0, 7, c) == 3
        c == listToContainer({4, 'a'})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyPartFromAtoB([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})], 0, 7, c) == 5
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyPartFromAtoB([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})], 0, 6, c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyPartFromAtoB([listToContainer({2, 3, 4, 4}), listToContainer({4, 'b', nothing}), listToContainer({12, "bbbb"})], 0, 7, c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 0, 8, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 0, 4, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 0, 8, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyPartFromAtoB([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})], 0, 8, c) == 1
        c == listToContainer({2, 3, 4, 4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyPartFromAtoB([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 0, 8, c) == 1
        c == listToContainer({2, 3})
        listToContainer({}).lookAnyPartFromAtoB([], 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({})], 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({}), listToContainer({12})], 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookAnyPartFromAtoB([listToContainer({12}), listToContainer({})], 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookAnyPartFromAtoB([], 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookAnyPartFromAtoB([], 0, 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookAnyPartFromAtoB([listToContainer({})], 0, 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookAnyPartFromAtoB([listToContainer({}), listToContainer({12})], 0, 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookAnyPartFromAtoB([listToContainer({12}), listToContainer({})], 0, 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookAnyPartFromAtoB([], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookAnyPartFromAtoB([listToContainer({})], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookAnyPartFromAtoB([listToContainer({}), listToContainer({12})], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookAnyPartFromAtoB([listToContainer({12}), listToContainer({})], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookAnyPartFromAtoB([], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookAnyPartFromAtoB([listToContainer({})], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookAnyPartFromAtoB([listToContainer({}), listToContainer({12})], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookAnyPartFromAtoB([listToContainer({12}), listToContainer({})], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookAnyPartFromAtoB([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 0, 7, c) == 2
        c == listToContainer({3, 1})
        listToContainer({2, 2, 2, 2, 2, 2}).lookAnyPartFromAtoB([listToContainer({2, 2, 2})], 0, 6, c) == 0
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2}).lookAnyPartFromAtoB([listToContainer({2, 2, 2})], 0, 5, c) == 0
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 1, 2}).lookAnyPartFromAtoB([listToContainer({2, 2, 2, 2, 1}), listToContainer({2, 2, 2})], 0, 6, c) == 0
        c == listToContainer({2, 2, 2, 2, 1})
        listToContainer({2, 2, 2, 2, 1, 2}).lookAnyPartFromAtoB([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2, 1})], 0, 6, c) == 0
        c == listToContainer({2, 2, 2})

#noinline
def testContainer_LookAnyNPartFromAtoB(write ok Int, write errorsCoordinates List)
    var c <>Container = nothing
    test: ok, errorsCoordinates
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2}), listToContainer({23})], 1, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2}), listToContainer({23})], 2, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 1, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 2, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 9223372036854775807, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 0, 0, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], -1, 0, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], -9223372036854775808, 0, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 1, 1, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 1, 9223372036854775807, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 1, -1, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 1, -9223372036854775808, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 1, 0, 1, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 1, 0, 9223372036854775807, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 1, 0, -1, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 1, 0, -9223372036854775808, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({nothing})], 1, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({nothing})], 2, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([{nothing}], 1, 0, 0, c) : eid_invalidType
        c.nothing?()
        listToContainer({}).lookAnyNPartFromAtoB([{nothing}], 2, 0, 0, c) : eid_invalidType
        c.nothing?()
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 1, 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 1, 1, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 1, 2, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 1, 9223372036854775807, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 1, -1, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 1, -9223372036854775808, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 1, 0, 2, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 1, 0, 9223372036854775807, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 1, 0, -1, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 1, 0, -9223372036854775808, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 9223372036854775807, 0, 0, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 9223372036854775807, 1, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 9223372036854775807, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], 0, 0, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], -1, 0, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1})], -9223372036854775808, 0, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1}), listToContainer({2})], 1, 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1}), listToContainer({2})], 1, 0, 0, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1}), listToContainer({2})], 1, 1, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1}), listToContainer({2})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({2}), listToContainer({1})], 1, 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({2}), listToContainer({1})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1}), listToContainer({1})], 1, 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1}), listToContainer({1})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({2}), listToContainer({0})], 1, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({2}), listToContainer({0})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({0})], 1, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({0})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 1, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({1, 2})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({2, 1})], 1, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([listToContainer({2, 1})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([{12}], 1, 0, 0, c) : eid_invalidType
        c == listToContainer({1})
        listToContainer({1}).lookAnyNPartFromAtoB([{12}], 1, 0, 1, c) : eid_invalidType
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([listToContainer({0}), listToContainer({1})], 1, 0, 2, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([listToContainer({0}), listToContainer({1})], 1, 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([listToContainer({0}), listToContainer({1})], 1, 1, 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([listToContainer({0}), listToContainer({1})], 2, 0, 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([listToContainer({1}), listToContainer({0})], 1, 0, 2, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([listToContainer({1}), listToContainer({0})], 2, 0, 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([listToContainer({1, 2}), listToContainer({0})], 1, 0, 2, c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([listToContainer({1, 2}), listToContainer({0})], 2, 0, 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([listToContainer({0}), listToContainer({1, 2})], 1, 0, 2, c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([listToContainer({0}), listToContainer({1, 2})], 2, 0, 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 1, 0, 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 2, 0, 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([{12}], 1, 0, 0, c) : eid_invalidType
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookAnyNPartFromAtoB([{12}], 1, 0, 2, c) : eid_invalidType
        c == listToContainer({1, 2})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 1, 0, 7, c) == 0
        c == listToContainer({1, 2, 3})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({0, 2, 3}), listToContainer({4, 'a'}), listToContainer({1, 1, 2})], 1, 0, 7, c) == 3
        c == listToContainer({4, 'a'})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})], 1, 0, 7, c) == 5
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})], 1, 0, 6, c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({2, 3, 4, 4}), listToContainer({4, 'b', nothing}), listToContainer({12, "bbbb"})], 1, 0, 7, c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 1, 0, 8, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 1, 0, 4, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 2, 0, 8, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 1, 0, 8, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 2, 0, 8, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 3, 0, 8, c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})], 1, 0, 8, c) == 1
        c == listToContainer({2, 3, 4, 4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})], 2, 0, 8, c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 1, 0, 8, c) == 1
        c == listToContainer({2, 3})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 2, 0, 8, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 3, 0, 8, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 4, 0, 8, c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAnyNPartFromAtoB([listToContainer({4}), listToContainer({2, 3}), listToContainer({12, "bbb"})], 5, 0, 8, c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({}).lookAnyNPartFromAtoB([], 1, 0, 0, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({})], 1, 0, 0, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({}), listToContainer({12})], 1, 0, 0, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({}).lookAnyNPartFromAtoB([listToContainer({12}), listToContainer({})], 1, 0, 0, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12}).lookAnyNPartFromAtoB([], 1, 0, 0, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12}).lookAnyNPartFromAtoB([], 1, 0, 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12}).lookAnyNPartFromAtoB([], 2, 0, 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12}).lookAnyNPartFromAtoB([listToContainer({})], 1, 0, 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12}).lookAnyNPartFromAtoB([listToContainer({}), listToContainer({12})], 1, 0, 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12}).lookAnyNPartFromAtoB([listToContainer({12}), listToContainer({})], 1, 0, 1, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({1, 12}).lookAnyNPartFromAtoB([], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({1, 12}).lookAnyNPartFromAtoB([listToContainer({})], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({1, 12}).lookAnyNPartFromAtoB([listToContainer({}), listToContainer({12})], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({1, 12}).lookAnyNPartFromAtoB([listToContainer({12}), listToContainer({})], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12, 1}).lookAnyNPartFromAtoB([], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12, 1}).lookAnyNPartFromAtoB([listToContainer({})], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12, 1}).lookAnyNPartFromAtoB([listToContainer({}), listToContainer({12})], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({12, 1}).lookAnyNPartFromAtoB([listToContainer({12}), listToContainer({})], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookAnyNPartFromAtoB([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 1, 0, 7, c) == 2
        c == listToContainer({3, 1})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookAnyNPartFromAtoB([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 2, 0, 7, c) == 5
        c == listToContainer({1, 7})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookAnyNPartFromAtoB([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 3, 0, 7, c).nothing?()
        c == listToContainer({1, 7})
        listToContainer({2, 2, 2, 2, 2, 2}).lookAnyNPartFromAtoB([listToContainer({2, 2, 2})], 1, 0, 6, c) == 0
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2, 2}).lookAnyNPartFromAtoB([listToContainer({2, 2, 2})], 2, 0, 6, c) == 3
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2}).lookAnyNPartFromAtoB([listToContainer({2, 2, 2})], 1, 0, 5, c) == 0
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2}).lookAnyNPartFromAtoB([listToContainer({2, 2, 2})], 2, 0, 5, c).nothing?()
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 1, 2}).lookAnyNPartFromAtoB([listToContainer({2, 2, 2, 2, 1}), listToContainer({2, 2, 2})], 1, 0, 6, c) == 0
        c == listToContainer({2, 2, 2, 2, 1})
        listToContainer({2, 2, 2, 2, 1, 2}).lookAnyNPartFromAtoB([listToContainer({2, 2, 2, 2, 1}), listToContainer({2, 2, 2})], 2, 0, 6, c).nothing?()
        c == listToContainer({2, 2, 2, 2, 1})
        listToContainer({2, 2, 2, 2, 1, 2}).lookAnyNPartFromAtoB([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2, 1})], 1, 0, 6, c) == 0
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 1, 2}).lookAnyNPartFromAtoB([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2, 1})], 2, 0, 6, c).nothing?()
        c == listToContainer({2, 2, 2})

#noinline
def testContainer_LookAll(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookAll(1) == []
        listToContainer({}).lookAll(0) == []
        listToContainer({0}).lookAll(0) == [0]
        listToContainer({0}).lookAll(1) == []
        listToContainer({0, 1.1}).lookAll(0) == [0]
        listToContainer({0, 1.1, 0.0, 0}).lookAll(0) == [0, 3]
        listToContainer({0, 1.1}).lookAll(1.1) == [1]
        listToContainer({0, 1.1, 'a'}).lookAll(0) == [0]
        listToContainer({0, 1.1, 'a'}).lookAll(1.1) == [1]
        listToContainer({0, 1.1, 'a'}).lookAll('a') == [2]
        listToContainer({0, 1.1, 'a'}).lookAll(-1) == []
        listToContainer({0, 1.1, nothing, 'a'}).lookAll('a') == [3]

#noinline
def testContainer_LookAllFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookAllFromAtoB('a', 0, 0) == []
        listToContainer({}).lookAllFromAtoB('a', 1, 0) : eid_outOfRange
        listToContainer({}).lookAllFromAtoB('a', 0, 1) : eid_outOfRange
        listToContainer({'a'}).lookAllFromAtoB('a', 0, 1) == [0]
        listToContainer({'a'}).lookAllFromAtoB('a', 0, 0) == []
        listToContainer({'a'}).lookAllFromAtoB('a', 1, 1) == []
        listToContainer({'a'}).lookAllFromAtoB('b', 0, 1) == []
        listToContainer({'a'}).lookAllFromAtoB(97, 0, 1) == []
        listToContainer({'a'}).lookAllFromAtoB('a', 1, 0) : eid_outOfRange
        listToContainer({'a'}).lookAllFromAtoB(97, -1, 0) : eid_outOfRange
        listToContainer({'a'}).lookAllFromAtoB(97, 0, -1) : eid_outOfRange
        listToContainer({'a'}).lookAllFromAtoB('a', 0, 2) : eid_outOfRange
        listToContainer({'a'}).lookAllFromAtoB('a', 2, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookAllFromAtoB('a', 0, 1) == [0]
        listToContainer({'a', -2}).lookAllFromAtoB('a', 0, 2) == [0]
        listToContainer({'a', -2}).lookAllFromAtoB(-2, 0, 2) == [1]
        listToContainer({'a', -2}).lookAllFromAtoB(-2, 1, 2) == [1]
        listToContainer({-2, -2}).lookAllFromAtoB(-2, 0, 2) == [0, 1]
        listToContainer({'a', -2}).lookAllFromAtoB('a', 0, 0) == []
        listToContainer({'a', -2}).lookAllFromAtoB(-2, 0, 0) == []
        listToContainer({'a', 'a'}).lookAllFromAtoB('a', 0, 1) == [0]
        listToContainer({'a', 'a'}).lookAllFromAtoB('a', 1, 2) == [1]
        listToContainer({'a', 'a'}).lookAllFromAtoB('a', 0, 2) == [0, 1]
        listToContainer({'a', 'a'}).lookAllFromAtoB('a', 0, 0) == []
        listToContainer({'a', 'a'}).lookAllFromAtoB('a', 2, 2) == []
        listToContainer({'a', -2}).lookAllFromAtoB('a', 1, 2) == []
        listToContainer({'a', -2}).lookAllFromAtoB(-2, 1, 1) == []
        listToContainer({'a', -2}).lookAllFromAtoB('b', 0, 2) == []
        listToContainer({'a', -2}).lookAllFromAtoB(97, 0, 2) == []
        listToContainer({'a', -2}).lookAllFromAtoB('a', 1, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookAllFromAtoB('a', 3, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookAllFromAtoB(97, -1, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookAllFromAtoB(97, 0, -1) : eid_outOfRange
        listToContainer({'a', -2}).lookAllFromAtoB('a', 0, 3) : eid_outOfRange
        listToContainer({'a', -2}).lookAllFromAtoB('a', 3, 0) : eid_outOfRange
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookAllFromAtoB('a', 0, 6) == [0]
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookAllFromAtoB(3, 0, 6) == [5]
        listToContainer({'a', -2, '2', 2, -2.0, 2, 'a'}).lookAllFromAtoB(2, 0, 6) == [3, 5]
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookAllFromAtoB(1, 0, 8) == [0, 1, 2, 3, 4, 5, 6, 7]
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookAllFromAtoB(1, 1, 8) == [1, 2, 3, 4, 5, 6, 7]
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookAllFromAtoB(1, 1, 7) == [1, 2, 3, 4, 5, 6]
        listToContainer({1, 1, 1, 1, 0, 1, 1, 1}).lookAllFromAtoB(1, 1, 7) == [1, 2, 3, 5, 6]
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookAllFromAtoB('2', 2, 6) == [2]
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookAllFromAtoB(1000, 0, 6) == [3]
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookAllFromAtoB(-1.0, 0, 6) == [4]
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookAllFromAtoB(3, 0, 6) == [5]
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookAllFromAtoB('2', 3, 6) == []
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookAllFromAtoB(3, 0, 5) == []
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookAllFromAtoB('b', 0, 6) == []

#noinline
def testContainer_LookAllAny(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookAllAny({0}) == []
        listToContainer({}).lookAllAny({1}) == []
        listToContainer({}).lookAllAny({1, 2}) == []
        listToContainer({}).lookAllAny({nothing}) == []
        listToContainer({0}).lookAllAny({0}) == [0]
        listToContainer({0}).lookAllAny({0, 1}) == [0]
        listToContainer({0}).lookAllAny({1, 0}) == [0]
        listToContainer({0}).lookAllAny({1}) == []
        listToContainer({0}).lookAllAny({1, 2}) == []
        listToContainer({0}).lookAllAny({nothing}) == []
        listToContainer({0}).lookAllAny({0, nothing}) == [0]
        listToContainer({0}).lookAllAny({nothing, 0}) == [0]
        listToContainer({0}).lookAllAny({0, 0}) == [0]
        listToContainer({0, 1.1}).lookAllAny({0}) == [0]
        listToContainer({0, 1.1}).lookAllAny({1.1}) == [1]
        listToContainer({0, 1.1}).lookAllAny({0, 2}) == [0]
        listToContainer({0, 1.1}).lookAllAny({2, 0}) == [0]
        listToContainer({0, 1.1}).lookAllAny({1.1, 0}) == [0, 1]
        listToContainer({0, 1.1}).lookAllAny({0, 1.1}) == [0, 1]
        listToContainer({0, 1.1}).lookAllAny({2, 0, 1.1}) == [0, 1]
        listToContainer({0, 1.1}).lookAllAny({2, -2, 1.1}) == [1]
        listToContainer({0, 1.1}).lookAllAny({2, -2, 0.0}) == []
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAny({'a'}) == [3]
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAny({0}) == [0]
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAny({3, 'a'}) == [3]
        listToContainer({0, 3, 1.1, nothing, 'a'}).lookAllAny({3, nothing, 'a'}) == [1, 4]
        listToContainer({0, 3, 1.1, nothing, 'a', 2, 3}).lookAllAny({3, nothing, 'a'}) == [1, 4, 6]
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAny({3, nothing}) == []
        listToContainer({}).lookAllAny({}) : eid_nothingToLook
        listToContainer({1, 2}).lookAllAny({}) : eid_nothingToLook

#noinline
def testContainer_LookAllAnyFromaAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookAllAnyFromAtoB({0}, 0, 0) == []
        listToContainer({}).lookAllAnyFromAtoB({1, 2}, 0, 0) == []
        listToContainer({}).lookAllAnyFromAtoB({nothing}, 0, 0) == []
        listToContainer({0}).lookAllAnyFromAtoB({0}, 0, 1) == [0]
        listToContainer({0}).lookAllAnyFromAtoB({0, 1}, 0, 1) == [0]
        listToContainer({0}).lookAllAnyFromAtoB({1, 0}, 0, 1) == [0]
        listToContainer({0}).lookAllAnyFromAtoB({0, 0}, 0, 1) == [0]
        listToContainer({0}).lookAllAnyFromAtoB({0, nothing}, 0, 1) == [0]
        listToContainer({0}).lookAllAnyFromAtoB({nothing, 0}, 0, 1) == [0]
        listToContainer({0}).lookAllAnyFromAtoB({1}, 0, 1) == []
        listToContainer({0}).lookAllAnyFromAtoB({0}, 0, 0) == []
        listToContainer({0}).lookAllAnyFromAtoB({0}, 1, 1) == []
        listToContainer({0}).lookAllAnyFromAtoB({1, 2}, 0, 1) == []
        listToContainer({0}).lookAllAnyFromAtoB({0, 2}, 0, 0) == []
        listToContainer({0}).lookAllAnyFromAtoB({1, 0}, 1, 1) == []
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({0}, 0, 2) == [0]
        listToContainer({0, 0}).lookAllAnyFromAtoB({0}, 0, 2) == [0, 1]
        listToContainer({0, 0}).lookAllAnyFromAtoB({0, 0}, 0, 2) == [0, 1]
        listToContainer({0, 0}).lookAllAnyFromAtoB({0, 0}, 1, 2) == [1]
        listToContainer({0, 0}).lookAllAnyFromAtoB({0, 0}, 2, 2) == []
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({2, 0}, 0, 2) == [0]
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({1.1, 0}, 0, 2) == [0, 1]
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({1.1, 2}, 0, 2) == [1]
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({0, 2}, 0, 1) == [0]
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({2, 0}, 0, 1) == [0]
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({1.1, 2}, 1, 2) == [1]
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({2, 1.1}, 1, 2) == [1]
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({2, -2, 0.0}, 0, 2) == []
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({0}, 1, 2) == []
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({1.1}, 0, 1) == []
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({0, 1}, 1, 2) == []
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({1, 0}, 1, 2) == []
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({1.1, 1}, 0, 1) == []
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({1, 1.1}, 0, 1) == []
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({1, 1.1}, 0, 0) == []
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({1, 1.1}, 1, 1) == []
        listToContainer({0, 1.1}).lookAllAnyFromAtoB({1, 1.1}, 2, 2) == []
        listToContainer({0, 1.1, 0}).lookAllAnyFromAtoB({1, 0}, 0, 3) == [0, 2]
        listToContainer({0, 1.1, 0}).lookAllAnyFromAtoB({1.1, 0}, 0, 3) == [0, 1, 2]
        listToContainer({0, 1.1, 0}).lookAllAnyFromAtoB({0}, 1, 3) == [2]
        listToContainer({0, 1.1, 0}).lookAllAnyFromAtoB({0}, 0, 2) == [0]
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAnyFromAtoB({'a'}, 0, 4) == [3]
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAnyFromAtoB({'a'}, 1, 4) == [3]
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAnyFromAtoB({'a'}, 2, 4) == [3]
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAnyFromAtoB({'a'}, 3, 4) == [3]
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAnyFromAtoB({0, 'b'}, 0, 1) == [0]
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAnyFromAtoB({'b', 0}, 0, 1) == [0]
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAnyFromAtoB({'b', 0}, 0, 4) == [0]
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAnyFromAtoB({3, 'a'}, 2, 4) == [3]
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAnyFromAtoB({nothing, 3, 'a'}, 2, 4) == [3]
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAnyFromAtoB({nothing, 3}, 2, 4) == []
        listToContainer({0, 1.1, nothing, 'a'}).lookAllAnyFromAtoB({'a'}, 0, 4) == [3]
        listToContainer({}).lookAllAnyFromAtoB({'a'}, 0, 1) : eid_outOfRange
        listToContainer({}).lookAllAnyFromAtoB({'a'}, 1, 0) : eid_outOfRange
        listToContainer({}).lookAllAnyFromAtoB({'a'}, 1, 1) : eid_outOfRange
        listToContainer({}).lookAllAnyFromAtoB({'b'}, -1, 1) : eid_outOfRange
        listToContainer({}).lookAllAnyFromAtoB({'a'}, 1, -1) : eid_outOfRange
        listToContainer({}).lookAllAnyFromAtoB({'c'}, -1, -1) : eid_outOfRange
        listToContainer({}).lookAllAnyFromAtoB({'a'}, -10, -10) : eid_outOfRange
        listToContainer({}).lookAllAnyFromAtoB({}, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookAllAnyFromAtoB({}, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookAllAnyFromAtoB({}, 0, 2) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 2, 4, 6, 5, 4}).lookAllAnyFromAtoB({2, 4}, 0, 9) == [1, 3, 4, 5, 8]

#noinline
def testContainer_LookAllParts(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookAllParts(listToContainer({0})) == []
        listToContainer({}).lookAllParts(listToContainer({'a'})) == []
        listToContainer({1}).lookAllParts(listToContainer({1})) == [0]
        listToContainer({2}).lookAllParts(listToContainer({1})) == []
        listToContainer({2}).lookAllParts(listToContainer({2, 1})) == []
        listToContainer({2}).lookAllParts(listToContainer({1, 2})) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllParts(listToContainer({1})) == [0]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllParts(listToContainer({4})) == [5]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllParts(listToContainer({1, 2})) == [0]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllParts(listToContainer({2, 3})) == [3]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllParts(listToContainer({2, 3, 4})) == [3]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllParts(listToContainer({3, 4})) == [4]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllParts(listToContainer({2, 2})) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllParts(listToContainer({5})) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllParts(listToContainer({1, 1})) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllParts(listToContainer({4, 4})) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllParts(listToContainer({4, 1})) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllParts(listToContainer({4, 5})) == []
        listToContainer({nothing}).lookAllParts(listToContainer({nothing})) == []
        listToContainer({}).lookAllParts(listToContainer({})) : eid_nothingToLook
        listToContainer({1, 2}).lookAllParts(listToContainer({})) : eid_nothingToLook
        listToContainer({1, 2, nothing, 2, 3, 4, 1, 2, 1, 2, 1}).lookAllParts(listToContainer({1, 2})) == [0, 6, 8]
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2}).lookAllParts(listToContainer({2, 2, 2, 2})) == [3, 7]
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}).lookAllParts(listToContainer({2, 2, 2, 2})) == [3, 7]

#noinline
def testContainer_LookAllPartsFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookAllPartsFromAtoB(listToContainer({0}), 0, 0) == []
        listToContainer({}).lookAllPartsFromAtoB(listToContainer({'a'}), 0, 0) == []
        listToContainer({1}).lookAllPartsFromAtoB(listToContainer({1}), 0, 1) == [0]
        listToContainer({1}).lookAllPartsFromAtoB(listToContainer({1}), 0, 0) == []
        listToContainer({1}).lookAllPartsFromAtoB(listToContainer({1}), 1, 1) == []
        listToContainer({2}).lookAllPartsFromAtoB(listToContainer({1}), 0, 1) == []
        listToContainer({2}).lookAllPartsFromAtoB(listToContainer({1}), 0, 0) == []
        listToContainer({2}).lookAllPartsFromAtoB(listToContainer({1}), 1, 1) == []
        listToContainer({2}).lookAllPartsFromAtoB(listToContainer({2, 1}), 0, 1) == []
        listToContainer({2}).lookAllPartsFromAtoB(listToContainer({1, 2}), 0, 1) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({1}), 0, 1) == [0]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({1}), 0, 2) == [0]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({1}), 0, 6) == [0]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({4}), 0, 6) == [5]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({4}), 1, 6) == [5]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({4}), 2, 6) == [5]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({4}), 2, 5) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({4}), 0, 5) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2}), 0, 5) == [1, 3]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({1, 2}), 0, 6) == [0]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({1, 2}), 1, 6) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2, 3}), 0, 6) == [3]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2, 3}), 0, 5) == [3]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2, 3}), 1, 5) == [3]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2, 3}), 3, 5) == [3]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2, 3}), 3, 4) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2, 3}), 4, 6) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2, 3, 4}), 0, 6) == [3]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2, 3, 4}), 3, 6) == [3]
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2, 3, 4}), 0, 5) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2, 3, 4}), 4, 6) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2, 2}), 0, 6) == []
        listToContainer({nothing}).lookAllPartsFromAtoB(listToContainer({nothing}), 0, 0) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2, nothing}), 0, 6) == []
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2}), -1, 2) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2}), 2, 1) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookAllPartsFromAtoB(listToContainer({2}), -10, -1) : eid_outOfRange
        listToContainer({}).lookAllPartsFromAtoB(listToContainer({}), 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookAllPartsFromAtoB(listToContainer({}), 0, 0) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookAllPartsFromAtoB(listToContainer({1, 2}), 0, 3) == [0]
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookAllPartsFromAtoB(listToContainer({1, 2}), 0, 6) == [0, 4]
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookAllPartsFromAtoB(listToContainer({2, 2, 2}), 0, 7) == [0, 3]
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookAllPartsFromAtoB(listToContainer({2, 2, 2}), 0, 6) == [0, 3]
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookAllPartsFromAtoB(listToContainer({2, 2, 2}), 0, 5) == [0]
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookAllPartsFromAtoB(listToContainer({2, 2, 2}), 0, 8) == [0, 3]
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookAllPartsFromAtoB(listToContainer({2, 2, 2}), 0, 7) == [0, 3]
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookAllPartsFromAtoB(listToContainer({2, 2, 2}), 0, 6) == [0, 3]
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookAllPartsFromAtoB(listToContainer({2, 2, 2}), 0, 5) == [0]
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookAllPartsFromAtoB(listToContainer({2, 2, 2}), 1, 7) == [1, 4]

#noinline
def testContainer_LookAllAnyParts(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookAllAnyParts([listToContainer({1, 2}), listToContainer({23})]) == {}
        listToContainer({}).lookAllAnyParts([listToContainer({1, 2})]) == {}
        listToContainer({}).lookAllAnyParts([listToContainer({nothing})]) == {}
        listToContainer({}).lookAllAnyParts([{nothing}]) : eid_invalidType
        listToContainer({1}).lookAllAnyParts([listToContainer({1})]) == {0, listToContainer({1})}
        listToContainer({1}).lookAllAnyParts([listToContainer({1}), listToContainer({2})]) == {0, listToContainer({1})}
        listToContainer({1}).lookAllAnyParts([listToContainer({2}), listToContainer({1})]) == {0, listToContainer({1})}
        listToContainer({1}).lookAllAnyParts([listToContainer({1}), listToContainer({1})]) == {0, listToContainer({1})}
        listToContainer({1}).lookAllAnyParts([listToContainer({2}), listToContainer({0})]) == {}
        listToContainer({1}).lookAllAnyParts([listToContainer({0})]) == {}
        listToContainer({1}).lookAllAnyParts([listToContainer({1, 2})]) == {}
        listToContainer({1}).lookAllAnyParts([listToContainer({2, 1})]) == {}
        listToContainer({1}).lookAllAnyParts([{12}]) : eid_invalidType
        listToContainer({1, 2}).lookAllAnyParts([listToContainer({0}), listToContainer({1})]) == {0, listToContainer({1})}
        listToContainer({1, 2}).lookAllAnyParts([listToContainer({1}), listToContainer({0})]) == {0, listToContainer({1})}
        listToContainer({1, 2}).lookAllAnyParts([listToContainer({1, 2}), listToContainer({0})]) == {0, listToContainer({1, 2})}
        listToContainer({1, 2}).lookAllAnyParts([listToContainer({0}), listToContainer({1, 2})]) == {0, listToContainer({1, 2})}
        listToContainer({1, 2}).lookAllAnyParts([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})]) == {}
        listToContainer({1, 2}).lookAllAnyParts([{12}]) : eid_invalidType
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyParts([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})]) == {0, listToContainer({1, 2, 3})}
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyParts([listToContainer({0, 2, 3}), listToContainer({4, 'a'}), listToContainer({1, 1, 2})]) == {3, listToContainer({4, 'a'})}
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyParts([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})]) == {5, listToContainer({12, "bbb"})}
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyParts([listToContainer({2, 3, 4, 4}), listToContainer({4, 'b', nothing}), listToContainer({12, "bbbb"})]) == {}
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAllAnyParts([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})]) == {3, listToContainer({4}), 4, listToContainer({4})}
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAllAnyParts([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})]) == {3, listToContainer({4}), 4, listToContainer({4}), 6, listToContainer({12, "bbb"})}
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAllAnyParts([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})]) == {1, listToContainer({2, 3, 4, 4}), 6, listToContainer({12, "bbb"})}
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookAllAnyParts([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})]) == {1, listToContainer({2, 3}), 3, listToContainer({4}), 4, listToContainer({4}), 6, listToContainer({12, "bbb"})}
        listToContainer({}).lookAllAnyParts([]) : eid_nothingToLook
        listToContainer({}).lookAllAnyParts([listToContainer({})]) : eid_nothingToLook
        listToContainer({}).lookAllAnyParts([listToContainer({}), listToContainer({12})]) : eid_nothingToLook
        listToContainer({}).lookAllAnyParts([listToContainer({12}), listToContainer({})]) : eid_nothingToLook
        listToContainer({12}).lookAllAnyParts([]) : eid_nothingToLook
        listToContainer({12}).lookAllAnyParts([listToContainer({})]) : eid_nothingToLook
        listToContainer({12}).lookAllAnyParts([listToContainer({}), listToContainer({12})]) : eid_nothingToLook
        listToContainer({12}).lookAllAnyParts([listToContainer({12}), listToContainer({})]) : eid_nothingToLook
        listToContainer({1, 12}).lookAllAnyParts([]) : eid_nothingToLook
        listToContainer({1, 12}).lookAllAnyParts([listToContainer({})]) : eid_nothingToLook
        listToContainer({1, 12}).lookAllAnyParts([listToContainer({}), listToContainer({12})]) : eid_nothingToLook
        listToContainer({1, 12}).lookAllAnyParts([listToContainer({12}), listToContainer({})]) : eid_nothingToLook
        listToContainer({12, 1}).lookAllAnyParts([]) : eid_nothingToLook
        listToContainer({12, 1}).lookAllAnyParts([listToContainer({})]) : eid_nothingToLook
        listToContainer({12, 1}).lookAllAnyParts([listToContainer({}), listToContainer({12})]) : eid_nothingToLook
        listToContainer({12, 1}).lookAllAnyParts([listToContainer({12}), listToContainer({})]) : eid_nothingToLook
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookAllAnyParts([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})]) == {2, listToContainer({3, 1}), 5, listToContainer({1, 7})}
        listToContainer({2, 2, 2, 2, 2, 2}).lookAllAnyParts([listToContainer({2, 2, 2})]) == {0, listToContainer({2, 2, 2}), 3, listToContainer({2, 2, 2})}
        listToContainer({2, 2, 2, 2, 2}).lookAllAnyParts([listToContainer({2, 2, 2})]) == {0, listToContainer({2, 2, 2})}
        listToContainer({2, 2, 2, 2, 2, 2}).lookAllAnyParts([listToContainer({2, 2, 2, 2}), listToContainer({2, 2, 2})]) == {0, listToContainer({2, 2, 2, 2})}
        listToContainer({2, 2, 2, 2, 2, 2}).lookAllAnyParts([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2})]) == {0, listToContainer({2, 2, 2}), 3, listToContainer({2, 2, 2})}

#noinline
def testContainer_LookAllAnyPartsFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookAllAnyPartsFromAtoB([listToContainer({1, 2}), listToContainer({23})], 0, 0) == {}
        listToContainer({}).lookAllAnyPartsFromAtoB([], 0, 0) : eid_nothingToLook
        listToContainer({}).lookAllAnyPartsFromAtoB([listToContainer({}), listToContainer({23})], 0, 0) : eid_nothingToLook
        listToContainer({}).lookAllAnyPartsFromAtoB([listToContainer({1}), listToContainer({})], 0, 0) : eid_nothingToLook
        listToContainer({}).lookAllAnyPartsFromAtoB([listToContainer({1, 2}), listToContainer({23})], 0, 1) : eid_outOfRange
        listToContainer({}).lookAllAnyPartsFromAtoB([listToContainer({1, 2}), listToContainer({23})], -1, 0) : eid_outOfRange
        listToContainer({}).lookAllAnyPartsFromAtoB([listToContainer({1, 2}), listToContainer({23})], 0, -1) : eid_outOfRange
        listToContainer({}).lookAllAnyPartsFromAtoB([listToContainer({1, 2})], 0, 0) == {}
        listToContainer({}).lookAllAnyPartsFromAtoB([listToContainer({nothing})], 0, 0) == {}
        listToContainer({}).lookAllAnyPartsFromAtoB([listToContainer({1, 2})], 0, 1) : eid_outOfRange
        listToContainer({}).lookAllAnyPartsFromAtoB([listToContainer({1, 2})], -1, 0) : eid_outOfRange
        listToContainer({}).lookAllAnyPartsFromAtoB([listToContainer({1, 2})], 0, -1) : eid_outOfRange
        listToContainer({}).lookAllAnyParts([{12}]) : eid_invalidType
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({1})], 0, 0) == {}
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({1})], 1, 1) == {}
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({1})], 0, 1) == {0, listToContainer({1})}
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({})], 0, 1) : eid_nothingToLook
        listToContainer({1}).lookAllAnyPartsFromAtoB([], 0, 1) : eid_nothingToLook
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({})], 1, 1) : eid_nothingToLook
        listToContainer({1}).lookAllAnyPartsFromAtoB([], 1, 1) : eid_nothingToLook
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({})], 0, 0) : eid_nothingToLook
        listToContainer({1}).lookAllAnyPartsFromAtoB([], 0, 0) : eid_nothingToLook
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({1})], -1, 0) : eid_outOfRange
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({1})], 0, 2) : eid_outOfRange
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({1})], 0, 9223372036854775807) : eid_outOfRange
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({1})], 0, -9223372036854775808) : eid_outOfRange
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({1})], -9223372036854775808, 9223372036854775807) : eid_outOfRange
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({1})], 1, 0) : eid_outOfRange
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({1}), listToContainer({2})], 0, 1) == {0, listToContainer({1})}
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({1}), listToContainer({2})], 1, 1) == {}
        listToContainer({1}).lookAllAnyPartsFromAtoB([listToContainer({1}), listToContainer({2})], 0, 0) == {}
        listToContainer({1}).lookAllAnyParts([{1}]) : eid_invalidType
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 7) == {0, listToContainer({1, 2, 3})}
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 3) == {0, listToContainer({1, 2, 3})}
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 2) == {}
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 1, 3) == {}
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], -1, 3) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 8) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], -1, 8) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({1, 2, 3}), listToContainer({}), listToContainer({1, 1, 2})], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({})], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({}), listToContainer({}), listToContainer({})], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookAllAnyPartsFromAtoB([], 0, 7) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({1, 2})], 0, 3) == {0, listToContainer({1, 2})}
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({1, 2})], 4, 6) == {4, listToContainer({1, 2})}
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({1, 2})], 0, 6) == {0, listToContainer({1, 2}), 4, listToContainer({1, 2})}
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookAllAnyPartsFromAtoB([listToContainer({1, 2})], 0, 7) == {0, listToContainer({1, 2}), 4, listToContainer({1, 2})}
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookAllAnyPartsFromAtoB([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 0, 7) == {2, listToContainer({3, 1}), 5, listToContainer({1, 7})}
        listToContainer({2, 2, 2, 2, 2, 2}).lookAllAnyPartsFromAtoB([listToContainer({2, 2, 2})], 0, 6) == {0, listToContainer({2, 2, 2}), 3, listToContainer({2, 2, 2})}
        listToContainer({2, 2, 2, 2, 2, 2}).lookAllAnyPartsFromAtoB([listToContainer({2, 2, 2})], 0, 5) == {0, listToContainer({2, 2, 2})}
        listToContainer({2, 2, 2, 2, 2, 2}).lookAllAnyPartsFromAtoB([listToContainer({2, 2, 2})], 0, 3) == {0, listToContainer({2, 2, 2})}
        listToContainer({2, 2, 2, 2, 2}).lookAllAnyPartsFromAtoB([listToContainer({2, 2, 2})], 0, 5) == {0, listToContainer({2, 2, 2})}
        listToContainer({2, 2, 2, 2, 2}).lookAllAnyPartsFromAtoB([listToContainer({2, 2, 2})], 0, 3) == {0, listToContainer({2, 2, 2})}
        listToContainer({2, 2, 2, 2, 2, 2}).lookAllAnyPartsFromAtoB([listToContainer({2, 2, 2, 2}), listToContainer({2, 2, 2})], 0, 6) == {0, listToContainer({2, 2, 2, 2})}
        listToContainer({2, 2, 2, 2, 2, 2}).lookAllAnyPartsFromAtoB([listToContainer({2, 2, 2, 2}), listToContainer({2, 2, 2})], 1, 6) == {1, listToContainer({2, 2, 2, 2})}
        listToContainer({2, 2, 2, 2, 2, 2}).lookAllAnyPartsFromAtoB([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2})], 0, 6) == {0, listToContainer({2, 2, 2}), 3, listToContainer({2, 2, 2})}
        listToContainer({2, 2, 2, 2, 2, 2}).lookAllAnyPartsFromAtoB([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2})], 0, 5) == {0, listToContainer({2, 2, 2})}
        listToContainer({2, 2, 2, 2, 2, 2}).lookAllAnyPartsFromAtoB([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2})], 1, 6) == {1, listToContainer({2, 2, 2})}

#noinline
def testContainer_LookBack(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookBack(1).nothing?()
        listToContainer({}).lookBack(0).nothing?()
        listToContainer({0}).lookBack(0) == 0
        listToContainer({0}).lookBack(1).nothing?()
        listToContainer({0, 1.1}).lookBack(0) == 0
        listToContainer({0, 1.1, 0.0, 0}).lookBack(0) == 3
        listToContainer({0, 1.1}).lookBack(1.1) == 1
        listToContainer({0, 1.1, 'a'}).lookBack(0) == 0
        listToContainer({0, 1.1, 'a'}).lookBack(1.1) == 1
        listToContainer({0, 1.1, 'a'}).lookBack('a') == 2
        listToContainer({0, 1.1, 'a'}).lookBack(-1).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBack('a') == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBack(0) == 0

#noinline
def testContainer_LookBackN(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookBackN(1, 1).nothing?()
        listToContainer({}).lookBackN(1, 2).nothing?()
        listToContainer({}).lookBackN(1, 9223372036854775807).nothing?()
        listToContainer({}).lookBackN(1, 0) : eid_outOfRange
        listToContainer({}).lookBackN(1, -1) : eid_outOfRange
        listToContainer({}).lookBackN(1, -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookBackN(0, 1).nothing?()
        listToContainer({}).lookBackN(0, 2).nothing?()
        listToContainer({}).lookBackN(0, 9223372036854775807).nothing?()
        listToContainer({}).lookBackN(0, 0) : eid_outOfRange
        listToContainer({}).lookBackN(0, -1) : eid_outOfRange
        listToContainer({}).lookBackN(0, -9223372036854775808) : eid_outOfRange
        listToContainer({0}).lookBackN(0, 1) == 0
        listToContainer({0}).lookBackN(0, 2).nothing?()
        listToContainer({0}).lookBackN(0, 9223372036854775807).nothing?()
        listToContainer({0}).lookBackN(0, 0) : eid_outOfRange
        listToContainer({0}).lookBackN(0, -1) : eid_outOfRange
        listToContainer({0}).lookBackN(0, -9223372036854775808) : eid_outOfRange
        listToContainer({0}).lookBackN(1, 1).nothing?()
        listToContainer({0}).lookBackN(1, 2).nothing?()
        listToContainer({0}).lookBackN(1, -1) : eid_outOfRange
        listToContainer({0}).lookBackN(1, -9223372036854775808) : eid_outOfRange
        listToContainer({0, 1.1}).lookBackN(0, 1) == 0
        listToContainer({0, 1.1}).lookBackN(0, 2).nothing?()
        listToContainer({0, 1.1, 0.0, 0}).lookBackN(0, 1) == 3
        listToContainer({0, 1.1, 0.0, 0}).lookBackN(0, 2) == 0
        listToContainer({0, 1.1, 0.0, 0}).lookBackN(0, 3).nothing?()
        listToContainer({0, 1.1, 0.0, 0}).lookBackN(0, -1) : eid_outOfRange
        listToContainer({0, 1.1, 0.0, 0}).lookBackN(0, -9223372036854775808) : eid_outOfRange
        listToContainer({0, 1.1}).lookBackN(1.1, 1) == 1
        listToContainer({0, 1.1}).lookBackN(1.1, 2).nothing?()
        listToContainer({0, 1.1, 'a'}).lookBackN(0, 1) == 0
        listToContainer({0, 1.1, 'a'}).lookBackN(0, 2).nothing?()
        listToContainer({0, 1.1, 'a'}).lookBackN(1.1, 1) == 1
        listToContainer({0, 1.1, 'a'}).lookBackN(1.1, 2).nothing?()
        listToContainer({0, 1.1, 'a'}).lookBackN('a', 1) == 2
        listToContainer({0, 1.1, 'a'}).lookBackN('a', 2).nothing?()
        listToContainer({0, 1.1, 'a'}).lookBackN(-1, 1).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBackN('a', 1) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackN('a', 2).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBackN(0, 1) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookBackN(0, 2).nothing?()

#noinline
def testContainer_LookBackFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookBackFromAtoB('a', 0, 0).nothing?()
        listToContainer({}).lookBackFromAtoB('a', 1, 0) : eid_outOfRange
        listToContainer({}).lookBackFromAtoB('a', 0, 1) : eid_outOfRange
        listToContainer({'a'}).lookBackFromAtoB('a', 0, 1) == 0
        listToContainer({'a'}).lookBackFromAtoB('a', 0, 0).nothing?()
        listToContainer({'a'}).lookBackFromAtoB('a', 1, 1).nothing?()
        listToContainer({'a'}).lookBackFromAtoB('b', 0, 1).nothing?()
        listToContainer({'a'}).lookBackFromAtoB(97, 0, 1).nothing?()
        listToContainer({'a'}).lookBackFromAtoB('a', 1, 0) : eid_outOfRange
        listToContainer({'a'}).lookBackFromAtoB(97, -1, 0) : eid_outOfRange
        listToContainer({'a'}).lookBackFromAtoB(97, 0, -1) : eid_outOfRange
        listToContainer({'a'}).lookBackFromAtoB('a', 0, 2) : eid_outOfRange
        listToContainer({'a'}).lookBackFromAtoB('a', 2, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookBackFromAtoB('a', 0, 1) == 0
        listToContainer({'a', -2}).lookBackFromAtoB('a', 0, 2) == 0
        listToContainer({'a', -2}).lookBackFromAtoB(-2, 0, 2) == 1
        listToContainer({'a', -2}).lookBackFromAtoB(-2, 1, 2) == 1
        listToContainer({-2, -2}).lookBackFromAtoB(-2, 0, 2) == 1
        listToContainer({'a', -2}).lookBackFromAtoB('a', 0, 0).nothing?()
        listToContainer({'a', -2}).lookBackFromAtoB(-2, 0, 0).nothing?()
        listToContainer({'a', 'a'}).lookBackFromAtoB('a', 0, 1) == 0
        listToContainer({'a', 'a'}).lookBackFromAtoB('a', 1, 2) == 1
        listToContainer({'a', 'a'}).lookBackFromAtoB('a', 0, 2) == 1
        listToContainer({'a', 'a'}).lookBackFromAtoB('a', 0, 0).nothing?()
        listToContainer({'a', 'a'}).lookBackFromAtoB('a', 2, 2).nothing?()
        listToContainer({'a', -2}).lookBackFromAtoB('a', 1, 2).nothing?()
        listToContainer({'a', -2}).lookBackFromAtoB(-2, 1, 1).nothing?()
        listToContainer({'a', -2}).lookBackFromAtoB('b', 0, 2).nothing?()
        listToContainer({'a', -2}).lookBackFromAtoB(97, 0, 2).nothing?()
        listToContainer({'a', -2}).lookBackFromAtoB('a', 1, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookBackFromAtoB('a', 3, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookBackFromAtoB(97, -1, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookBackFromAtoB(97, 0, -1) : eid_outOfRange
        listToContainer({'a', -2}).lookBackFromAtoB('a', 0, 3) : eid_outOfRange
        listToContainer({'a', -2}).lookBackFromAtoB('a', 3, 0) : eid_outOfRange
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookBackFromAtoB('a', 0, 6) == 0
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookBackFromAtoB(3, 0, 6) == 5
        listToContainer({'a', -2, '2', 2, -2.0, 2, 'a'}).lookBackFromAtoB(2, 0, 6) == 5
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookBackFromAtoB(1, 0, 8) == 7
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookBackFromAtoB(1, 1, 8) == 7
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookBackFromAtoB(1, 1, 7) == 6
        listToContainer({1, 1, 1, 1, 0, 1, 1, 1}).lookBackFromAtoB(1, 1, 7) == 6
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackFromAtoB('2', 2, 6) == 2
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackFromAtoB(1000, 0, 6) == 3
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackFromAtoB(-1.0, 0, 6) == 4
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackFromAtoB(3, 0, 6) == 5
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackFromAtoB('2', 3, 6).nothing?()
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackFromAtoB(3, 0, 5).nothing?()
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackFromAtoB('b', 0, 6).nothing?()

#noinline
def testContainer_LookBackNFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookBackNFromAtoB('a', 1, 0, 0).nothing?()
        listToContainer({}).lookBackNFromAtoB('a', 2, 0, 0).nothing?()
        listToContainer({}).lookBackNFromAtoB('a', 9223372036854775807, 0, 0).nothing?()
        listToContainer({}).lookBackNFromAtoB('a', -1, 1, 0) : eid_outOfRange
        listToContainer({}).lookBackNFromAtoB('a', -9223372036854775808, 1, 0) : eid_outOfRange
        listToContainer({}).lookBackNFromAtoB('a', 1, 1, 0) : eid_outOfRange
        listToContainer({}).lookBackNFromAtoB('a', 1, 0, 1) : eid_outOfRange
        listToContainer({'a'}).lookBackNFromAtoB('a', 1, 0, 1) == 0
        listToContainer({'a'}).lookBackNFromAtoB('a', 2, 0, 1).nothing?()
        listToContainer({'a'}).lookBackNFromAtoB('a', 1, 0, 0).nothing?()
        listToContainer({'a'}).lookBackNFromAtoB('a', 1, 1, 1).nothing?()
        listToContainer({'a'}).lookBackNFromAtoB('b', 1, 0, 1).nothing?()
        listToContainer({'a'}).lookBackNFromAtoB(97, 1, 0, 1).nothing?()
        listToContainer({'a'}).lookBackNFromAtoB('a', 1, 1, 0) : eid_outOfRange
        listToContainer({'a'}).lookBackNFromAtoB('a', 0, 0, 0) : eid_outOfRange
        listToContainer({'a'}).lookBackNFromAtoB('a', -1, 0, 0) : eid_outOfRange
        listToContainer({'a'}).lookBackNFromAtoB('a', -9223372036854775808, 0, 0) : eid_outOfRange
        listToContainer({'a'}).lookBackNFromAtoB(97, 1, -1, 0) : eid_outOfRange
        listToContainer({'a'}).lookBackNFromAtoB(97, 1, 0, -1) : eid_outOfRange
        listToContainer({'a'}).lookBackNFromAtoB('a', 1, 0, 2) : eid_outOfRange
        listToContainer({'a'}).lookBackNFromAtoB('a', 1, 2, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookBackNFromAtoB('a', 1, 0, 1) == 0
        listToContainer({'a', -2}).lookBackNFromAtoB('a', 2, 0, 1).nothing?()
        listToContainer({'a', -2}).lookBackNFromAtoB('a', 1, 0, 2) == 0
        listToContainer({'a', -2}).lookBackNFromAtoB('a', 2, 0, 2).nothing?()
        listToContainer({'a', -2}).lookBackNFromAtoB(-2, 1, 0, 2) == 1
        listToContainer({'a', -2}).lookBackNFromAtoB(-2, 2, 0, 2).nothing?()
        listToContainer({'a', -2}).lookBackNFromAtoB(-2, 1, 1, 2) == 1
        listToContainer({'a', -2}).lookBackNFromAtoB(-2, 2, 1, 2).nothing?()
        listToContainer({-2, -2}).lookBackNFromAtoB(-2, 1, 0, 2) == 1
        listToContainer({-2, -2}).lookBackNFromAtoB(-2, 2, 0, 2) == 0
        listToContainer({'a', -2}).lookBackNFromAtoB('a', 1, 0, 0).nothing?()
        listToContainer({'a', -2}).lookBackNFromAtoB('a', 2, 0, 0).nothing?()
        listToContainer({'a', -2}).lookBackNFromAtoB('a', 0, 0, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookBackNFromAtoB('a', -1, 0, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookBackNFromAtoB(-2, 1, 0, 0).nothing?()
        listToContainer({'a', 'a'}).lookBackNFromAtoB('a', 1, 0, 1) == 0
        listToContainer({'a', 'a'}).lookBackNFromAtoB('a', 2, 0, 1).nothing?()
        listToContainer({'a', 'a'}).lookBackNFromAtoB('a', 1, 1, 2) == 1
        listToContainer({'a', 'a'}).lookBackNFromAtoB('a', 2, 1, 2).nothing?()
        listToContainer({'a', 'a'}).lookBackNFromAtoB('a', 1, 0, 2) == 1
        listToContainer({'a', 'a'}).lookBackNFromAtoB('a', 2, 0, 2) == 0
        listToContainer({'a', 'a'}).lookBackNFromAtoB('a', 1, 0, 0).nothing?()
        listToContainer({'a', 'a'}).lookBackNFromAtoB('a', 1, 2, 2).nothing?()
        listToContainer({'a', -2}).lookBackNFromAtoB('a', 1, 1, 2).nothing?()
        listToContainer({'a', -2}).lookBackNFromAtoB(-2, 1, 1, 2) == 1
        listToContainer({'a', -2}).lookBackNFromAtoB(-2, 1, 1, 1).nothing?()
        listToContainer({'a', -2}).lookBackNFromAtoB('b', 1, 0, 2).nothing?()
        listToContainer({'a', -2}).lookBackNFromAtoB(97, 1, 0, 2).nothing?()
        listToContainer({'a', -2}).lookBackNFromAtoB('a', 1, 1, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookBackNFromAtoB('a', 1, 3, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookBackNFromAtoB('a', 2, 3, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookBackNFromAtoB(97, 1, -1, 0) : eid_outOfRange
        listToContainer({'a', -2}).lookBackNFromAtoB(97, 1, 0, -1) : eid_outOfRange
        listToContainer({'a', -2}).lookBackNFromAtoB('a', 1, 0, 3) : eid_outOfRange
        listToContainer({'a', -2}).lookBackNFromAtoB('a', 1, 3, 0) : eid_outOfRange
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookBackNFromAtoB('a', 1, 0, 6) == 0
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookBackNFromAtoB('a', 2, 0, 6).nothing?()
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookBackNFromAtoB(3, 1, 0, 6) == 5
        listToContainer({'a', -2, '2', nothing, -1.0, 3}).lookBackNFromAtoB(3, 2, 0, 6).nothing?()
        listToContainer({'a', -2, '2', 2, -2.0, 2, 'a'}).lookBackNFromAtoB(2, 1, 0, 6) == 5
        listToContainer({'a', -2, '2', 2, -2.0, 2, 'a'}).lookBackNFromAtoB(2, 2, 0, 6) == 3
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookBackNFromAtoB(1, 1, 0, 8) == 7
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookBackNFromAtoB(1, 2, 0, 8) == 6
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookBackNFromAtoB(1, 7, 0, 8) == 1
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookBackNFromAtoB(1, 8, 0, 8) == 0
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookBackNFromAtoB(1, 2, 1, 8) == 6
        listToContainer({1, 1, 1, 1, 1, 1, 1, 1}).lookBackNFromAtoB(1, 3, 1, 7) == 4
        listToContainer({1, 1, 1, 1, 0, 1, 1, 1}).lookBackNFromAtoB(1, 4, 1, 7) == 2
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackNFromAtoB('2', 1, 2, 6) == 2
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackNFromAtoB('2', 2, 2, 6).nothing?()
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackNFromAtoB(1000, 1, 0, 6) == 3
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackNFromAtoB(-1.0, 1, 0, 6) == 4
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackNFromAtoB(3, 1, 0, 6) == 5
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackNFromAtoB('2', 1, 3, 6).nothing?()
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackNFromAtoB(3, 1, 0, 5).nothing?()
        listToContainer({'a', -2, '2', 1000, -1.0, 3}).lookBackNFromAtoB('b', 1, 0, 6).nothing?()

#noinline
def testContainer_LookBackAny(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookBackAny({0}).nothing?()
        listToContainer({}).lookBackAny({1}).nothing?()
        listToContainer({}).lookBackAny({1, 2}).nothing?()
        listToContainer({}).lookBackAny({nothing}).nothing?()
        listToContainer({0}).lookBackAny({0}) == 0
        listToContainer({0}).lookBackAny({0, 1}) == 0
        listToContainer({0}).lookBackAny({1, 0}) == 0
        listToContainer({0}).lookBackAny({1}).nothing?()
        listToContainer({0}).lookBackAny({1, 2}).nothing?()
        listToContainer({0}).lookBackAny({nothing}).nothing?()
        listToContainer({0}).lookBackAny({0, nothing}) == 0
        listToContainer({0}).lookBackAny({nothing, 0}) == 0
        listToContainer({0}).lookBackAny({0, 0}) == 0
        listToContainer({0, 1.1}).lookBackAny({0}) == 0
        listToContainer({0, 1.1}).lookBackAny({1.1}) == 1
        listToContainer({0, 1.1}).lookBackAny({0, 2}) == 0
        listToContainer({0, 1.1}).lookBackAny({2, 0}) == 0
        listToContainer({0, 1.1}).lookBackAny({1.1, 0}) == 1
        listToContainer({0, 1.1}).lookBackAny({0, 1.1}) == 1
        listToContainer({0, 1.1}).lookBackAny({2, 0, 1.1}) == 1
        listToContainer({0, 1.1}).lookBackAny({2, -2, 1.1}) == 1
        listToContainer({0, 1.1}).lookBackAny({2, -2, 0.0}).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAny({'a'}) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAny({0}) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAny({3, 'a'}) == 3
        listToContainer({0, 3, 1.1, nothing, 'a'}).lookBackAny({3, nothing, 'a'}) == 4
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAny({3, nothing}).nothing?()
        listToContainer({}).lookBackAny({}) : eid_nothingToLook
        listToContainer({1, 2}).lookBackAny({}) : eid_nothingToLook

#noinline
def testContainer_LookBackNAny(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookBackAnyN({0}, 1).nothing?()
        listToContainer({}).lookBackAnyN({0}, 2).nothing?()
        listToContainer({}).lookBackAnyN({0}, 9223372036854775807).nothing?()
        listToContainer({}).lookBackAnyN({0}, 0) : eid_outOfRange
        listToContainer({}).lookBackAnyN({0}, -1) : eid_outOfRange
        listToContainer({}).lookBackAnyN({0}, -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookBackAnyN({1}, 1).nothing?()
        listToContainer({}).lookBackAnyN({1, 2}, 1).nothing?()
        listToContainer({}).lookBackAnyN({nothing}, 1).nothing?()
        listToContainer({}).lookBackAnyN({nothing}, 2).nothing?()
        listToContainer({0}).lookBackAnyN({0}, 1) == 0
        listToContainer({0}).lookBackAnyN({0}, 2).nothing?()
        listToContainer({0}).lookBackAnyN({0}, 9223372036854775807).nothing?()
        listToContainer({0}).lookBackAnyN({0}, 0) : eid_outOfRange
        listToContainer({0}).lookBackAnyN({0}, -1) : eid_outOfRange
        listToContainer({0}).lookBackAnyN({0}, -9223372036854775808) : eid_outOfRange
        listToContainer({0}).lookBackAnyN({0, 1}, 1) == 0
        listToContainer({0}).lookBackAnyN({0, 1}, 2).nothing?()
        listToContainer({0}).lookBackAnyN({1, 0}, 1) == 0
        listToContainer({0}).lookBackAnyN({1, 0}, 2).nothing?()
        listToContainer({0}).lookBackAnyN({1}, 1).nothing?()
        listToContainer({0}).lookBackAnyN({1}, 2).nothing?()
        listToContainer({0}).lookBackAnyN({1, 2}, 1).nothing?()
        listToContainer({0}).lookBackAnyN({1, 2}, 2).nothing?()
        listToContainer({0}).lookBackAnyN({nothing}, 1).nothing?()
        listToContainer({0}).lookBackAnyN({nothing}, 2).nothing?()
        listToContainer({0}).lookBackAnyN({nothing}, 9223372036854775807).nothing?()
        listToContainer({0}).lookBackAnyN({nothing}, 0) : eid_outOfRange
        listToContainer({0}).lookBackAnyN({nothing}, -1) : eid_outOfRange
        listToContainer({0}).lookBackAnyN({nothing}, -9223372036854775808) : eid_outOfRange
        listToContainer({0}).lookBackAnyN({0, nothing}, 1) == 0
        listToContainer({0}).lookBackAnyN({0, nothing}, 2).nothing?()
        listToContainer({0}).lookBackAnyN({nothing, 0}, 1) == 0
        listToContainer({0}).lookBackAnyN({nothing, 0}, 2).nothing?()
        listToContainer({0}).lookBackAnyN({0, 0}, 1) == 0
        listToContainer({0}).lookBackAnyN({0, 0}, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyN({0}, 1) == 0
        listToContainer({0, 1.1}).lookBackAnyN({0}, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyN({1.1}, 1) == 1
        listToContainer({0, 1.1}).lookBackAnyN({1.1}, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyN({0, 2}, 1) == 0
        listToContainer({0, 1.1}).lookBackAnyN({0, 2}, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyN({2, 0}, 1) == 0
        listToContainer({0, 1.1}).lookBackAnyN({2, 0}, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyN({1.1, 0}, 1) == 1
        listToContainer({0, 1.1}).lookBackAnyN({0, 1.1}, 1) == 1
        listToContainer({0, 1.1}).lookBackAnyN({2, 0, 1.1}, 1) == 1
        listToContainer({0, 1.1}).lookBackAnyN({2, 0, 1.1}, 2) == 0
        listToContainer({0, 1.1}).lookBackAnyN({2, 0, 1.1}, 3).nothing?()
        listToContainer({0, 1.1}).lookBackAnyN({2, -2, 1.1}, 1) == 1
        listToContainer({0, 1.1}).lookBackAnyN({2, -2, 1.1}, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyN({2, -2, 0.0}, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyN({2, -2, 0.0}, 2).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyN({'a'}, 1) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyN({'a'}, 2).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyN({0}, 1) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyN({3, 'a'}, 1) == 3
        listToContainer({0, 3, 1.1, nothing, 'a'}).lookBackAnyN({3, nothing, 'a'}, 1) == 4
        listToContainer({0, 3, 1.1, nothing, 'a'}).lookBackAnyN({3, nothing, 'a'}, 2) == 1
        listToContainer({0, 3, 1.1, nothing, 'a'}).lookBackAnyN({3, nothing, 'a'}, 3).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyN({3, nothing}, 1).nothing?()
        listToContainer({1, 2, 3, 1, 2, 3}).lookBackAnyN({1, 2, 4}, 1) == 4
        listToContainer({1, 2, 3, 1, 2, 3}).lookBackAnyN({1, 2, 4}, 2) == 3
        listToContainer({1, 2, 3, 1, 2, 3}).lookBackAnyN({1, 2, 4}, 3) == 1
        listToContainer({1, 2, 3, 1, 2, 3}).lookBackAnyN({1, 2, 4}, 4) == 0
        listToContainer({1, 2, 3, 1, 2, 3}).lookBackAnyN({1, 2, 4}, 5).nothing?()
        listToContainer({}).lookBackAnyN({}, 1) : eid_nothingToLook
        listToContainer({1, 2}).lookBackAnyN({}, 1) : eid_nothingToLook

#noinline
def testContainer_LookBackAnyFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookBackAnyFromAtoB({0}, 0, 0).nothing?()
        listToContainer({}).lookBackAnyFromAtoB({1, 2}, 0, 0).nothing?()
        listToContainer({}).lookBackAnyFromAtoB({nothing}, 0, 0).nothing?()
        listToContainer({0}).lookBackAnyFromAtoB({0}, 0, 1) == 0
        listToContainer({0}).lookBackAnyFromAtoB({0, 1}, 0, 1) == 0
        listToContainer({0}).lookBackAnyFromAtoB({1, 0}, 0, 1) == 0
        listToContainer({0}).lookBackAnyFromAtoB({0, 0}, 0, 1) == 0
        listToContainer({0}).lookBackAnyFromAtoB({0, nothing}, 0, 1) == 0
        listToContainer({0}).lookBackAnyFromAtoB({nothing, 0}, 0, 1) == 0
        listToContainer({0}).lookBackAnyFromAtoB({1}, 0, 1).nothing?()
        listToContainer({0}).lookBackAnyFromAtoB({0}, 0, 0).nothing?()
        listToContainer({0}).lookBackAnyFromAtoB({0}, 1, 1).nothing?()
        listToContainer({0}).lookBackAnyFromAtoB({1, 2}, 0, 1).nothing?()
        listToContainer({0}).lookBackAnyFromAtoB({0, 2}, 0, 0).nothing?()
        listToContainer({0}).lookBackAnyFromAtoB({1, 0}, 1, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({0}, 0, 2) == 0
        listToContainer({0, 0}).lookBackAnyFromAtoB({0}, 0, 2) == 1
        listToContainer({0, 0}).lookBackAnyFromAtoB({0, 0}, 0, 2) == 1
        listToContainer({0, 0}).lookBackAnyFromAtoB({0, 0}, 1, 2) == 1
        listToContainer({0, 0}).lookBackAnyFromAtoB({0, 0}, 2, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({2, 0}, 0, 2) == 0
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({1.1, 0}, 0, 2) == 1
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({1.1, 2}, 0, 2) == 1
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({0, 2}, 0, 1) == 0
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({2, 0}, 0, 1) == 0
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({1.1, 2}, 1, 2) == 1
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({2, 1.1}, 1, 2) == 1
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({2, -2, 0.0}, 0, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({0}, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({1.1}, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({0, 1}, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({1, 0}, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({1.1, 1}, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({1, 1.1}, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({1, 1.1}, 0, 0).nothing?()
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({1, 1.1}, 1, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyFromAtoB({1, 1.1}, 2, 2).nothing?()
        listToContainer({0, 1.1, 0}).lookBackAnyFromAtoB({1, 0}, 0, 3) == 2
        listToContainer({0, 1.1, 0}).lookBackAnyFromAtoB({1.1, 0}, 0, 3) == 2
        listToContainer({0, 1.1, 0}).lookBackAnyFromAtoB({0}, 1, 3) == 2
        listToContainer({0, 1.1, 0}).lookBackAnyFromAtoB({0}, 0, 2) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyFromAtoB({'a'}, 0, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyFromAtoB({'a'}, 1, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyFromAtoB({'a'}, 2, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyFromAtoB({'a'}, 3, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyFromAtoB({0, 'b'}, 0, 1) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyFromAtoB({'b', 0}, 0, 1) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyFromAtoB({'b', 0}, 0, 4) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyFromAtoB({3, 'a'}, 2, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyFromAtoB({nothing, 3, 'a'}, 2, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyFromAtoB({nothing, 3}, 2, 4).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyFromAtoB({'a'}, 0, 3).nothing?()
        listToContainer({}).lookBackAnyFromAtoB({'a'}, 0, 1) : eid_outOfRange
        listToContainer({}).lookBackAnyFromAtoB({'a'}, 1, 0) : eid_outOfRange
        listToContainer({}).lookBackAnyFromAtoB({'a'}, 1, 1) : eid_outOfRange
        listToContainer({}).lookBackAnyFromAtoB({'b'}, -1, 1) : eid_outOfRange
        listToContainer({}).lookBackAnyFromAtoB({'a'}, 1, -1) : eid_outOfRange
        listToContainer({}).lookBackAnyFromAtoB({'c'}, -1, -1) : eid_outOfRange
        listToContainer({}).lookBackAnyFromAtoB({'a'}, -10, -10) : eid_outOfRange
        listToContainer({}).lookBackAnyFromAtoB({'a'}, -9223372036854775808, 0) : eid_outOfRange
        listToContainer({}).lookBackAnyFromAtoB({'a'}, 0, -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookBackAnyFromAtoB({'a'}, 9223372036854775807, 0) : eid_outOfRange
        listToContainer({}).lookBackAnyFromAtoB({'a'}, 0, 9223372036854775807) : eid_outOfRange
        listToContainer({}).lookBackAnyFromAtoB({}, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookBackAnyFromAtoB({}, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookBackAnyFromAtoB({}, 0, 2) : eid_nothingToLook

#noinline
def testContainer_LookBackAnyNFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookBackAnyNFromAtoB({0}, 1, 0, 0).nothing?()
        listToContainer({}).lookBackAnyNFromAtoB({0}, 2, 0, 0).nothing?()
        listToContainer({}).lookBackAnyNFromAtoB({0}, 9223372036854775807, 0, 0).nothing?()
        listToContainer({}).lookBackAnyNFromAtoB({0}, 0, 0, 0) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({0}, -1, 0, 0) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({0}, -9223372036854775808, 0, 0) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({1, 2}, 1, 0, 0).nothing?()
        listToContainer({}).lookBackAnyNFromAtoB({1, 2}, 2, 0, 0).nothing?()
        listToContainer({}).lookBackAnyNFromAtoB({nothing}, 1, 0, 0).nothing?()
        listToContainer({}).lookBackAnyNFromAtoB({nothing}, 2, 0, 0).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({0}, 1, 0, 1) == 0
        listToContainer({0}).lookBackAnyNFromAtoB({0}, 2, 0, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({0}, 9223372036854775807, 0, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({0}, 0, 0, 1) : eid_outOfRange
        listToContainer({0}).lookBackAnyNFromAtoB({0}, -1, 0, 1) : eid_outOfRange
        listToContainer({0}).lookBackAnyNFromAtoB({0}, -9223372036854775808, 0, 1) : eid_outOfRange
        listToContainer({0}).lookBackAnyNFromAtoB({0, 1}, 1, 0, 1) == 0
        listToContainer({0}).lookBackAnyNFromAtoB({0, 1}, 2, 0, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({1, 0}, 1, 0, 1) == 0
        listToContainer({0}).lookBackAnyNFromAtoB({1, 0}, 2, 0, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({0, 0}, 1, 0, 1) == 0
        listToContainer({0}).lookBackAnyNFromAtoB({0, 0}, 2, 0, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({0, nothing}, 1, 0, 1) == 0
        listToContainer({0}).lookBackAnyNFromAtoB({0, nothing}, 2, 0, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({nothing, 0}, 1, 0, 1) == 0
        listToContainer({0}).lookBackAnyNFromAtoB({nothing, 0}, 2, 0, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({1}, 1, 0, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({1}, 2, 0, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({0}, 1, 0, 0).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({0}, 2, 0, 0).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({0}, 1, 1, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({0}, 2, 1, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({1, 2}, 1, 0, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({1, 2}, 2, 0, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({0, 2}, 1, 0, 0).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({0, 2}, 2, 0, 0).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({1, 0}, 1, 1, 1).nothing?()
        listToContainer({0}).lookBackAnyNFromAtoB({1, 0}, 2, 1, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({0}, 1, 0, 2) == 0
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({0}, 2, 0, 2).nothing?()
        listToContainer({0, 0}).lookBackAnyNFromAtoB({0}, 1, 0, 2) == 1
        listToContainer({0, 0}).lookBackAnyNFromAtoB({0}, 2, 0, 2) == 0
        listToContainer({0, 0}).lookBackAnyNFromAtoB({0}, 3, 0, 2).nothing?()
        listToContainer({0, 0}).lookBackAnyNFromAtoB({0, 0}, 1, 0, 2) == 1
        listToContainer({0, 0}).lookBackAnyNFromAtoB({0, 0}, 2, 0, 2) == 0
        listToContainer({0, 0}).lookBackAnyNFromAtoB({0, 0}, 3, 0, 2).nothing?()
        listToContainer({0, 0}).lookBackAnyNFromAtoB({0, 0}, 1, 1, 2) == 1
        listToContainer({0, 0}).lookBackAnyNFromAtoB({0, 0}, 2, 1, 2).nothing?()
        listToContainer({0, 0}).lookBackAnyNFromAtoB({0, 0}, 1, 2, 2).nothing?()
        listToContainer({0, 0}).lookBackAnyNFromAtoB({0, 0}, 2, 2, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({2, 0}, 1, 0, 2) == 0
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({2, 0}, 2, 0, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1.1, 0}, 1, 0, 2) == 1
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1.1, 0}, 2, 0, 2) == 0
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1.1, 0}, 3, 0, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1.1, 2}, 1, 0, 2) == 1
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1.1, 2}, 2, 0, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({0, 2}, 1, 0, 1) == 0
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({0, 2}, 2, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({2, 0}, 1, 0, 1) == 0
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({2, 0}, 2, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1.1, 2}, 1, 1, 2) == 1
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1.1, 2}, 2, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({2, 1.1}, 1, 1, 2) == 1
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({2, 1.1}, 2, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({2, -2, 0.0}, 1, 0, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({2, -2, 0.0}, 2, 0, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({0}, 1, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({0}, 2, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1.1}, 1, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({0, 1}, 1, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({0, 1}, 2, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1, 0}, 1, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1, 0}, 2, 1, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1.1, 1}, 1, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1.1, 1}, 2, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1, 1.1}, 1, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1, 1.1}, 2, 0, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1, 1.1}, 1, 0, 0).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1, 1.1}, 2, 0, 0).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1, 1.1}, 1, 1, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1, 1.1}, 2, 1, 1).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1, 1.1}, 1, 2, 2).nothing?()
        listToContainer({0, 1.1}).lookBackAnyNFromAtoB({1, 1.1}, 2, 2, 2).nothing?()
        listToContainer({0, 1.1, 0}).lookBackAnyNFromAtoB({1, 0}, 1, 0, 3) == 2
        listToContainer({0, 1.1, 0}).lookBackAnyNFromAtoB({1, 0}, 2, 0, 3) == 0
        listToContainer({0, 1.1, 0}).lookBackAnyNFromAtoB({1, 0}, 3, 0, 3).nothing?()
        listToContainer({0, 1.1, 0}).lookBackAnyNFromAtoB({1.1, 0}, 1, 0, 3) == 2
        listToContainer({0, 1.1, 0}).lookBackAnyNFromAtoB({1.1, 0}, 2, 0, 3) == 1
        listToContainer({0, 1.1, 0}).lookBackAnyNFromAtoB({1.1, 0}, 3, 0, 3) == 0
        listToContainer({0, 1.1, 0}).lookBackAnyNFromAtoB({1.1, 0}, 4, 0, 3).nothing?()
        listToContainer({0, 1.1, 0}).lookBackAnyNFromAtoB({0}, 1, 1, 3) == 2
        listToContainer({0, 1.1, 0}).lookBackAnyNFromAtoB({0}, 2, 1, 3).nothing?()
        listToContainer({0, 1.1, 0}).lookBackAnyNFromAtoB({0}, 1, 0, 2) == 0
        listToContainer({0, 1.1, 0}).lookBackAnyNFromAtoB({0}, 2, 0, 2).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({'a'}, 1, 0, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({'a'}, 2, 0, 4).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({'a'}, 1, 1, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({'a'}, 2, 1, 4).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({'a'}, 1, 2, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({'a'}, 2, 2, 4).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({'a'}, 1, 3, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({'a'}, 2, 3, 4).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({0, 'b'}, 1, 0, 1) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({'b', 0}, 1, 0, 1) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({'b', 0}, 1, 0, 4) == 0
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({3, 'a'}, 1, 2, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({nothing, 3, 'a'}, 1, 2, 4) == 3
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({nothing, 3}, 1, 2, 4).nothing?()
        listToContainer({0, 1.1, nothing, 'a'}).lookBackAnyNFromAtoB({'a'}, 1, 0, 3).nothing?()
        listToContainer({}).lookBackAnyNFromAtoB({'a'}, 1, 0, 1) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({'a'}, 1, 1, 0) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({'a'}, 1, 1, 1) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({'b'}, 1, -1, 1) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({'a'}, 1, 1, -1) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({'c'}, 1, -1, -1) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({'a'}, 1, -10, -10) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({'a'}, 1, -9223372036854775808, 0) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({'a'}, 2, -9223372036854775808, 0) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({'a'}, 1, 0, -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({'a'}, 1, 9223372036854775807, 0) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({'a'}, 1, 0, 9223372036854775807) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({'a'}, 2, 0, 9223372036854775807) : eid_outOfRange
        listToContainer({}).lookBackAnyNFromAtoB({}, 1, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookBackAnyNFromAtoB({}, 1, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookBackAnyNFromAtoB({}, 1, 0, 2) : eid_nothingToLook

#noinline
def testContainer_LookBackPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookBackPart(listToContainer({0})).nothing?()
        listToContainer({}).lookBackPart(listToContainer({'a'})).nothing?()
        listToContainer({1}).lookBackPart(listToContainer({1})) == 0
        listToContainer({2}).lookBackPart(listToContainer({1})).nothing?()
        listToContainer({2}).lookBackPart(listToContainer({2, 1})).nothing?()
        listToContainer({2}).lookBackPart(listToContainer({1, 2})).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPart(listToContainer({1})) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPart(listToContainer({4})) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPart(listToContainer({1, 2})) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPart(listToContainer({2, 3})) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPart(listToContainer({2, 3, 4})) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPart(listToContainer({3, 4})) == 4
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPart(listToContainer({2, 2})).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPart(listToContainer({5})).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPart(listToContainer({1, 1})).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPart(listToContainer({4, 4})).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPart(listToContainer({4, 1})).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPart(listToContainer({4, 5})).nothing?()
        listToContainer({nothing}).lookBackPart(listToContainer({nothing})).nothing?()
        listToContainer({}).lookBackPart(listToContainer({})) : eid_nothingToLook
        listToContainer({1, 2}).lookBackPart(listToContainer({})) : eid_nothingToLook
        listToContainer({1, 2, nothing, 2, 3, 4, 1, 2, 1, 2, 1}).lookBackPart(listToContainer({1, 2})) == 8
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2}).lookBackPart(listToContainer({2, 2, 2, 2})) == 7
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}).lookBackPart(listToContainer({2, 2, 2, 2})) == 10

#noinline
def testContainer_LookBackNPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookBackNPart(listToContainer({0}), 1).nothing?()
        listToContainer({}).lookBackNPart(listToContainer({0}), 2).nothing?()
        listToContainer({}).lookBackNPart(listToContainer({0}), 9223372036854775807).nothing?()
        listToContainer({}).lookBackNPart(listToContainer({0}), 0) : eid_outOfRange
        listToContainer({}).lookBackNPart(listToContainer({0}), -1) : eid_outOfRange
        listToContainer({}).lookBackNPart(listToContainer({0}), -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookBackNPart(listToContainer({'a'}), 1).nothing?()
        listToContainer({}).lookBackNPart(listToContainer({'a'}), 2).nothing?()
        listToContainer({1}).lookBackNPart(listToContainer({1}), 1) == 0
        listToContainer({1}).lookBackNPart(listToContainer({1}), 2).nothing?()
        listToContainer({1}).lookBackNPart(listToContainer({1}), 9223372036854775807).nothing?()
        listToContainer({1}).lookBackNPart(listToContainer({1}), 0) : eid_outOfRange
        listToContainer({1}).lookBackNPart(listToContainer({1}), -1) : eid_outOfRange
        listToContainer({1}).lookBackNPart(listToContainer({1}), -9223372036854775808) : eid_outOfRange
        listToContainer({2}).lookBackNPart(listToContainer({1}), 1).nothing?()
        listToContainer({2}).lookBackNPart(listToContainer({1}), 2).nothing?()
        listToContainer({2}).lookBackNPart(listToContainer({2, 1}), 1).nothing?()
        listToContainer({2}).lookBackNPart(listToContainer({2, 1}), 2).nothing?()
        listToContainer({2}).lookBackNPart(listToContainer({1, 2}), 1).nothing?()
        listToContainer({2}).lookBackNPart(listToContainer({1, 2}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({1}), 1) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({1}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({2}), 1) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({2}), 2) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({1}), 3).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({4}), 1) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({4}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({1, 2}), 1) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({1, 2}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({2, 2}), 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({2, 3}), 1) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({2, 3}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({2, 3, 4}), 1) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({2, 3, 4}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({3, 4}), 1) == 4
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({3, 4}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({5}), 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({5}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({1, 1}), 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({1, 1}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({4, 4}), 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({4, 4}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({4, 1}), 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({4, 1}), 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({4, 5}), 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPart(listToContainer({4, 5}), 2).nothing?()
        listToContainer({nothing}).lookBackNPart(listToContainer({nothing}), 1).nothing?()
        listToContainer({nothing}).lookBackNPart(listToContainer({nothing}), 2).nothing?()
        listToContainer({}).lookBackNPart(listToContainer({}), 1) : eid_nothingToLook
        listToContainer({1, 2}).lookBackNPart(listToContainer({}), 1) : eid_nothingToLook
        listToContainer({1, 2, nothing, 2, 3, 4, 1, 2, 1, 2, 1}).lookBackNPart(listToContainer({1, 2}), 1) == 8
        listToContainer({1, 2, nothing, 2, 3, 4, 1, 2, 1, 2, 1}).lookBackNPart(listToContainer({1, 2}), 2) == 6
        listToContainer({1, 2, nothing, 2, 3, 4, 1, 2, 1, 2, 1}).lookBackNPart(listToContainer({1, 2}), 3) == 0
        listToContainer({1, 2, nothing, 2, 3, 4, 1, 2, 1, 2, 1}).lookBackNPart(listToContainer({1, 2}), 4).nothing?()
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2}).lookBackNPart(listToContainer({2, 2, 2, 2}), 1) == 7
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2}).lookBackNPart(listToContainer({2, 2, 2, 2}), 2) == 3
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2}).lookBackNPart(listToContainer({2, 2, 2, 2}), 3).nothing?()
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}).lookBackNPart(listToContainer({2, 2, 2, 2}), 1) == 10
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}).lookBackNPart(listToContainer({2, 2, 2, 2}), 2) == 6
        listToContainer({1, 2, nothing, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}).lookBackNPart(listToContainer({2, 2, 2, 2}), 3).nothing?()

#noinline
def testContainer_LookBackPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookBackPartFromAtoB(listToContainer({0}), 0, 0).nothing?()
        listToContainer({}).lookBackPartFromAtoB(listToContainer({'a'}), 0, 0).nothing?()
        listToContainer({}).lookBackPartFromAtoB(listToContainer({'a'}), -1, 0) : eid_outOfRange
        listToContainer({}).lookBackPartFromAtoB(listToContainer({'a'}), -9223372036854775808, 0) : eid_outOfRange
        listToContainer({}).lookBackPartFromAtoB(listToContainer({'a'}), 1, 0) : eid_outOfRange
        listToContainer({}).lookBackPartFromAtoB(listToContainer({'a'}), 9223372036854775807, 0) : eid_outOfRange
        listToContainer({}).lookBackPartFromAtoB(listToContainer({'a'}), 0, -1) : eid_outOfRange
        listToContainer({}).lookBackPartFromAtoB(listToContainer({'a'}), 0, -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookBackPartFromAtoB(listToContainer({'a'}), 0, 1) : eid_outOfRange
        listToContainer({}).lookBackPartFromAtoB(listToContainer({'a'}), 0, 9223372036854775807) : eid_outOfRange
        listToContainer({1}).lookBackPartFromAtoB(listToContainer({1}), 0, 1) == 0
        listToContainer({1}).lookBackPartFromAtoB(listToContainer({1}), 1, 0) : eid_outOfRange
        listToContainer({1}).lookBackPartFromAtoB(listToContainer({1}), 0, 0).nothing?()
        listToContainer({1}).lookBackPartFromAtoB(listToContainer({1}), 1, 1).nothing?()
        listToContainer({2}).lookBackPartFromAtoB(listToContainer({1}), 0, 1).nothing?()
        listToContainer({2}).lookBackPartFromAtoB(listToContainer({1}), 0, 0).nothing?()
        listToContainer({2}).lookBackPartFromAtoB(listToContainer({1}), 1, 1).nothing?()
        listToContainer({2}).lookBackPartFromAtoB(listToContainer({2, 1}), 0, 1).nothing?()
        listToContainer({2}).lookBackPartFromAtoB(listToContainer({1, 2}), 0, 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({1}), 0, 1) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({1}), 0, 2) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({1}), 0, 6) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({4}), 0, 6) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({4}), 1, 6) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({4}), 2, 6) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({4}), 2, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({4}), 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2}), 0, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({1, 2}), 0, 6) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({1, 2}), 1, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2, 3}), 0, 6) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2, 3}), 0, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2, 3}), 1, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2, 3}), 3, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2, 3}), 3, 4).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2, 3}), 4, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2, 3, 4}), 0, 6) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2, 3, 4}), 3, 6) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2, 3, 4}), 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2, 3, 4}), 4, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2, 2}), 0, 6).nothing?()
        listToContainer({nothing}).lookBackPartFromAtoB(listToContainer({nothing}), 0, 0).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2, nothing}), 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2}), -1, 2) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2}), 2, 1) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackPartFromAtoB(listToContainer({2}), -10, -1) : eid_outOfRange
        listToContainer({}).lookBackPartFromAtoB(listToContainer({}), 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookBackPartFromAtoB(listToContainer({}), 0, 0) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookBackPartFromAtoB(listToContainer({1, 2}), 0, 3) == 0
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookBackPartFromAtoB(listToContainer({1, 2}), 0, 6) == 4
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookBackPartFromAtoB(listToContainer({2, 2, 2}), 0, 7) == 3
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookBackPartFromAtoB(listToContainer({2, 2, 2}), 1, 6) == 3
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookBackPartFromAtoB(listToContainer({2, 2, 2}), 2, 5) == 2
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookBackPartFromAtoB(listToContainer({2, 2, 2}), 0, 8) == 5
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookBackPartFromAtoB(listToContainer({2, 2, 2}), 1, 7) == 4
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookBackPartFromAtoB(listToContainer({2, 2, 2}), 0, 6) == 3
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookBackPartFromAtoB(listToContainer({2, 2, 2}), 2, 5) == 2
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookBackPartFromAtoB(listToContainer({2, 2, 2}), 1, 7) == 4

#noinline
def testContainer_LookBackNPartFromAtoB(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({0}), 1, 0, 0).nothing?()
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({0}), 2, 0, 0).nothing?()
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({0}), 9223372036854775807, 0, 0).nothing?()
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({0}), 0, 0, 0) : eid_outOfRange
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({0}), -1, 0, 0) : eid_outOfRange
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({0}), -9223372036854775808, 0, 0) : eid_outOfRange
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({'a'}), 1, 0, 0).nothing?()
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({'a'}), 2, 0, 0).nothing?()
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({'a'}), 1, -1, 0) : eid_outOfRange
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({'a'}), 1, -9223372036854775808, 0) : eid_outOfRange
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({'a'}), 1, 1, 0) : eid_outOfRange
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({'a'}), 1, 9223372036854775807, 0) : eid_outOfRange
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({'a'}), 1, 0, -1) : eid_outOfRange
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({'a'}), 1, 0, -9223372036854775808) : eid_outOfRange
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({'a'}), 1, 0, 1) : eid_outOfRange
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({'a'}), 1, 0, 9223372036854775807) : eid_outOfRange
        listToContainer({1}).lookBackNPartFromAtoB(listToContainer({1}), 1, 0, 1) == 0
        listToContainer({1}).lookBackNPartFromAtoB(listToContainer({1}), 9223372036854775807, 0, 1).nothing?()
        listToContainer({1}).lookBackNPartFromAtoB(listToContainer({1}), 0, 0, 1) : eid_outOfRange
        listToContainer({1}).lookBackNPartFromAtoB(listToContainer({1}), -1, 0, 1) : eid_outOfRange
        listToContainer({1}).lookBackNPartFromAtoB(listToContainer({1}), -9223372036854775808, 0, 1) : eid_outOfRange
        listToContainer({1}).lookBackNPartFromAtoB(listToContainer({1}), 1, 1, 0) : eid_outOfRange
        listToContainer({1}).lookBackNPartFromAtoB(listToContainer({1}), 1, 0, 0).nothing?()
        listToContainer({1}).lookBackNPartFromAtoB(listToContainer({1}), 2, 0, 0).nothing?()
        listToContainer({1}).lookBackNPartFromAtoB(listToContainer({1}), 1, 1, 1).nothing?()
        listToContainer({1}).lookBackNPartFromAtoB(listToContainer({1}), 2, 1, 1).nothing?()
        listToContainer({2}).lookBackNPartFromAtoB(listToContainer({1}), 1, 0, 1).nothing?()
        listToContainer({2}).lookBackNPartFromAtoB(listToContainer({1}), 2, 0, 1).nothing?()
        listToContainer({2}).lookBackNPartFromAtoB(listToContainer({1}), 1, 0, 0).nothing?()
        listToContainer({2}).lookBackNPartFromAtoB(listToContainer({1}), 2, 0, 0).nothing?()
        listToContainer({2}).lookBackNPartFromAtoB(listToContainer({1}), 1, 1, 1).nothing?()
        listToContainer({2}).lookBackNPartFromAtoB(listToContainer({1}), 2, 1, 1).nothing?()
        listToContainer({2}).lookBackNPartFromAtoB(listToContainer({2, 1}), 1, 0, 1).nothing?()
        listToContainer({2}).lookBackNPartFromAtoB(listToContainer({2, 1}), 2, 0, 1).nothing?()
        listToContainer({2}).lookBackNPartFromAtoB(listToContainer({1, 2}), 1, 0, 1).nothing?()
        listToContainer({2}).lookBackNPartFromAtoB(listToContainer({1, 2}), 2, 0, 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({1}), 1, 0, 1) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({1}), 0, 0, 1) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({1}), -1, 0, 1) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({1}), -9223372036854775808, 0, 1) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({1}), 2, 0, 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({1}), 1, 0, 2) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({1}), 2, 0, 2).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({1}), 1, 0, 6) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({1}), 2, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({4}), 1, 0, 6) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({4}), 2, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({4}), 1, 1, 6) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({4}), 2, 1, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({4}), 1, 2, 6) == 5
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({4}), 2, 2, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({4}), 1, 2, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({4}), 2, 2, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({4}), 1, 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({4}), 2, 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2}), 1, 0, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2}), 2, 0, 5) == 1
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2}), 1, 2, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2}), 2, 2, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2}), 3, 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({1, 2}), 1, 0, 6) == 0
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({1, 2}), 2, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({1, 2}), 1, 1, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({1, 2}), 2, 1, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3}), 1, 0, 6) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3}), 2, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3}), 1, 0, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3}), 2, 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3}), 1, 1, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3}), 2, 1, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3}), 1, 3, 5) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3}), 2, 3, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3}), 1, 3, 4).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3}), 2, 3, 4).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3}), 1, 4, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3}), 2, 4, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3, 4}), 1, 0, 6) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3, 4}), 2, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3, 4}), 1, 3, 6) == 3
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3, 4}), 2, 3, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3, 4}), 1, 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3, 4}), 2, 0, 5).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3, 4}), 1, 4, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 3, 4}), 2, 4, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 2}), 1, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, 2}), 2, 0, 6).nothing?()
        listToContainer({nothing}).lookBackNPartFromAtoB(listToContainer({nothing}), 1, 0, 0).nothing?()
        listToContainer({nothing}).lookBackNPartFromAtoB(listToContainer({nothing}), 2, 0, 0).nothing?()
        listToContainer({nothing}).lookBackNPartFromAtoB(listToContainer({nothing}), 1, 0, 1).nothing?()
        listToContainer({nothing}).lookBackNPartFromAtoB(listToContainer({nothing}), 2, 0, 1).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, nothing}), 1, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2, nothing}), 2, 0, 6).nothing?()
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2}), 1, -1, 2) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2}), 1, 2, 1) : eid_outOfRange
        listToContainer({1, 2, nothing, 2, 3, 4}).lookBackNPartFromAtoB(listToContainer({2}), 1, -10, -1) : eid_outOfRange
        listToContainer({}).lookBackNPartFromAtoB(listToContainer({}), 1, 0, 0) : eid_nothingToLook
        listToContainer({1, 2}).lookBackNPartFromAtoB(listToContainer({}), 1, 0, 0) : eid_nothingToLook
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookBackNPartFromAtoB(listToContainer({1, 2}), 1, 0, 3) == 0
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookBackNPartFromAtoB(listToContainer({1, 2}), 2, 0, 3).nothing?()
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookBackNPartFromAtoB(listToContainer({1, 2}), 1, 0, 6) == 4
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookBackNPartFromAtoB(listToContainer({1, 2}), 2, 0, 6) == 0
        listToContainer({1, 2, 3, 4, 1, 2, "bbb"}).lookBackNPartFromAtoB(listToContainer({1, 2}), 3, 0, 6).nothing?()
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookBackNPartFromAtoB(listToContainer({2, 2, 2}), 1, 0, 7) == 3
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookBackNPartFromAtoB(listToContainer({2, 2, 2}), 2, 0, 7) == 0
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookBackNPartFromAtoB(listToContainer({2, 2, 2}), 3, 0, 7).nothing?()
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookBackNPartFromAtoB(listToContainer({2, 2, 2}), 1, 1, 6) == 3
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookBackNPartFromAtoB(listToContainer({2, 2, 2}), 2, 1, 6).nothing?()
        listToContainer({2, 2, 2, 2, 2, 2, "bbb"}).lookBackNPartFromAtoB(listToContainer({2, 2, 2}), 1, 2, 5) == 2
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookBackNPartFromAtoB(listToContainer({2, 2, 2}), 1, 0, 8) == 5
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookBackNPartFromAtoB(listToContainer({2, 2, 2}), 2, 0, 8) == 2
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookBackNPartFromAtoB(listToContainer({2, 2, 2}), 3, 0, 8).nothing?()
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookBackNPartFromAtoB(listToContainer({2, 2, 2}), 1, 1, 7) == 4
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookBackNPartFromAtoB(listToContainer({2, 2, 2}), 2, 1, 7) == 1
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).lookBackNPartFromAtoB(listToContainer({2, 2, 2}), 3, 1, 7).nothing?()

#noinline
def testContainer_LookBackAnyPart(write ok Int, write errorsCoordinates List)
    var c <>Container = nothing
    test: ok, errorsCoordinates
        listToContainer({}).lookBackAnyPart([listToContainer({1, 2}), listToContainer({23})], c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyPart([listToContainer({1, 2})], c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyPart([listToContainer({nothing})], c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyPart([{nothing}], c) : eid_invalidType
        c.nothing?()
        listToContainer({1}).lookBackAnyPart([listToContainer({1})], c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPart([listToContainer({1}), listToContainer({2})], c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPart([listToContainer({2}), listToContainer({1})], c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPart([listToContainer({1}), listToContainer({1})], c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPart([listToContainer({2}), listToContainer({0})], c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPart([listToContainer({0})], c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPart([listToContainer({1, 2})], c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPart([listToContainer({2, 1})], c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPart([{12}], c) : eid_invalidType
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyPart([listToContainer({0}), listToContainer({1})], c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyPart([listToContainer({1}), listToContainer({0})], c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyPart([listToContainer({1, 2}), listToContainer({0})], c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyPart([listToContainer({0}), listToContainer({1, 2})], c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyPart([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyPart([{12}], c) : eid_invalidType
        c == listToContainer({1, 2})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyPart([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], c) == 0
        c == listToContainer({1, 2, 3})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyPart([listToContainer({0, 2, 3}), listToContainer({4, 'a'}), listToContainer({1, 1, 2})], c) == 3
        c == listToContainer({4, 'a'})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyPart([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})], c) == 5
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyPart([listToContainer({2, 3, 4, 4}), listToContainer({4, 'b', nothing}), listToContainer({12, "bbbb"})], c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyPart([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})], c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyPart([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bb"})], c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyPart([listToContainer({4}), listToContainer({2, 3}), listToContainer({12, "bb"})], c) == 4
        c == listToContainer({4})
        listToContainer({}).lookBackAnyPart([], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({}).lookBackAnyPart([listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({}).lookBackAnyPart([listToContainer({}), listToContainer({12})], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({}).lookBackAnyPart([listToContainer({12}), listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({12}).lookBackAnyPart([], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({12}).lookBackAnyPart([listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({12}).lookBackAnyPart([listToContainer({}), listToContainer({12})], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({12}).lookBackAnyPart([listToContainer({12}), listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({1, 12}).lookBackAnyPart([], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({1, 12}).lookBackAnyPart([listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({1, 12}).lookBackAnyPart([listToContainer({}), listToContainer({12})], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({1, 12}).lookBackAnyPart([listToContainer({12}), listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({12, 1}).lookBackAnyPart([], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({12, 1}).lookBackAnyPart([listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({12, 1}).lookBackAnyPart([listToContainer({}), listToContainer({12})], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({12, 1}).lookBackAnyPart([listToContainer({12}), listToContainer({})], c) : eid_nothingToLook
        c == listToContainer({4})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookBackAnyPart([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], c) == 5
        c == listToContainer({1, 7})
        listToContainer({2, 2, 2, 2, 2, 2}).lookBackAnyPart([listToContainer({2, 2, 2})], c) == 3
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2}).lookBackAnyPart([listToContainer({2, 2, 2})], c) == 2
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 1, 2}).lookBackAnyPart([listToContainer({2, 2, 2, 1}), listToContainer({2, 2, 2})], c) == 1
        c == listToContainer({2, 2, 2, 1})
        listToContainer({2, 2, 2, 2, 1, 2}).lookBackAnyPart([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 1})], c) == 1
        c == listToContainer({2, 2, 2})

#noinline
def testContainer_LookBackAnyNPart(write ok Int, write errorsCoordinates List)
    var c <>Container = nothing
    test: ok, errorsCoordinates
        listToContainer({}).lookBackAnyNPart([listToContainer({1, 2}), listToContainer({23})], 1, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPart([listToContainer({1, 2}), listToContainer({23})], 2, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPart([listToContainer({1, 2})], 1, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPart([listToContainer({1, 2})], 2, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPart([listToContainer({1, 2})], 9223372036854775807, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPart([listToContainer({1, 2})], 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPart([listToContainer({1, 2})], -1, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPart([listToContainer({1, 2})], -9223372036854775808, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPart([listToContainer({nothing})], 1, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPart([listToContainer({nothing})], 2, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPart([{nothing}], 1, c) : eid_invalidType
        c.nothing?()
        listToContainer({}).lookBackAnyNPart([{nothing}], 2, c) : eid_invalidType
        c.nothing?()
        listToContainer({1}).lookBackAnyNPart([listToContainer({1})], 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({1})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({1})], 9223372036854775807, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({1})], 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({1})], -1, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({1})], -9223372036854775808, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({1}), listToContainer({2})], 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({1}), listToContainer({2})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({2}), listToContainer({1})], 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({2}), listToContainer({1})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({1}), listToContainer({1})], 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({1}), listToContainer({1})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({2}), listToContainer({0})], 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({2}), listToContainer({0})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({0})], 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({0})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({1, 2})], 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({1, 2})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({2, 1})], 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([listToContainer({2, 1})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPart([{12}], 1, c) : eid_invalidType
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyNPart([listToContainer({0}), listToContainer({1})], 1, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyNPart([listToContainer({0}), listToContainer({1})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyNPart([listToContainer({1}), listToContainer({0})], 1, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyNPart([listToContainer({1}), listToContainer({0})], 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyNPart([listToContainer({1, 2}), listToContainer({0})], 1, c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyNPart([listToContainer({1, 2}), listToContainer({0})], 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyNPart([listToContainer({0}), listToContainer({1, 2})], 1, c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyNPart([listToContainer({0}), listToContainer({1, 2})], 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyNPart([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 1, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyNPart([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyNPart([{12}], 1, c) : eid_invalidType
        c == listToContainer({1, 2})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 1, c) == 0
        c == listToContainer({1, 2, 3})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({0, 2, 3}), listToContainer({4, 'a'}), listToContainer({1, 1, 2})], 1, c) == 3
        c == listToContainer({4, 'a'})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})], 1, c) == 5
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3, 4, 4}), listToContainer({4, 'b', nothing}), listToContainer({12, "bbbb"})], 1, c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 1, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 2, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 1, c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 2, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 3, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})], 1, c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})], 2, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})], 3, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})], 4, c).nothing?()
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 1, c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 2, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 3, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 4, c) == 1
        c == listToContainer({2, 3})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPart([listToContainer({4}), listToContainer({2, 3}), listToContainer({12, "bbb"})], 5, c).nothing?()
        c == listToContainer({2, 3})
        listToContainer({}).lookBackAnyNPart([], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookBackAnyNPart([listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookBackAnyNPart([listToContainer({}), listToContainer({12})], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookBackAnyNPart([listToContainer({12}), listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyNPart([], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyNPart([listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyNPart([listToContainer({}), listToContainer({12})], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyNPart([listToContainer({12}), listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookBackAnyNPart([], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookBackAnyNPart([listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookBackAnyNPart([listToContainer({}), listToContainer({12})], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookBackAnyNPart([listToContainer({12}), listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookBackAnyNPart([], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookBackAnyNPart([listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookBackAnyNPart([listToContainer({}), listToContainer({12})], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookBackAnyNPart([listToContainer({12}), listToContainer({})], 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookBackAnyNPart([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 1, c) == 5
        c == listToContainer({1, 7})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookBackAnyNPart([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 2, c) == 3
        c == listToContainer({1, 7})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookBackAnyNPart([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 3, c) == 2
        c == listToContainer({3})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookBackAnyNPart([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 4, c).nothing?()
        c == listToContainer({3})
        listToContainer({2, 2, 2, 2, 2, 2}).lookBackAnyNPart([listToContainer({2, 2, 2})], 1, c) == 3
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2, 2}).lookBackAnyNPart([listToContainer({2, 2, 2})], 2, c) == 0
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2, 2}).lookBackAnyNPart([listToContainer({2, 2, 2})], 3, c).nothing?()
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2}).lookBackAnyNPart([listToContainer({2, 2, 2})], 1, c) == 2
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2}).lookBackAnyNPart([listToContainer({2, 2, 2})], 2, c).nothing?()
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 1, 2}).lookBackAnyNPart([listToContainer({2, 2, 2, 1}), listToContainer({2, 2, 2})], 1, c) == 1
        c == listToContainer({2, 2, 2, 1})
        listToContainer({2, 2, 2, 2, 1, 2}).lookBackAnyNPart([listToContainer({2, 2, 2, 1}), listToContainer({2, 2, 2})], 2, c).nothing?()
        c == listToContainer({2, 2, 2, 1})
        listToContainer({2, 2, 2, 2, 1, 2}).lookBackAnyNPart([listToContainer({2, 2}), listToContainer({2, 2, 1})], 1, c) == 2
        c == listToContainer({2, 2})
        listToContainer({2, 2, 2, 2, 1, 2}).lookBackAnyNPart([listToContainer({2, 2, 1}), listToContainer({2, 2})], 1, c) == 2
        c == listToContainer({2, 2, 1})
        listToContainer({2, 2, 2, 2, 1, 2}).lookBackAnyNPart([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2, 1})], 2, c).nothing?()
        c == listToContainer({2, 2, 1})

#noinline
def testContainer_LookBackAnyPartFromAtoB(write ok Int, write errorsCoordinates List)
    var c <>Container = nothing
    test: ok, errorsCoordinates
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({1, 2}), listToContainer({23})], 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({1, 2})], 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({1, 2})], 1, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({1, 2})], 9223372036854775807, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({1, 2})], -1, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({1, 2})], -9223372036854775808, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({1, 2})], 0, 1, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({1, 2})], 0, 9223372036854775807, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({1, 2})], 0, -1, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({1, 2})], 0, -9223372036854775808, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({nothing})], 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyPartFromAtoB([{nothing}], 0, 0, c) : eid_invalidType
        c.nothing?()
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1})], 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1})], 1, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1})], 2, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1})], 9223372036854775807, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1})], -1, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1})], -9223372036854775808, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1})], 0, 2, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1})], 0, 9223372036854775807, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1})], 0, -1, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1})], 0, -9223372036854775808, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1}), listToContainer({2})], 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1}), listToContainer({2})], 0, 0, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1}), listToContainer({2})], 1, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({2}), listToContainer({1})], 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1}), listToContainer({1})], 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({2}), listToContainer({0})], 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({0})], 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({1, 2})], 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([listToContainer({2, 1})], 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([{12}], 0, 0, c) : eid_invalidType
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyPartFromAtoB([{12}], 0, 1, c) : eid_invalidType
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyPartFromAtoB([listToContainer({0}), listToContainer({1})], 0, 2, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyPartFromAtoB([listToContainer({0}), listToContainer({1})], 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyPartFromAtoB([listToContainer({0}), listToContainer({1})], 1, 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyPartFromAtoB([listToContainer({1}), listToContainer({0})], 0, 2, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyPartFromAtoB([listToContainer({1, 2}), listToContainer({0})], 0, 2, c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyPartFromAtoB([listToContainer({0}), listToContainer({1, 2})], 0, 2, c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyPartFromAtoB([{12}], 0, 0, c) : eid_invalidType
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyPartFromAtoB([{12}], 0, 2, c) : eid_invalidType
        c == listToContainer({1, 2})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 0, 7, c) == 0
        c == listToContainer({1, 2, 3})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyPartFromAtoB([listToContainer({0, 2, 3}), listToContainer({4, 'a'}), listToContainer({1, 1, 2})], 0, 7, c) == 3
        c == listToContainer({4, 'a'})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyPartFromAtoB([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})], 0, 7, c) == 5
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyPartFromAtoB([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})], 0, 6, c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyPartFromAtoB([listToContainer({2, 3, 4, 4}), listToContainer({4, 'b', nothing}), listToContainer({12, "bbbb"})], 0, 7, c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 0, 8, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 0, 4, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 0, 8, c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyPartFromAtoB([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})], 0, 7, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyPartFromAtoB([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 0, 3, c) == 1
        c == listToContainer({2, 3})
        listToContainer({}).lookBackAnyPartFromAtoB([], 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({})], 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({}), listToContainer({12})], 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookBackAnyPartFromAtoB([listToContainer({12}), listToContainer({})], 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyPartFromAtoB([], 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyPartFromAtoB([], 0, 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyPartFromAtoB([listToContainer({})], 0, 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyPartFromAtoB([listToContainer({}), listToContainer({12})], 0, 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyPartFromAtoB([listToContainer({12}), listToContainer({})], 0, 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookBackAnyPartFromAtoB([], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookBackAnyPartFromAtoB([listToContainer({})], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookBackAnyPartFromAtoB([listToContainer({}), listToContainer({12})], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookBackAnyPartFromAtoB([listToContainer({12}), listToContainer({})], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookBackAnyPartFromAtoB([], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookBackAnyPartFromAtoB([listToContainer({})], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookBackAnyPartFromAtoB([listToContainer({}), listToContainer({12})], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookBackAnyPartFromAtoB([listToContainer({12}), listToContainer({})], 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookBackAnyPartFromAtoB([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 0, 7, c) == 5
        c == listToContainer({1, 7})
        listToContainer({2, 2, 2, 2, 2, 2}).lookBackAnyPartFromAtoB([listToContainer({2, 2, 2})], 0, 6, c) == 3
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2}).lookBackAnyPartFromAtoB([listToContainer({2, 2, 2})], 0, 5, c) == 2
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 1, 2}).lookBackAnyPartFromAtoB([listToContainer({2, 2, 2, 1}), listToContainer({2, 2, 2})], 0, 6, c) == 1
        c == listToContainer({2, 2, 2, 1})
        listToContainer({2, 2, 2, 2, 1, 2}).lookBackAnyPartFromAtoB([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 1})], 0, 6, c) == 1
        c == listToContainer({2, 2, 2})

#noinline
def testContainer_LookBackAnyNPartFromAtoB(write ok Int, write errorsCoordinates List)
    var c <>Container = nothing
    test: ok, errorsCoordinates
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2}), listToContainer({23})], 1, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2}), listToContainer({23})], 2, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 1, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 2, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 9223372036854775807, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 0, 0, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], -1, 0, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], -9223372036854775808, 0, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 1, 1, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 1, 9223372036854775807, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 1, -1, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 1, -9223372036854775808, 0, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 1, 0, 1, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 1, 0, 9223372036854775807, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 1, 0, -1, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 1, 0, -9223372036854775808, c) : eid_outOfRange
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({nothing})], 1, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({nothing})], 2, 0, 0, c).nothing?()
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([{nothing}], 1, 0, 0, c) : eid_invalidType
        c.nothing?()
        listToContainer({}).lookBackAnyNPartFromAtoB([{nothing}], 2, 0, 0, c) : eid_invalidType
        c.nothing?()
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 1, 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 1, 1, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 1, 2, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 1, 9223372036854775807, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 1, -1, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 1, -9223372036854775808, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 1, 0, 2, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 1, 0, 9223372036854775807, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 1, 0, -1, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 1, 0, -9223372036854775808, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 9223372036854775807, 0, 0, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 9223372036854775807, 1, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 9223372036854775807, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], 0, 0, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], -1, 0, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1})], -9223372036854775808, 0, 0, c) : eid_outOfRange
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1}), listToContainer({2})], 1, 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1}), listToContainer({2})], 1, 0, 0, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1}), listToContainer({2})], 1, 1, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1}), listToContainer({2})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({2}), listToContainer({1})], 1, 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({2}), listToContainer({1})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1}), listToContainer({1})], 1, 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1}), listToContainer({1})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({2}), listToContainer({0})], 1, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({2}), listToContainer({0})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({0})], 1, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({0})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 1, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({1, 2})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({2, 1})], 1, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([listToContainer({2, 1})], 2, 0, 1, c).nothing?()
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([{12}], 1, 0, 0, c) : eid_invalidType
        c == listToContainer({1})
        listToContainer({1}).lookBackAnyNPartFromAtoB([{12}], 1, 0, 1, c) : eid_invalidType
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([listToContainer({0}), listToContainer({1})], 1, 0, 2, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([listToContainer({0}), listToContainer({1})], 1, 0, 1, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([listToContainer({0}), listToContainer({1})], 1, 1, 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([listToContainer({0}), listToContainer({1})], 2, 0, 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([listToContainer({1}), listToContainer({0})], 1, 0, 2, c) == 0
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([listToContainer({1}), listToContainer({0})], 2, 0, 2, c).nothing?()
        c == listToContainer({1})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([listToContainer({1, 2}), listToContainer({0})], 1, 0, 2, c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([listToContainer({1, 2}), listToContainer({0})], 2, 0, 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([listToContainer({0}), listToContainer({1, 2})], 1, 0, 2, c) == 0
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([listToContainer({0}), listToContainer({1, 2})], 2, 0, 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 1, 0, 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 2, 0, 2, c).nothing?()
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([{12}], 1, 0, 0, c) : eid_invalidType
        c == listToContainer({1, 2})
        listToContainer({1, 2}).lookBackAnyNPartFromAtoB([{12}], 1, 0, 2, c) : eid_invalidType
        c == listToContainer({1, 2})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({1, 2, 3}), listToContainer({2, 1}), listToContainer({1, 1, 2})], 1, 0, 7, c) == 0
        c == listToContainer({1, 2, 3})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({0, 2, 3}), listToContainer({4, 'a'}), listToContainer({1, 1, 2})], 1, 0, 7, c) == 3
        c == listToContainer({4, 'a'})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})], 1, 0, 7, c) == 5
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({0, 2, 3}), listToContainer({4, 'b'}), listToContainer({12, "bbb"})], 1, 0, 6, c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({2, 3, 4, 4}), listToContainer({4, 'b', nothing}), listToContainer({12, "bbbb"})], 1, 0, 7, c).nothing?()
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 1, 0, 8, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 1, 0, 4, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbbb"})], 2, 0, 8, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 1, 0, 8, c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 2, 0, 8, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({2, 3, 4, 7}), listToContainer({4}), listToContainer({12, "bbb"})], 3, 0, 8, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({2, 3, 4, 4}), listToContainer({4}), listToContainer({12, "bbb"})], 1, 0, 8, c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({2, 3, 4, 4}), listToContainer({12, "bbb"})], 2, 0, 8, c) == 1
        c == listToContainer({2, 3, 4, 4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 1, 0, 8, c) == 6
        c == listToContainer({12, "bbb"})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 2, 0, 8, c) == 4
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 3, 0, 8, c) == 3
        c == listToContainer({4})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({2, 3}), listToContainer({4}), listToContainer({12, "bbb"})], 4, 0, 8, c) == 1
        c == listToContainer({2, 3})
        listToContainer({1, 2, 3, 4, 4, 'a', 12, "bbb"}).lookBackAnyNPartFromAtoB([listToContainer({4}), listToContainer({2, 3}), listToContainer({12, "bbb"})], 5, 0, 8, c).nothing?()
        c == listToContainer({2, 3})
        listToContainer({}).lookBackAnyNPartFromAtoB([], 1, 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({})], 1, 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({}), listToContainer({12})], 1, 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({}).lookBackAnyNPartFromAtoB([listToContainer({12}), listToContainer({})], 1, 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyNPartFromAtoB([], 1, 0, 0, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyNPartFromAtoB([], 1, 0, 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyNPartFromAtoB([], 2, 0, 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyNPartFromAtoB([listToContainer({})], 1, 0, 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyNPartFromAtoB([listToContainer({}), listToContainer({12})], 1, 0, 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12}).lookBackAnyNPartFromAtoB([listToContainer({12}), listToContainer({})], 1, 0, 1, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookBackAnyNPartFromAtoB([], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookBackAnyNPartFromAtoB([listToContainer({})], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookBackAnyNPartFromAtoB([listToContainer({}), listToContainer({12})], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 12}).lookBackAnyNPartFromAtoB([listToContainer({12}), listToContainer({})], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookBackAnyNPartFromAtoB([], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookBackAnyNPartFromAtoB([listToContainer({})], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookBackAnyNPartFromAtoB([listToContainer({}), listToContainer({12})], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({12, 1}).lookBackAnyNPartFromAtoB([listToContainer({12}), listToContainer({})], 1, 0, 2, c) : eid_nothingToLook
        c == listToContainer({2, 3})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookBackAnyNPartFromAtoB([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 1, 0, 7, c) == 5
        c == listToContainer({1, 7})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookBackAnyNPartFromAtoB([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 2, 0, 7, c) == 3
        c == listToContainer({1, 7})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookBackAnyNPartFromAtoB([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 3, 0, 7, c) == 2
        c == listToContainer({3})
        listToContainer({1, 2, 3, 1, 7, 1, 7}).lookBackAnyNPartFromAtoB([listToContainer({1, 7}), listToContainer({3, 1}), listToContainer({3})], 4, 0, 7, c).nothing?()
        c == listToContainer({3})
        listToContainer({2, 2, 2, 2, 2, 2}).lookBackAnyNPartFromAtoB([listToContainer({2, 2, 2})], 1, 0, 6, c) == 3
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2, 2}).lookBackAnyNPartFromAtoB([listToContainer({2, 2, 2})], 2, 0, 6, c) == 0
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2}).lookBackAnyNPartFromAtoB([listToContainer({2, 2, 2})], 1, 0, 5, c) == 2
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 2}).lookBackAnyNPartFromAtoB([listToContainer({2, 2, 2})], 2, 0, 5, c).nothing?()
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 1, 2}).lookBackAnyNPartFromAtoB([listToContainer({2, 2, 2, 1}), listToContainer({2, 2, 2})], 1, 0, 6, c) == 1
        c == listToContainer({2, 2, 2, 1})
        listToContainer({2, 2, 2, 2, 1, 2}).lookBackAnyNPartFromAtoB([listToContainer({2, 2, 2, 1}), listToContainer({2, 2, 2})], 2, 0, 6, c).nothing?()
        c == listToContainer({2, 2, 2, 1})
        listToContainer({2, 2, 2, 2, 1, 2}).lookBackAnyNPartFromAtoB([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 1})], 1, 0, 6, c) == 1
        c == listToContainer({2, 2, 2})
        listToContainer({2, 2, 2, 2, 1, 2}).lookBackAnyNPartFromAtoB([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 1})], 2, 0, 6, c).nothing?()
        c == listToContainer({2, 2, 2})

#noinline
def testContainer_RepackTo(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).repackTo(List) == {}
        listToContainer({}).repackTo(Array) == []
        listToContainer({}).repackTo(String) == ""
        listToContainer({}).repackTo(Container) == listToContainer({})
        listToContainer({1}).repackTo(List) == {1}
        listToContainer({1}).repackTo(Array) == [1]
        listToContainer({'1'}).repackTo(String) == "1"
        listToContainer({1}).repackTo(Container) == listToContainer({1})
        listToContainer({1, 'a'}).repackTo(List) == {1, 'a'}
        listToContainer({1, 2}).repackTo(Array) == [1, 2]
        listToContainer({'1', '2'}).repackTo(String) == "12"
        listToContainer({1, 2}).repackTo(Container) == listToContainer({1, 2})
        listToContainer({1, 'a', 1.0}).repackTo(List) == {1, 'a', 1.0}
        listToContainer({1, 2, 4}).repackTo(Array) == [1, 2, 4]
        listToContainer({'1', '2', 'a'}).repackTo(String) == "12a"
        listToContainer({1, 2, 3}).repackTo(Container) == listToContainer({1, 2, 3})

#noinline
def testContainer_Delete$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).delete$(0, 0) == listToContainer({})
        listToContainer({}).delete$(1, 0) : eid_outOfRange
        listToContainer({}).delete$(9223372036854775807, 0) : eid_outOfRange
        listToContainer({}).delete$(-1, 0) : eid_outOfRange
        listToContainer({}).delete$(-9223372036854775808, 0) : eid_outOfRange
        listToContainer({}).delete$(0, 1) : eid_outOfRange
        listToContainer({}).delete$(0, 9223372036854775807) : eid_outOfRange
        listToContainer({}).delete$(0, -1) : eid_outOfRange
        listToContainer({}).delete$(0, -9223372036854775808) : eid_outOfRange
        listToContainer({1}).delete$(0, 0) == listToContainer({1})
        listToContainer({1}).delete$(1, 0) == listToContainer({1})
        listToContainer({1}).delete$(0, 1) == listToContainer({})
        listToContainer({1}).delete$(1, 1) : eid_outOfRange
        listToContainer({1}).delete$(9223372036854775807, 0) : eid_outOfRange
        listToContainer({1}).delete$(-1, 0) : eid_outOfRange
        listToContainer({1}).delete$(-9223372036854775808, 0) : eid_outOfRange
        listToContainer({1}).delete$(0, 2) : eid_outOfRange
        listToContainer({1}).delete$(0, 9223372036854775807) : eid_outOfRange
        listToContainer({1}).delete$(0, -1) : eid_outOfRange
        listToContainer({1}).delete$(0, -9223372036854775808) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(0, 0) == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(0, 1) == listToContainer({2, 3, 4, 5, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(0, 2) == listToContainer({3, 4, 5, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(0, 9) == listToContainer({})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(0, 10) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(1, 0) == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(1, 1) == listToContainer({1, 3, 4, 5, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(1, 2) == listToContainer({1, 4, 5, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(1, 8) == listToContainer({1})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(1, 9) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(4, 0) == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(4, 1) == listToContainer({1, 2, 3, 4, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(4, 2) == listToContainer({1, 2, 3, 4, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(4, 5) == listToContainer({1, 2, 3, 4})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(4, 6) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(8, 0) == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(8, 1) == listToContainer({1, 2, 3, 4, 5, 6, 7, 8})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(8, 2) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(9, 0) == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).delete$(9, 1) : eid_outOfRange

#noinline
def testContainer_Delete(write ok Int, write errorsCoordinates List)
    var c1 Container = listToContainer({})
    var c2 Container = listToContainer({1})
    var c3 Container = listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
    var c4 Container = listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
    var c5 Container = listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
    var c6 Container = listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
    test: ok, errorsCoordinates
        c1.delete(0, 0).nothing?()
        c1 == listToContainer({})
        c1.delete(1, 0) : eid_outOfRange
        c1 == listToContainer({})
        c1.delete(9223372036854775807, 0) : eid_outOfRange
        c1 == listToContainer({})
        c1.delete(-1, 0) : eid_outOfRange
        c1 == listToContainer({})
        c1.delete(-9223372036854775808, 0) : eid_outOfRange
        c1 == listToContainer({})
        c1.delete(0, 1) : eid_outOfRange
        c1 == listToContainer({})
        c1.delete(0, 9223372036854775807) : eid_outOfRange
        c1 == listToContainer({})
        c1.delete(0, -1) : eid_outOfRange
        c1 == listToContainer({})
        c1.delete(0, -9223372036854775808) : eid_outOfRange
        c1 == listToContainer({})
        c2.delete(0, 0).nothing?()
        c2 == listToContainer({1})
        c2.delete(1, 0).nothing?()
        c2 == listToContainer({1})
        c2.delete(0, 2) : eid_outOfRange
        c2 == listToContainer({1})
        c2.delete(0, 9223372036854775807) : eid_outOfRange
        c2 == listToContainer({1})
        c2.delete(0, -1) : eid_outOfRange
        c2 == listToContainer({1})
        c2.delete(0, -9223372036854775807) : eid_outOfRange
        c2 == listToContainer({1})
        c2.delete(2, 0) : eid_outOfRange
        c2 == listToContainer({1})
        c2.delete(9223372036854775807, 0) : eid_outOfRange
        c2 == listToContainer({1})
        c2.delete(-1, 0) : eid_outOfRange
        c2 == listToContainer({1})
        c2.delete(-9223372036854775808, 0) : eid_outOfRange
        c2 == listToContainer({1})
        c3.delete(0, 10) : eid_outOfRange
        c3 == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        c3.delete(1, 9) : eid_outOfRange
        c3 == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        c3.delete(4, 6) : eid_outOfRange
        c3 == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        c3.delete(9, 1) : eid_outOfRange
        c3 == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        c3.delete(0, 0).nothing?()
        c3 == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        c3.delete(0, 1).nothing?()
        c3 == listToContainer({2, 3, 4, 5, 6, 7, 8, 9})
        c3.delete(0, 2).nothing?()
        c3 == listToContainer({4, 5, 6, 7, 8, 9})
        c3.delete(0, 6).nothing?()
        c3 == listToContainer({})
        c4.delete(1, 0).nothing?()
        c4 == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        c4.delete(1, 1).nothing?()
        c4 == listToContainer({1, 3, 4, 5, 6, 7, 8, 9})
        c4.delete(1, 2).nothing?()
        c4 == listToContainer({1, 5, 6, 7, 8, 9})
        c4.delete(1, 5).nothing?()
        c4 == listToContainer({1})
        c5.delete(4, 0).nothing?()
        c5 == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        c5.delete(4, 1).nothing?()
        c5 == listToContainer({1, 2, 3, 4, 6, 7, 8, 9})
        c5.delete(4, 2).nothing?()
        c5 == listToContainer({1, 2, 3, 4, 8, 9})
        c5.delete(4, 2).nothing?()
        c5 == listToContainer({1, 2, 3, 4})
        c6.delete(8, 0).nothing?()
        c6 == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        c6.delete(8, 1).nothing?()
        c6 == listToContainer({1, 2, 3, 4, 5, 6, 7, 8})
        c6.delete(8, 0).nothing?()
        c6 == listToContainer({1, 2, 3, 4, 5, 6, 7, 8})

#noinline
def testContainer_Replace$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).replace$(1, 0) == listToContainer({})
        listToContainer({}).replace$(1, nothing) == listToContainer({})
        listToContainer({1}).replace$(1, 0) == listToContainer({0})
        listToContainer({1}).replace$(1, 1.1) == listToContainer({1.1})
        listToContainer({1}).replace$(2, 0) == listToContainer({1})
        listToContainer({1}).replace$(1.1, 0) == listToContainer({1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replace$(1.1, 0) == listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replace$(1, 'k') == listToContainer({'k', 2, 'a', 34, "hekkk", 2, 'k'})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replace$(2, 1.0) == listToContainer({1, 1.0, 'a', 34, "hekkk", 1.0, 1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replace$("hekkk", "hec") == listToContainer({1, 2, 'a', 34, "hec", 2, 1})

#noinline
def testContainer_Replace(write ok Int, write errorsCoordinates List)
    var c1 Container = listToContainer({})
    var c2 Container = listToContainer({1})
    var c3 Container = listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
    test: ok, errorsCoordinates
        c1.replace(1, 0).nothing?()
        c1 == listToContainer({})
        c1.replace(1, nothing).nothing?()
        c1 == listToContainer({})
        c2.replace(1, 0).nothing?()
        c2 == listToContainer({0})
        c2.replace(0, 1.1).nothing?()
        c2 == listToContainer({1.1})
        c2.replace(2, 0).nothing?()
        c2 == listToContainer({1.1})
        c2.replace(2.0, 0).nothing?()
        c2 == listToContainer({1.1})
        c3.replace(1.1, 0).nothing?()
        c3  == listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
        c3.replace(1, 'k').nothing?()
        c3  == listToContainer({'k', 2, 'a', 34, "hekkk", 2, 'k'})
        c3.replace(2, 1.0).nothing?()
        c3  == listToContainer({'k', 1.0, 'a', 34, "hekkk", 1.0, 'k'})
        c3.replace("hekkk", "hec").nothing?()
        c3  == listToContainer({'k', 1.0, 'a', 34, "hec", 1.0, 'k'})

#noinline
def testContainer_ReplaceAny$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).replaceAny$({1}, 0) == listToContainer({})
        listToContainer({}).replaceAny$({0, 1}, 0) == listToContainer({})
        listToContainer({}).replaceAny$({nothing}, 0) == listToContainer({})
        listToContainer({}).replaceAny$({1, 'k'}, nothing) == listToContainer({})
        listToContainer({}).replaceAny$({}, nothing) : eid_nothingToLook
        listToContainer({1}).replaceAny$({1}, 0) == listToContainer({0})
        listToContainer({1}).replaceAny$({1, 1}, 0) == listToContainer({0})
        listToContainer({1}).replaceAny$({0, nothing, 1}, 0) == listToContainer({0})
        listToContainer({1}).replaceAny$({1, nothing, 0}, 0) == listToContainer({0})
        listToContainer({1}).replaceAny$({1, 1.1}, 1.1) == listToContainer({1.1})
        listToContainer({1}).replaceAny$({2, 0, 3, 4, 2}, 0) == listToContainer({1})
        listToContainer({1}).replaceAny$({1.1}, 0) == listToContainer({1})
        listToContainer({1}).replaceAny$({}, 0) : eid_nothingToLook
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAny$({1.1}, 0) == listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAny$({1.1, 12}, 0) == listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAny$({1, 15, 2}, 'k') == listToContainer({'k', 'k', 'a', 34, "hekkk", 'k', 'k'})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAny$({1, nothing, 2}, 'k') == listToContainer({'k', 'k', 'a', 34, "hekkk", 'k', 'k'})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAny$({-1, 2}, 1.0) == listToContainer({1, 1.0, 'a', 34, "hekkk", 1.0, 1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAny$({"hekkk", 34}, "hec") == listToContainer({1, 2, 'a', "hec", "hec", 2, 1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAny$({}, "hec") : eid_nothingToLook

#noinline
def testContainer_ReplaceAny(write ok Int, write errorsCoordinates List)
    var c1 Container = listToContainer({})
    var c2 Container = listToContainer({1})
    var c3 Container = listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
    test: ok, errorsCoordinates
        c1.replaceAny({1}, 0).nothing?()
        c1 == listToContainer({})
        c1.replaceAny({1, 0}, 0).nothing?()
        c1 == listToContainer({})
        c1.replaceAny({1}, nothing).nothing?()
        c1 == listToContainer({})
        c1.replaceAny({}, 1) : eid_nothingToLook
        c1 == listToContainer({})
        c1.replaceAny({nothing}, 1).nothing?()
        c1 == listToContainer({})
        c2.replaceAny({}, 3) : eid_nothingToLook
        c2 == listToContainer({1})
        c2.replaceAny({1}, 0).nothing?()
        c2 == listToContainer({0})
        c2.replaceAny({0, 0}, 1).nothing?()
        c2 == listToContainer({1})
        c2.replaceAny({1, nothing, 0}, 2).nothing?()
        c2 == listToContainer({2})
        c2.replaceAny({0, nothing, 2}, 1).nothing?()
        c2 == listToContainer({1})
        c2.replaceAny({1}, 1.1).nothing?()
        c2 == listToContainer({1.1})
        c2.replaceAny({2}, 0).nothing?()
        c2 == listToContainer({1.1})
        c2.replaceAny({2.0}, 0).nothing?()
        c2 == listToContainer({1.1})
        c3.replaceAny({}, 3) : eid_nothingToLook
        c3 == listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
        c3.replaceAny({1.1}, 0).nothing?()
        c3  == listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
        c3.replaceAny({1, nothing, 2}, 'k').nothing?()
        c3  == listToContainer({'k', 'k', 'a', 34, "hekkk", 'k', 'k'})
        c3.replaceAny({34}, 1.0).nothing?()
        c3  == listToContainer({'k', 'k', 'a', 1.0, "hekkk", 'k', 'k'})
        c3.replaceAny({nothing, "hekkk"}, "hec").nothing?()
        c3  == listToContainer({'k', 'k', 'a', 1.0, "hec", 'k', 'k'})

#noinline
def testContainer_ReplacePart$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).replacePart$(listToContainer({}), listToContainer({0})) : eid_nothingToLook
        listToContainer({}).replacePart$(listToContainer({1}), listToContainer({0})) == listToContainer({})
        listToContainer({}).replacePart$(listToContainer({1, 2}), listToContainer({})) == listToContainer({})
        listToContainer({}).replacePart$(listToContainer({1, 2}), listToContainer({nothing})) == listToContainer({})
        listToContainer({}).replacePart$(listToContainer({nothing}), listToContainer({0})) == listToContainer({})
        listToContainer({1}).replacePart$(listToContainer({1}), listToContainer({})) == listToContainer({})
        listToContainer({1}).replacePart$(listToContainer({1}), listToContainer({1, 2, 3})) == listToContainer({1, 2, 3})
        listToContainer({1}).replacePart$(listToContainer({}), listToContainer({0})) : eid_nothingToLook
        listToContainer({1}).replacePart$(listToContainer({0, 2, 'k'}), listToContainer({0})) == listToContainer({1})
        listToContainer({1}).replacePart$(listToContainer({nothing}), listToContainer({0})) == listToContainer({1})
        listToContainer({1}).replacePart$(listToContainer({23}), listToContainer({nothing})) == listToContainer({1})
        listToContainer({1}).replacePart$(listToContainer({1, 1}), listToContainer({1.1})) == listToContainer({1})
        listToContainer({1}).replacePart$(listToContainer({nothing, 1}), listToContainer({0})) == listToContainer({1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replacePart$(listToContainer({}), listToContainer({1})) : eid_nothingToLook
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replacePart$(listToContainer({1.1}), listToContainer({1, 2, 'l'})) == listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replacePart$(listToContainer({2, 'a'}), listToContainer({2, 'f', 0.0})) == listToContainer({1, 2, 'f', 0.0, 34, "hekkk", 2, 1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replacePart$(listToContainer({2, 1}), listToContainer({1.0})) == listToContainer({1, 2, 'a', 34, "hekkk", 1.0})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replacePart$(listToContainer({"hekkk"}), listToContainer({"hec"})) == listToContainer({1, 2, 'a', 34, "hec", 2, 1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replacePart$(listToContainer({1, 2}), listToContainer({})) == listToContainer({'a', 34, "hekkk", 2, 1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replacePart$(listToContainer({2, 1}), listToContainer({})) == listToContainer({1, 2, 'a', 34, "hekkk"})
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).replacePart$(listToContainer({2, 2, 2, 2}), listToContainer({1})) == listToContainer({1, 1})
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2, 2}).replacePart$(listToContainer({2, 2, 2, 2}), listToContainer({1})) == listToContainer({1, 1, 2})
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}).replacePart$(listToContainer({2, 2, 2, 2}), listToContainer({1})) == listToContainer({1, 1, 2, 2, 2})
        listToContainer({2, 2, 2}).replacePart$(listToContainer({2, 2}), listToContainer({2})) == listToContainer({2, 2})

#noinline
def testContainer_ReplacePart(write ok Int, write errorsCoordinates List)
    var c1 Container = listToContainer({})
    var c2 Container = listToContainer({1})
    var c3 Container = listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
    var c4 Container = listToContainer({2, 2, 2, 2, 2, 2, 2, 2})
    var c5 Container = listToContainer({2, 2, 2, 2, 2, 2, 2, 2, 2})
    var c6 Container = listToContainer({2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2})
    var c7 Container = listToContainer({2, 2, 2})
    test: ok, errorsCoordinates
        c1.replacePart(listToContainer({}), listToContainer({0})) : eid_nothingToLook
        c1 == listToContainer({})
        c1.replacePart(listToContainer({1}), listToContainer({0})).nothing?()
        c1 == listToContainer({})
        c1.replacePart(listToContainer({1, 2}), listToContainer({})).nothing?()
        c1 == listToContainer({})
        c1.replacePart(listToContainer({1, 2}), listToContainer({nothing})).nothing?()
        c1 == listToContainer({})
        c1.replacePart(listToContainer({nothing}), listToContainer({0})).nothing?()
        c1 == listToContainer({})
        c2.replacePart(listToContainer({1}), listToContainer({1, 2, 3})).nothing?()
        c2 == listToContainer({1, 2, 3})
        c2.replacePart(listToContainer({}), listToContainer({0})) : eid_nothingToLook
        c2 == listToContainer({1, 2, 3})
        c2.replacePart(listToContainer({2, 3, 'k'}), listToContainer({0})).nothing?()
        c2 == listToContainer({1, 2, 3})
        c2.replacePart(listToContainer({nothing}), listToContainer({0})).nothing?()
        c2 == listToContainer({1, 2, 3})
        c2.replacePart(listToContainer({2, 3}), listToContainer({0, 1})).nothing?()
        c2 == listToContainer({1, 0, 1})
        c2.replacePart(listToContainer({1, 1}), listToContainer({1.1})).nothing?()
        c2 == listToContainer({1, 0, 1})
        c2.replacePart(listToContainer({nothing, 1}), listToContainer({0})).nothing?()
        c2 == listToContainer({1, 0, 1})
        c2.replacePart(listToContainer({1}), listToContainer({})).nothing?()
        c2 == listToContainer({0})
        c3.replacePart(listToContainer({}), listToContainer({2})) : eid_nothingToLook
        c3 == listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
        c3.replacePart(listToContainer({1.1}), listToContainer({1, 2, 'l'})).nothing?()
        c3 == listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
        c3.replacePart(listToContainer({2, 'a'}), listToContainer({2, 'f', 0.0})).nothing?()
        c3 == listToContainer({1, 2, 'f', 0.0, 34, "hekkk", 2, 1})
        c3.replacePart(listToContainer({2, 1}), listToContainer({1.0})).nothing?()
        c3 == listToContainer({1, 2, 'f', 0.0, 34, "hekkk", 1.0})
        c3.replacePart(listToContainer({"hekkk"}), listToContainer({"hec"})).nothing?()
        c3 == listToContainer({1, 2, 'f', 0.0, 34, "hec", 1.0})
        c3.replacePart(listToContainer({1, 2}), listToContainer({})).nothing?()
        c3 == listToContainer({'f', 0.0, 34, "hec", 1.0})
        c3.replacePart(listToContainer({0.0, 34}), listToContainer({0})).nothing?()
        c3 == listToContainer({'f', 0, "hec", 1.0})
        c4.replacePart(listToContainer({2, 2, 2, 2}), listToContainer({1})).nothing?()
        c4 == listToContainer({1, 1})
        c5.replacePart(listToContainer({2, 2, 2, 2}), listToContainer({1})).nothing?()
        c5 == listToContainer({1, 1, 2})
        c6.replacePart(listToContainer({2, 2, 2, 2}), listToContainer({1})).nothing?()
        c6 == listToContainer({1, 1, 2, 2, 2})
        c7.replacePart(listToContainer({2, 2}), listToContainer({2})).nothing?()
        c7 == listToContainer({2, 2})

#noinline
def testContainer_ReplaceAnyPart$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).replaceAnyPart$([], listToContainer({0})) : eid_nothingToLook
        listToContainer({}).replaceAnyPart$([listToContainer({})], listToContainer({0})) : eid_nothingToLook
        listToContainer({}).replaceAnyPart$([listToContainer({}), listToContainer({1})], listToContainer({0})) : eid_nothingToLook
        listToContainer({}).replaceAnyPart$([listToContainer({1})], listToContainer({0})) == listToContainer({})
        listToContainer({}).replaceAnyPart$([listToContainer({1, 2})], listToContainer({})) == listToContainer({})
        listToContainer({}).replaceAnyPart$([{1}], listToContainer({})) : eid_invalidType
        listToContainer({}).replaceAnyPart$([listToContainer({1, 2})], listToContainer({nothing})) == listToContainer({})
        listToContainer({}).replaceAnyPart$([listToContainer({nothing})], listToContainer({0})) == listToContainer({})
        listToContainer({1}).replaceAnyPart$([listToContainer({1})], listToContainer({})) == listToContainer({})
        listToContainer({1}).replaceAnyPart$([listToContainer({1}), listToContainer({0})], listToContainer({1, 2, 3})) == listToContainer({1, 2, 3})
        listToContainer({1}).replaceAnyPart$([listToContainer({0}), listToContainer({1})], listToContainer({1, 2, 3})) == listToContainer({1, 2, 3})
        listToContainer({1}).replaceAnyPart$([listToContainer({})], listToContainer({0})) : eid_nothingToLook
        listToContainer({1}).replaceAnyPart$([], listToContainer({0})) : eid_nothingToLook
        listToContainer({1}).replaceAnyPart$([{1}], listToContainer({0})) : eid_invalidType
        listToContainer({1}).replaceAnyPart$([listToContainer({0, 2, 'k'})], listToContainer({0})) == listToContainer({1})
        listToContainer({1}).replaceAnyPart$([listToContainer({nothing})], listToContainer({0})) == listToContainer({1})
        listToContainer({1}).replaceAnyPart$([listToContainer({23})], listToContainer({nothing})) == listToContainer({1})
        listToContainer({1}).replaceAnyPart$([listToContainer({1, 1})], listToContainer({1.1})) == listToContainer({1})
        listToContainer({1}).replaceAnyPart$([listToContainer({nothing, 1})], listToContainer({0})) == listToContainer({1})
        listToContainer({1}).replaceAnyPart$([listToContainer({nothing, 1}), listToContainer({1})], listToContainer({0})) == listToContainer({0})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAnyPart$([listToContainer({})], listToContainer({1})) : eid_nothingToLook
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAnyPart$([], listToContainer({1})) : eid_nothingToLook
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAnyPart$([{2}], listToContainer({1})) : eid_invalidType
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAnyPart$([listToContainer({1.1})], listToContainer({1, 2, 'l'})) == listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAnyPart$([listToContainer({2, 'a'})], listToContainer({2, 'f', 0.0})) == listToContainer({1, 2, 'f', 0.0, 34, "hekkk", 2, 1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAnyPart$([listToContainer({2, 1}), listToContainer({34, "hekkk"})], listToContainer({1.0})) == listToContainer({1, 2, 'a', 1.0, 1.0})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAnyPart$([listToContainer({"hekkk"}), listToContainer({'a'})], listToContainer({""})) == listToContainer({1, 2, "", 34, "", 2, 1})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAnyPart$([listToContainer({1, 2}), listToContainer({1})], listToContainer({})) == listToContainer({'a', 34, "hekkk", 2})
        listToContainer({1, 2, 'a', 34, "hekkk", 2, 1}).replaceAnyPart$([listToContainer({2, 1})], listToContainer({})) == listToContainer({1, 2, 'a', 34, "hekkk"})
        listToContainer({1, 2, 3}).replaceAnyPart$([listToContainer({1, 2}), listToContainer({2, 3})], listToContainer({2})) == listToContainer({2, 3})
        listToContainer({1, 2, 3}).replaceAnyPart$([listToContainer({1, 2}), listToContainer({1, 2, 3})], listToContainer({0})) == listToContainer({0, 3})
        listToContainer({1, 2, 3}).replaceAnyPart$([listToContainer({1, 2, 3}), listToContainer({1, 2})], listToContainer({0})) == listToContainer({0})

#noinline
def testContainer_ReplaceAnyPart(write ok Int, write errorsCoordinates List)
    var c1 Container = listToContainer({})
    var c2 Container = listToContainer({1})
    var c3 Container = listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
    test: ok, errorsCoordinates
        c1.replaceAnyPart([], listToContainer({0})) : eid_nothingToLook
        c1 == listToContainer({})
        c1.replaceAnyPart([listToContainer({})], listToContainer({0})) : eid_nothingToLook
        c1 == listToContainer({})
        c1.replaceAnyPart([listToContainer({}), listToContainer({1})], listToContainer({0})) : eid_nothingToLook
        c1 == listToContainer({})
        c1.replaceAnyPart([listToContainer({1})], listToContainer({0})).nothing?()
        c1 == listToContainer({})
        c1.replaceAnyPart([listToContainer({1, 2})], listToContainer({})).nothing?()
        c1 == listToContainer({})
        c1.replaceAnyPart([{1}], listToContainer({})) : eid_invalidType
        c1 == listToContainer({})
        c1.replaceAnyPart([listToContainer({1, 2})], listToContainer({nothing})).nothing?()
        c1 == listToContainer({})
        c1.replaceAnyPart([listToContainer({nothing})], listToContainer({0})).nothing?()
        c1 == listToContainer({})
        c2.replaceAnyPart([listToContainer({})], listToContainer({0})) : eid_nothingToLook
        c2 == listToContainer({1})
        c2.replaceAnyPart([], listToContainer({0})) : eid_nothingToLook
        c2 == listToContainer({1})
        c2.replaceAnyPart([{1}], listToContainer({0})) : eid_invalidType
        c2 == listToContainer({1})
        c2.replaceAnyPart([listToContainer({0, 2, 'k'})], listToContainer({0})).nothing?()
        c2 == listToContainer({1})
        c2.replaceAnyPart([listToContainer({nothing})], listToContainer({0})).nothing?()
        c2 == listToContainer({1})
        c2.replaceAnyPart([listToContainer({23})], listToContainer({nothing})).nothing?()
        c2 == listToContainer({1})
        c2.replaceAnyPart([listToContainer({1, 1})], listToContainer({1.1})).nothing?()
        c2 == listToContainer({1})
        c2.replaceAnyPart([listToContainer({nothing, 1})], listToContainer({0})).nothing?()
        c2 == listToContainer({1})
        c2.replaceAnyPart([listToContainer({nothing, 1}), listToContainer({1})], listToContainer({0})).nothing?()
        c2 == listToContainer({0})
        c2.replaceAnyPart([listToContainer({0}), listToContainer({1})], listToContainer({1, 2, 3})).nothing?()
        c2 == listToContainer({1, 2, 3})
        c2.replaceAnyPart([listToContainer({2}), listToContainer({1, 2, 3})], listToContainer({3})).nothing?()
        c2 == listToContainer({3})
        c2.replaceAnyPart([listToContainer({3})], listToContainer({})).nothing?()
        c2 == listToContainer({})
        c3.replaceAnyPart([], listToContainer({1})) : eid_nothingToLook
        c3 == listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
        c3.replaceAnyPart([{2}], listToContainer({1})) : eid_invalidType
        c3 == listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
        c3.replaceAnyPart([listToContainer({1.1})], listToContainer({1, 2, 'l'})).nothing?()
        c3 == listToContainer({1, 2, 'a', 34, "hekkk", 2, 1})
        c3.replaceAnyPart([listToContainer({2, 'a'})], listToContainer({2, 'f', 0.0})).nothing?()
        c3 == listToContainer({1, 2, 'f', 0.0, 34, "hekkk", 2, 1})
        c3.replaceAnyPart([listToContainer({2, 1}), listToContainer({34, "hekkk"})], listToContainer({1.0})).nothing?()
        c3 == listToContainer({1, 2, 'f', 0.0, 1.0, 1.0})
        c3.replaceAnyPart([listToContainer({"hekkk"}), listToContainer({'f'})], listToContainer({""})).nothing?()
        c3== listToContainer({1, 2, "", 0.0, 1.0, 1.0})
        c3.replaceAnyPart([listToContainer({1, 2}), listToContainer({1})], listToContainer({})).nothing?()
        c3 == listToContainer({"", 0.0, 1.0, 1.0})
        c3.replaceAnyPart([listToContainer({"", 0.0, 1.0, 1.0})], listToContainer({1, 2, 3})).nothing?()
        c3 == listToContainer({1, 2, 3})
        c3.replaceAnyPart([listToContainer({1, 2}), listToContainer({2, 3})], listToContainer({2})).nothing?()
        c3 == listToContainer({2, 3})
        c3.replaceAnyPart([listToContainer({2}), listToContainer({2, 3})], listToContainer({1, 2})).nothing?()
        c3 == listToContainer({1, 2, 3})
        c3.replaceAnyPart([listToContainer({1, 2}), listToContainer({1, 2, 3})], listToContainer({0})).nothing?()
        c3 == listToContainer({0, 3})
        c3.replaceAnyPart([listToContainer({0, 3}), listToContainer({0})], listToContainer({1, 2, 3})).nothing?()
        c3 == listToContainer({1, 2, 3})
        c3.replaceAnyPart([listToContainer({1, 2, 3}), listToContainer({1, 2})], listToContainer({0})).nothing?()
        c3 == listToContainer({0})

#noinline
def testContainer_Split(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).split('a') == [listToContainer({})]
        listToContainer({1}).split('a') == [listToContainer({1})]
        listToContainer({1}).split(1) == [listToContainer({}), listToContainer({})]
        listToContainer({1, 1}).split('a') == [listToContainer({1, 1})]
        listToContainer({1, 1}).split(1) == [listToContainer({}), listToContainer({}), listToContainer({})]
        listToContainer({1, 2, 1}).split(1) == [listToContainer({}), listToContainer({2}), listToContainer({})]
        listToContainer({1, 2, 1}).split(2) == [listToContainer({1}), listToContainer({1})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).split(1) == [listToContainer({}), listToContainer({2, 'f', 3, 3, 'f', 2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).split(2) == [listToContainer({1}), listToContainer({'f', 3, 3, 'f'}), listToContainer({0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).split('f') == [listToContainer({1, 2}), listToContainer({3, 3}), listToContainer({2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).split(3) == [listToContainer({1, 2, 'f'}), listToContainer({}), listToContainer({'f', 2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).split(7) == [listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0}), listToContainer({})]

#noinline
def testContainer_SplitByPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).splitByPart(listToContainer({})) : eid_nothingToLook
        listToContainer({}).splitByPart(listToContainer({'a'})) == [listToContainer({})]
        listToContainer({}).splitByPart(listToContainer({'a', 2})) == [listToContainer({})]
        listToContainer({1}).splitByPart(listToContainer({'a', 2})) == [listToContainer({1})]
        listToContainer({1}).splitByPart(listToContainer({1, 1})) == [listToContainer({1})]
        listToContainer({1}).splitByPart(listToContainer({1, 2})) == [listToContainer({1})]
        listToContainer({1}).splitByPart(listToContainer({1, nothing})) == [listToContainer({1})]
        listToContainer({1}).splitByPart(listToContainer({nothing, 1})) == [listToContainer({1})]
        listToContainer({1}).splitByPart(listToContainer({1})) == [listToContainer({}), listToContainer({})]
        listToContainer({1, 1}).splitByPart(listToContainer({'a'})) == [listToContainer({1, 1})]
        listToContainer({1, 1}).splitByPart(listToContainer({1, 2})) == [listToContainer({1, 1})]
        listToContainer({1, 1}).splitByPart(listToContainer({1, nothing})) == [listToContainer({1, 1})]
        listToContainer({1, 1}).splitByPart(listToContainer({nothing, 1})) == [listToContainer({1, 1})]
        listToContainer({1, 1}).splitByPart(listToContainer({1, 1})) == [listToContainer({}), listToContainer({})]
        listToContainer({1, 1}).splitByPart(listToContainer({1})) == [listToContainer({}), listToContainer({}), listToContainer({})]
        listToContainer({1, 2, 1}).splitByPart(listToContainer({1})) == [listToContainer({}), listToContainer({2}), listToContainer({})]
        listToContainer({1, 2, 1}).splitByPart(listToContainer({1, 2})) == [listToContainer({}), listToContainer({1})]
        listToContainer({1, 2, 1}).splitByPart(listToContainer({2, 1})) == [listToContainer({1}), listToContainer({})]
        listToContainer({1, 2, 1}).splitByPart(listToContainer({2})) == [listToContainer({1}), listToContainer({1})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByPart(listToContainer({1})) == [listToContainer({}), listToContainer({2, 'f', 3, 3, 'f', 2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByPart(listToContainer({2})) == [listToContainer({1}), listToContainer({'f', 3, 3, 'f'}), listToContainer({0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByPart(listToContainer({'f'})) == [listToContainer({1, 2}), listToContainer({3, 3}), listToContainer({2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByPart(listToContainer({3})) == [listToContainer({1, 2, 'f'}), listToContainer({}), listToContainer({'f', 2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByPart(listToContainer({7})) == [listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0}), listToContainer({})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByPart(listToContainer({2, 7})) == [listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByPart(listToContainer({2, 0, 7})) == [listToContainer({1, 2, 'f', 3, 3, 'f'}), listToContainer({})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByPart(listToContainer({2, 'f'})) == [listToContainer({1}), listToContainer({3, 3, 'f', 2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByPart(listToContainer({1, 2, 'f'})) == [listToContainer({}), listToContainer({3, 3, 'f', 2, 0, 7})]
        listToContainer({2, 2, 2, 2, 2, 2}).splitByPart(listToContainer({2, 2, 2})) == [listToContainer({}), listToContainer({}), listToContainer({})]
        listToContainer({2, 2, 2, 2, 2, 2, 2}).splitByPart(listToContainer({2, 2, 2})) == [listToContainer({}), listToContainer({}), listToContainer({2})]
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).splitByPart(listToContainer({2, 2, 2})) == [listToContainer({}), listToContainer({}), listToContainer({2, 2})]
        listToContainer({2, 2, 2, 1, 2, 2, 2}).splitByPart(listToContainer({2, 2})) == [listToContainer({}), listToContainer({2, 1}), listToContainer({2})]
        listToContainer({2, 2, 2, 1, 2, 2, 2}).splitByPart(listToContainer({})) : eid_nothingToLook

#noinline
def testContainer_SplitByAny(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).splitByAny({}) : eid_nothingToLook
        listToContainer({}).splitByAny({'a'}) == [listToContainer({})]
        listToContainer({}).splitByAny({'a', nothing}) == [listToContainer({})]
        listToContainer({}).splitByAny({nothing, 'a'}) == [listToContainer({})]
        listToContainer({}).splitByAny({'a', 1}) == [listToContainer({})]
        listToContainer({1}).splitByAny({'a'}) == [listToContainer({1})]
        listToContainer({1}).splitByAny({1}) == [listToContainer({}), listToContainer({})]
        listToContainer({1}).splitByAny({1, 2}) == [listToContainer({}), listToContainer({})]
        listToContainer({1}).splitByAny({2, 1}) == [listToContainer({}), listToContainer({})]
        listToContainer({1, 1}).splitByAny({'a'}) == [listToContainer({1, 1})]
        listToContainer({1, 1}).splitByAny({'a', 2}) == [listToContainer({1, 1})]
        listToContainer({1, 1}).splitByAny({1}) == [listToContainer({}), listToContainer({}), listToContainer({})]
        listToContainer({1, 1}).splitByAny({1, 1}) == [listToContainer({}), listToContainer({}), listToContainer({})]
        listToContainer({1, 1}).splitByAny({1, 2}) == [listToContainer({}), listToContainer({}), listToContainer({})]
        listToContainer({1, 1}).splitByAny({2, 1}) == [listToContainer({}), listToContainer({}), listToContainer({})]
        listToContainer({1, 2, 1}).splitByAny({1}) == [listToContainer({}), listToContainer({2}), listToContainer({})]
        listToContainer({1, 2, 1}).splitByAny({1, 1}) == [listToContainer({}), listToContainer({2}), listToContainer({})]
        listToContainer({1, 2, 1}).splitByAny({3, 1}) == [listToContainer({}), listToContainer({2}), listToContainer({})]
        listToContainer({1, 2, 1}).splitByAny({1, 3}) == [listToContainer({}), listToContainer({2}), listToContainer({})]
        listToContainer({1, 2, 1}).splitByAny({1, 2}) == [listToContainer({}), listToContainer({}), listToContainer({}), listToContainer({})]
        listToContainer({1, 2, 1}).splitByAny({2, 1}) == [listToContainer({}), listToContainer({}), listToContainer({}), listToContainer({})]
        listToContainer({1, 2, 1}).splitByAny({2}) == [listToContainer({1}), listToContainer({1})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAny({1}) == [listToContainer({}), listToContainer({2, 'f', 3, 3, 'f', 2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAny({2}) == [listToContainer({1}), listToContainer({'f', 3, 3, 'f'}), listToContainer({0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAny({'f'}) == [listToContainer({1, 2}), listToContainer({3, 3}), listToContainer({2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAny({3}) == [listToContainer({1, 2, 'f'}), listToContainer({}), listToContainer({'f', 2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAny({7}) == [listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0}), listToContainer({})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAny({1, 2}) == [listToContainer({}), listToContainer({}), listToContainer({'f', 3, 3, 'f'}), listToContainer({0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAny({2, 1}) == [listToContainer({}), listToContainer({}), listToContainer({'f', 3, 3, 'f'}), listToContainer({0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAny({1, 7}) == [listToContainer({}), listToContainer({2, 'f', 3, 3, 'f', 2, 0}), listToContainer({})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAny({1, nothing, 7}) == [listToContainer({}), listToContainer({2, 'f', 3, 3, 'f', 2, 0}), listToContainer({})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAny({}) : eid_nothingToLook

#noinline
def testContainer_SplitByAnyPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).splitByAnyPart([]) : eid_nothingToLook
        listToContainer({}).splitByAnyPart([{}]) : eid_invalidType
        listToContainer({}).splitByAnyPart([listToContainer({})]) : eid_nothingToLook
        listToContainer({}).splitByAnyPart([listToContainer({}), listToContainer({1})]) : eid_nothingToLook
        listToContainer({}).splitByAnyPart([listToContainer({1}), listToContainer({})]) : eid_nothingToLook
        listToContainer({}).splitByAnyPart([listToContainer({'a'})]) == [listToContainer({})]
        listToContainer({}).splitByAnyPart([listToContainer({'a', 2})]) == [listToContainer({})]
        listToContainer({}).splitByAnyPart([listToContainer({'a', 2}), listToContainer({'a', 2})]) == [listToContainer({})]
        listToContainer({1}).splitByAnyPart([listToContainer({'a', 2})]) == [listToContainer({1})]
        listToContainer({1}).splitByAnyPart([listToContainer({'a', 2}), listToContainer({'f'})]) == [listToContainer({1})]
        listToContainer({1}).splitByAnyPart([listToContainer({1, 1})]) == [listToContainer({1})]
        listToContainer({1}).splitByAnyPart([listToContainer({1, 2})]) == [listToContainer({1})]
        listToContainer({1}).splitByAnyPart([listToContainer({1, nothing})]) == [listToContainer({1})]
        listToContainer({1}).splitByAnyPart([listToContainer({nothing, 1})]) == [listToContainer({1})]
        listToContainer({1}).splitByAnyPart([listToContainer({1})]) == [listToContainer({}), listToContainer({})]
        listToContainer({1}).splitByAnyPart([listToContainer({1}), listToContainer({nothing})]) == [listToContainer({}), listToContainer({})]
        listToContainer({1}).splitByAnyPart([listToContainer({nothing}), listToContainer({1})]) == [listToContainer({}), listToContainer({})]
        listToContainer({1}).splitByAnyPart([listToContainer({1}), listToContainer({1})]) == [listToContainer({}), listToContainer({})]
        listToContainer({1, 1}).splitByAnyPart([listToContainer({'a'})]) == [listToContainer({1, 1})]
        listToContainer({1, 1}).splitByAnyPart([listToContainer({'a'}), listToContainer({1, 2})]) == [listToContainer({1, 1})]
        listToContainer({1, 1}).splitByAnyPart([listToContainer({1, 2})]) == [listToContainer({1, 1})]
        listToContainer({1, 1}).splitByAnyPart([listToContainer({1, nothing})]) == [listToContainer({1, 1})]
        listToContainer({1, 1}).splitByAnyPart([listToContainer({nothing, 1})]) == [listToContainer({1, 1})]
        listToContainer({1, 1}).splitByAnyPart([listToContainer({1, 1})]) == [listToContainer({}), listToContainer({})]
        listToContainer({1, 1}).splitByAnyPart([listToContainer({1, 1}), listToContainer({1})]) == [listToContainer({}), listToContainer({})]
        listToContainer({1, 1}).splitByAnyPart([listToContainer({1}), listToContainer({1, 1})]) == [listToContainer({}), listToContainer({}), listToContainer({})]
        listToContainer({1, 1}).splitByAnyPart([listToContainer({1})]) == [listToContainer({}), listToContainer({}), listToContainer({})]
        listToContainer({1, 2, 1}).splitByAnyPart([listToContainer({1})]) == [listToContainer({}), listToContainer({2}), listToContainer({})]
        listToContainer({1, 2, 1}).splitByAnyPart([listToContainer({1, 2})]) == [listToContainer({}), listToContainer({1})]
        listToContainer({1, 2, 1}).splitByAnyPart([listToContainer({2, 1})]) == [listToContainer({1}), listToContainer({})]
        listToContainer({1, 2, 1}).splitByAnyPart([listToContainer({2, 1}), listToContainer({1, 2})]) == [listToContainer({}), listToContainer({1})]
        listToContainer({1, 2, 1}).splitByAnyPart([listToContainer({1, 2}), listToContainer({2, 1})]) == [listToContainer({}), listToContainer({1})]
        listToContainer({1, 2, 1}).splitByAnyPart([listToContainer({2})]) == [listToContainer({1}), listToContainer({1})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([]) : eid_nothingToLook
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([{}]) : eid_invalidType
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({})]) : eid_nothingToLook
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({1}), listToContainer({})]) : eid_nothingToLook
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({}), listToContainer({1})]) : eid_nothingToLook
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({1})]) == [listToContainer({}), listToContainer({2, 'f', 3, 3, 'f', 2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({2})]) == [listToContainer({1}), listToContainer({'f', 3, 3, 'f'}), listToContainer({0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({'f'})]) == [listToContainer({1, 2}), listToContainer({3, 3}), listToContainer({2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({3})]) == [listToContainer({1, 2, 'f'}), listToContainer({}), listToContainer({'f', 2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({7})]) == [listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0}), listToContainer({})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({2, 7})]) == [listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({2, 0, 7})]) == [listToContainer({1, 2, 'f', 3, 3, 'f'}), listToContainer({})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({2, 'f'})]) == [listToContainer({1}), listToContainer({3, 3, 'f', 2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({2, 'f'}), listToContainer({3, 'f'})]) == [listToContainer({1}), listToContainer({3}), listToContainer({2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({3, 'f'}), listToContainer({2, 'f'})]) == [listToContainer({1}), listToContainer({3}), listToContainer({2, 0, 7})]
        listToContainer({1, 2, 'f', 3, 3, 'f', 2, 0, 7}).splitByAnyPart([listToContainer({1, 2, 'f'})]) == [listToContainer({}), listToContainer({3, 3, 'f', 2, 0, 7})]
        listToContainer({2, 2, 2, 2, 2, 2}).splitByAnyPart([listToContainer({2, 2, 2})]) == [listToContainer({}), listToContainer({}), listToContainer({})]
        listToContainer({2, 2, 2, 2, 2, 2, 2}).splitByAnyPart([listToContainer({2, 2, 2})]) == [listToContainer({}), listToContainer({}), listToContainer({2})]
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).splitByAnyPart([listToContainer({2, 2, 2})]) == [listToContainer({}), listToContainer({}), listToContainer({2, 2})]
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).splitByAnyPart([listToContainer({2, 2, 2}), listToContainer({2, 2, 2, 2})]) == [listToContainer({}), listToContainer({}), listToContainer({2, 2})]
        listToContainer({2, 2, 2, 2, 2, 2, 2, 2}).splitByAnyPart([listToContainer({2, 2, 2, 2}), listToContainer({2, 2, 2})]) == [listToContainer({}), listToContainer({}), listToContainer({})]
        listToContainer({2, 2, 2, 1, 2, 2, 2}).splitByAnyPart([listToContainer({2, 2})]) == [listToContainer({}), listToContainer({2, 1}), listToContainer({2})]

#noinline
def testContainer_Insert$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).insert$(1, 1) : eid_outOfRange
        listToContainer({}).insert$(9223372036854775807, 1) : eid_outOfRange
        listToContainer({}).insert$(-1, 1) : eid_outOfRange
        listToContainer({}).insert$(-9223372036854775808, 1) : eid_outOfRange
        listToContainer({}).insert$(0, 1) == listToContainer({1})
        listToContainer({1}).insert$(2, 1) : eid_outOfRange
        listToContainer({1}).insert$(9223372036854775807, 1) : eid_outOfRange
        listToContainer({1}).insert$(-1, 1) : eid_outOfRange
        listToContainer({1}).insert$(-9223372036854775808, 1) : eid_outOfRange
        listToContainer({1}).insert$(0, 2) == listToContainer({2, 1})
        listToContainer({1}).insert$(1, 2) == listToContainer({1, 2})
        listToContainer({1, 2, 3, 4, 5}).insert$(0, 'a') == listToContainer({'a', 1, 2, 3, 4, 5})
        listToContainer({1, 2, 3, 4, 5}).insert$(2, 'a') == listToContainer({1, 2, 'a', 3, 4, 5})
        listToContainer({1, 2, 3, 4, 5}).insert$(3, 'a') == listToContainer({1, 2, 3, 'a', 4, 5})
        listToContainer({1, 2, 3, 4, 5}).insert$(5, 'a') == listToContainer({1, 2, 3, 4, 5, 'a'})

#noinline
def testContainer_Insert(write ok Int, write errorsCoordinates List)
    var c1 Container = listToContainer({})
    var c2 Container = listToContainer({1})
    test: ok, errorsCoordinates
        c1.insert(1, 1) : eid_outOfRange
        c1 == listToContainer({})
        c1.insert(9223372036854775807, 1) : eid_outOfRange
        c1 == listToContainer({})
        c1.insert(-1, 1) : eid_outOfRange
        c1 == listToContainer({})
        c1.insert(-9223372036854775808, 1) : eid_outOfRange
        c1 == listToContainer({})
        c1.insert(0, 1).nothing?()
        c1 == listToContainer({1})
        c1.insert(2, 1) : eid_outOfRange
        c1 == listToContainer({1})
        c1.insert(9223372036854775807, 1) : eid_outOfRange
        c1 == listToContainer({1})
        c1.insert(-1, 1) : eid_outOfRange
        c1 == listToContainer({1})
        c1.insert(-9223372036854775808, 1) : eid_outOfRange
        c1 == listToContainer({1})
        c1.insert(0, 2).nothing?()
        c1 == listToContainer({2, 1})
        c2.insert(1, 2).nothing?()
        c2 == listToContainer({1, 2})
        c2.insert(0, 'a').nothing?()
        c2 == listToContainer({'a', 1, 2})
        c2.insert(2, 'f').nothing?()
        c2 == listToContainer({'a', 1, 'f', 2})
        c2.insert(1, 3).nothing?()
        c2 == listToContainer({'a', 3,  1, 'f', 2})
        c2.insert(3, 1.0).nothing?()
        c2 == listToContainer({'a', 3,  1, 1.0, 'f', 2})
        c2.insert(7, 1) : eid_outOfRange
        c2 == listToContainer({'a', 3,  1, 1.0, 'f', 2})
        c2.insert(9223372036854775807, 1) : eid_outOfRange
        c2 == listToContainer({'a', 3,  1, 1.0, 'f', 2})
        c2.insert(-1, 1) : eid_outOfRange
        c2 == listToContainer({'a', 3,  1, 1.0, 'f', 2})
        c2.insert(-9223372036854775808, 1) : eid_outOfRange
        c2 == listToContainer({'a', 3,  1, 1.0, 'f', 2})

#noinline
def testContainer_InsertPart$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).insertPart$(1, listToContainer({1})) : eid_outOfRange
        listToContainer({}).insertPart$(9223372036854775807, listToContainer({1})) : eid_outOfRange
        listToContainer({}).insertPart$(-1, listToContainer({1})) : eid_outOfRange
        listToContainer({}).insertPart$(-9223372036854775808, listToContainer({1})) : eid_outOfRange
        listToContainer({}).insertPart$(0, listToContainer({})) == listToContainer({})
        listToContainer({}).insertPart$(0, listToContainer({1})) == listToContainer({1})
        listToContainer({}).insertPart$(0, listToContainer({1, 2, 3})) == listToContainer({1, 2, 3})
        listToContainer({1}).insertPart$(2, listToContainer({1})) : eid_outOfRange
        listToContainer({1}).insertPart$(9223372036854775807, listToContainer({1})) : eid_outOfRange
        listToContainer({1}).insertPart$(-1, listToContainer({1})) : eid_outOfRange
        listToContainer({1}).insertPart$(-9223372036854775808, listToContainer({1})) : eid_outOfRange
        listToContainer({1}).insertPart$(0, listToContainer({})) == listToContainer({1})
        listToContainer({1}).insertPart$(1, listToContainer({})) == listToContainer({1})
        listToContainer({1}).insertPart$(0, listToContainer({2})) == listToContainer({2, 1})
        listToContainer({1}).insertPart$(0, listToContainer({2, 3})) == listToContainer({2, 3, 1})
        listToContainer({1}).insertPart$(1, listToContainer({1, 3})) == listToContainer({1, 1, 3})
        listToContainer({1, 2, 3, 4, 5}).insertPart$(0, listToContainer({-1, -2})) == listToContainer({-1, -2, 1, 2, 3, 4, 5})
        listToContainer({1, 2, 3, 4, 5}).insertPart$(2, listToContainer({-1, -2})) == listToContainer({1, 2, -1, -2, 3, 4, 5})
        listToContainer({1, 2, 3, 4, 5}).insertPart$(3, listToContainer({-1, -2})) == listToContainer({1, 2, 3, -1, -2, 4, 5})
        listToContainer({1, 2, 3, 4, 5}).insertPart$(5, listToContainer({-1, -2})) == listToContainer({1, 2, 3, 4, 5, -1, -2})

#noinline
def testContainer_InsertPart(write ok Int, write errorsCoordinates List)
    var c1 Container = listToContainer({})
    var c2 Container = listToContainer({1})
    test: ok, errorsCoordinates
        c1.insertPart(1, listToContainer({1})) : eid_outOfRange
        c1 == listToContainer({})
        c1.insertPart(9223372036854775807, listToContainer({1})) : eid_outOfRange
        c1 == listToContainer({})
        c1.insertPart(-1, listToContainer({1})) : eid_outOfRange
        c1 == listToContainer({})
        c1.insertPart(-9223372036854775808, listToContainer({1})) : eid_outOfRange
        c1 == listToContainer({})
        c1.insertPart(0, listToContainer({})).nothing?()
        c1 == listToContainer({})
        c1.insertPart(0, listToContainer({1})).nothing?()
        c1 == listToContainer({1})
        c1.insertPart(2, listToContainer({1})) : eid_outOfRange
        c1 == listToContainer({1})
        c1.insertPart(9223372036854775807, listToContainer({1})) : eid_outOfRange
        c1 == listToContainer({1})
        c1.insertPart(-1, listToContainer({1})) : eid_outOfRange
        c1 == listToContainer({1})
        c1.insertPart(-9223372036854775808, listToContainer({1})) : eid_outOfRange
        c1 == listToContainer({1})
        c1.insertPart(0, listToContainer({})).nothing?()
        c1 == listToContainer({1})
        c1.insertPart(1, listToContainer({})).nothing?()
        c1 == listToContainer({1})
        c1.insertPart(0, listToContainer({2})).nothing?()
        c1 == listToContainer({2, 1})
        c2.insertPart(1, listToContainer({2})).nothing?()
        c2 == listToContainer({1, 2})
        c2.insertPart(0, listToContainer({2, 3})).nothing?()
        c2 == listToContainer({2, 3, 1, 2})
        c2.insertPart(1, listToContainer({1, 3})).nothing?()
        c2 == listToContainer({2, 1, 3, 3, 1, 2})
        c2.insertPart(2, listToContainer({})).nothing?()
        c2 == listToContainer({2, 1, 3, 3, 1, 2})
        c2.insertPart(3, listToContainer({})).nothing?()
        c2 == listToContainer({2, 1, 3, 3, 1, 2})
        c2.insertPart(0, listToContainer({})).nothing?()
        c2 == listToContainer({2, 1, 3, 3, 1, 2})
        c2.insertPart(6, listToContainer({})).nothing?()
        c2 == listToContainer({2, 1, 3, 3, 1, 2})
        c2.insertPart(6, listToContainer({-1, -2})).nothing?()
        c2 == listToContainer({2, 1, 3, 3, 1, 2, -1, -2})

#noinline
def testContainer_Repeat(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        12.repeat(0, Container) == listToContainer({})
        12.repeat(1, Container) == listToContainer({12})
        12.repeat(2, Container) == listToContainer({12, 12})
        12.repeat(10, Container) == listToContainer({12, 12, 12, 12, 12, 12, 12, 12, 12, 12})
        12.repeat(11, Container) == listToContainer({12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12})
        12.repeat(16, Container) == listToContainer({12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12})
        12.repeat(-1, Container) : eid_outOfRange
        12.repeat(-2, Container) : eid_outOfRange
        12.repeat(-9223372036854775808, Container) : eid_outOfRange

#noinline
def testContainer_RepeatPart(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).repeatPart(0) == listToContainer({})
        listToContainer({}).repeatPart(120) == listToContainer({})
        listToContainer({}).repeatPart(-1) : eid_outOfRange
        listToContainer({}).repeatPart(-9223372036854775808) : eid_outOfRange
        listToContainer({13}).repeatPart(0) == listToContainer({})
        listToContainer({13}).repeatPart(1) == listToContainer({13})
        listToContainer({13}).repeatPart(2) == listToContainer({13, 13})
        listToContainer({13}).repeatPart(10) == listToContainer({13, 13, 13, 13, 13, 13, 13, 13, 13, 13})
        listToContainer({13}).repeatPart(11) == listToContainer({13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13})
        listToContainer({13}).repeatPart(16) == listToContainer({13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13})
        listToContainer({13}).repeatPart(-1) : eid_outOfRange
        listToContainer({13}).repeatPart(-9223372036854775808) : eid_outOfRange
        listToContainer({13, "a", 1.0}).repeatPart(0) == listToContainer({})
        listToContainer({13, "a", 1.0}).repeatPart(1) == listToContainer({13, "a", 1.0})
        listToContainer({13, "a", 1.0}).repeatPart(2) == listToContainer({13, "a", 1.0, 13, "a", 1.0})
        listToContainer({13, "a", 1.0}).repeatPart(10) == listToContainer({13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0})
        listToContainer({13, "a", 1.0}).repeatPart(11) == listToContainer({13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0})
        listToContainer({13, "a", 1.0}).repeatPart(16) == listToContainer({13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0, 13, "a", 1.0})
        listToContainer({13, "a", 1.0}).repeatPart(-1) : eid_outOfRange
        listToContainer({13, "a", 1.0}).repeatPart(-9223372036854775808) : eid_outOfRange

#noinline
def testContainer_ReverseFromAtoB$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).reverseFromAtoB$(0, 0) == listToContainer({})
        listToContainer({}).reverseFromAtoB$(0, 1) : eid_outOfRange
        listToContainer({}).reverseFromAtoB$(1, 1) : eid_outOfRange
        listToContainer({}).reverseFromAtoB$(1, 0) : eid_outOfRange
        listToContainer({}).reverseFromAtoB$(-1, -1) : eid_outOfRange
        listToContainer({}).reverseFromAtoB$(-9223372036854775808, 0) : eid_outOfRange
        listToContainer({}).reverseFromAtoB$(0, -9223372036854775808) : eid_outOfRange
        listToContainer({}).reverseFromAtoB$(0, 9223372036854775807) : eid_outOfRange
        listToContainer({}).reverseFromAtoB$(-9223372036854775808, 9223372036854775807) : eid_outOfRange
        listToContainer({1}).reverseFromAtoB$(0, 0) == listToContainer({1})
        listToContainer({1}).reverseFromAtoB$(0, 1) == listToContainer({1})
        listToContainer({1}).reverseFromAtoB$(1, 1) == listToContainer({1})
        listToContainer({1}).reverseFromAtoB$(0, 2) : eid_outOfRange
        listToContainer({1}).reverseFromAtoB$(2, 1) : eid_outOfRange
        listToContainer({1}).reverseFromAtoB$(1, 2) : eid_outOfRange
        listToContainer({1}).reverseFromAtoB$(2, 2) : eid_outOfRange
        listToContainer({1}).reverseFromAtoB$(1, 0) : eid_outOfRange
        listToContainer({1}).reverseFromAtoB$(-1, -1) : eid_outOfRange
        listToContainer({1}).reverseFromAtoB$(-9223372036854775808, 0) : eid_outOfRange
        listToContainer({1}).reverseFromAtoB$(0, -9223372036854775808) : eid_outOfRange
        listToContainer({1}).reverseFromAtoB$(0, 9223372036854775807) : eid_outOfRange
        listToContainer({1}).reverseFromAtoB$(-9223372036854775808, 9223372036854775807) : eid_outOfRange
        listToContainer({1, 2}).reverseFromAtoB$(0, 0) == listToContainer({1, 2})
        listToContainer({1, 2}).reverseFromAtoB$(0, 1) == listToContainer({1, 2})
        listToContainer({1, 2}).reverseFromAtoB$(1, 1) == listToContainer({1, 2})
        listToContainer({1, 2}).reverseFromAtoB$(1, 2) == listToContainer({1, 2})
        listToContainer({1, 2}).reverseFromAtoB$(2, 2) == listToContainer({1, 2})
        listToContainer({1, 2}).reverseFromAtoB$(0, 2) == listToContainer({2, 1})
        listToContainer({1, 2}).reverseFromAtoB$(0, 3) : eid_outOfRange
        listToContainer({1, 2}).reverseFromAtoB$(3, 0) : eid_outOfRange
        listToContainer({1, 2}).reverseFromAtoB$(1, 3) : eid_outOfRange
        listToContainer({1, 2}).reverseFromAtoB$(3, 3) : eid_outOfRange
        listToContainer({1, 2}).reverseFromAtoB$(1, 0) : eid_outOfRange
        listToContainer({1, 2}).reverseFromAtoB$(-1, -1) : eid_outOfRange
        listToContainer({1, 2}).reverseFromAtoB$(-9223372036854775808, 0) : eid_outOfRange
        listToContainer({1, 2}).reverseFromAtoB$(0, -9223372036854775808) : eid_outOfRange
        listToContainer({1, 2}).reverseFromAtoB$(0, 9223372036854775807) : eid_outOfRange
        listToContainer({1, 2}).reverseFromAtoB$(-9223372036854775808, 9223372036854775807) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(0, 0) == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(0, 1) == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(1, 1) == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(1, 2) == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(0, 5) == listToContainer({5, 4, 3, 2, 1, 6, 7, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(5, 9) == listToContainer({1, 2, 3, 4, 5, 9, 8, 7, 6})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(0, 9) == listToContainer({9, 8, 7, 6, 5, 4, 3, 2, 1})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(3, 7) == listToContainer({1, 2, 3, 7, 6, 5, 4, 8, 9})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(0, 10) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(3, 0) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(9, 0) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(10, 0) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(3, -1) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(-1, -1) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(-9223372036854775808, 0) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(0, -9223372036854775808) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(0, 9223372036854775807) : eid_outOfRange
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverseFromAtoB$(-9223372036854775808, 9223372036854775807) : eid_outOfRange

#noinline
def testContainer_ReverseFromAtoB(write ok Int, write errorsCoordinates List)
    var c Container = listToContainer({})
    test: ok, errorsCoordinates
        c.reverseFromAtoB(0, 0).nothing?()
        c == listToContainer({})
        c.reverseFromAtoB(0, 1) : eid_outOfRange
        c == listToContainer({})
        c.reverseFromAtoB(1, 1) : eid_outOfRange
        c == listToContainer({})
        c.reverseFromAtoB(1, 0) : eid_outOfRange
        c == listToContainer({})
        c.reverseFromAtoB(-1, -1) : eid_outOfRange
        c == listToContainer({})
        c.reverseFromAtoB(-9223372036854775808, 0) : eid_outOfRange
        c == listToContainer({})
        c.reverseFromAtoB(0, -9223372036854775808) : eid_outOfRange
        c == listToContainer({})
        c.reverseFromAtoB(0, 9223372036854775807) : eid_outOfRange
        c == listToContainer({})
        c.reverseFromAtoB(-9223372036854775808, 9223372036854775807) : eid_outOfRange
        c == listToContainer({})
    c = listToContainer({1})
    test: ok, errorsCoordinates
        c.reverseFromAtoB(0, 0).nothing?()
        c == listToContainer({1})
        c.reverseFromAtoB(0, 1).nothing?()
        c == listToContainer({1})
        c.reverseFromAtoB(1, 1).nothing?()
        c == listToContainer({1})
        c.reverseFromAtoB(0, 2) : eid_outOfRange
        c == listToContainer({1})
        c.reverseFromAtoB(2, 1) : eid_outOfRange
        c == listToContainer({1})
        c.reverseFromAtoB(1, 2) : eid_outOfRange
        c == listToContainer({1})
        c.reverseFromAtoB(2, 2) : eid_outOfRange
        c == listToContainer({1})
        c.reverseFromAtoB(1, 0) : eid_outOfRange
        c == listToContainer({1})
        c.reverseFromAtoB(-1, -1) : eid_outOfRange
        c == listToContainer({1})
        c.reverseFromAtoB(-9223372036854775808, 1) : eid_outOfRange
        c == listToContainer({1})
        c.reverseFromAtoB(0, -9223372036854775808) : eid_outOfRange
        c == listToContainer({1})
        c.reverseFromAtoB(0, 9223372036854775807) : eid_outOfRange
        c == listToContainer({1})
        c.reverseFromAtoB(-9223372036854775808, 9223372036854775807) : eid_outOfRange
        c == listToContainer({1})
    c = listToContainer({1, 2})
    test: ok, errorsCoordinates
        c.reverseFromAtoB(0, 0).nothing?()
        c == listToContainer({1, 2})
        c.reverseFromAtoB(0, 1).nothing?()
        c == listToContainer({1, 2})
        c.reverseFromAtoB(1, 1).nothing?()
        c == listToContainer({1, 2})
        c.reverseFromAtoB(1, 2).nothing?()
        c == listToContainer({1, 2})
        c.reverseFromAtoB(2, 2).nothing?()
        c == listToContainer({1, 2})
        c.reverseFromAtoB(0, 2).nothing?()
        c == listToContainer({2, 1})
        c.reverseFromAtoB(0, 3) : eid_outOfRange
        c == listToContainer({2, 1})
        c.reverseFromAtoB(3, 0) : eid_outOfRange
        c == listToContainer({2, 1})
        c.reverseFromAtoB(1, 3) : eid_outOfRange
        c == listToContainer({2, 1})
        c.reverseFromAtoB(3, 3) : eid_outOfRange
        c == listToContainer({2, 1})
        c.reverseFromAtoB(1, 0) : eid_outOfRange
        c == listToContainer({2, 1})
        c.reverseFromAtoB(-1, -1) : eid_outOfRange
        c == listToContainer({2, 1})
        c.reverseFromAtoB(-9223372036854775808, 0) : eid_outOfRange
        c == listToContainer({2, 1})
        c.reverseFromAtoB(0, -9223372036854775808) : eid_outOfRange
        c == listToContainer({2, 1})
        c.reverseFromAtoB(0, 9223372036854775807) : eid_outOfRange
        c == listToContainer({2, 1})
        c.reverseFromAtoB(-9223372036854775808, 9223372036854775807) : eid_outOfRange
        c == listToContainer({2, 1})
    c = listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
    test: ok, errorsCoordinates
        c.reverseFromAtoB(0, 0).nothing?()
        c == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        c.reverseFromAtoB(0, 1).nothing?()
        c == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        c.reverseFromAtoB(1, 1).nothing?()
        c == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        c.reverseFromAtoB(1, 2).nothing?()
        c == listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
        c.reverseFromAtoB(0, 5).nothing?()
        c == listToContainer({5, 4, 3, 2, 1, 6, 7, 8, 9})
        c.reverseFromAtoB(5, 9).nothing?()
        c == listToContainer({5, 4, 3, 2, 1, 9, 8, 7, 6})
        c.reverseFromAtoB(0, 9).nothing?()
        c == listToContainer({6, 7, 8, 9, 1, 2, 3, 4, 5})
        c.reverseFromAtoB(3, 7).nothing?()
        c == listToContainer({6, 7, 8, 3, 2, 1, 9, 4, 5})
        c.reverseFromAtoB(0, 10) : eid_outOfRange
        c == listToContainer({6, 7, 8, 3, 2, 1, 9, 4, 5})
        c.reverseFromAtoB(3, 0) : eid_outOfRange
        c == listToContainer({6, 7, 8, 3, 2, 1, 9, 4, 5})
        c.reverseFromAtoB(9, 0) : eid_outOfRange
        c == listToContainer({6, 7, 8, 3, 2, 1, 9, 4, 5})
        c.reverseFromAtoB(10, 0) : eid_outOfRange
        c == listToContainer({6, 7, 8, 3, 2, 1, 9, 4, 5})
        c.reverseFromAtoB(3, -1) : eid_outOfRange
        c == listToContainer({6, 7, 8, 3, 2, 1, 9, 4, 5})
        c.reverseFromAtoB(-1, -1) : eid_outOfRange
        c == listToContainer({6, 7, 8, 3, 2, 1, 9, 4, 5})
        c.reverseFromAtoB(-9223372036854775808, 0) : eid_outOfRange
        c == listToContainer({6, 7, 8, 3, 2, 1, 9, 4, 5})
        c.reverseFromAtoB(0, -9223372036854775808) : eid_outOfRange
        c == listToContainer({6, 7, 8, 3, 2, 1, 9, 4, 5})
        c.reverseFromAtoB(0, 9223372036854775807) : eid_outOfRange
        c == listToContainer({6, 7, 8, 3, 2, 1, 9, 4, 5})
        c.reverseFromAtoB(-9223372036854775808, 9223372036854775807) : eid_outOfRange
        c == listToContainer({6, 7, 8, 3, 2, 1, 9, 4, 5})
        c.reverseFromAtoB(9223372036854775807, -9223372036854775808) : eid_outOfRange
        c == listToContainer({6, 7, 8, 3, 2, 1, 9, 4, 5})

#noinline
def testContainer_Reverse$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        listToContainer({}).reverse$() == listToContainer({})
        listToContainer({1}).reverse$() == listToContainer({1})
        listToContainer({1, 2}).reverse$() == listToContainer({2, 1})
        listToContainer({1, 2, 3}).reverse$() == listToContainer({3, 2, 1})
        listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9}).reverse$() == listToContainer({9, 8, 7, 6, 5, 4, 3, 2, 1})

#noinline
def testContainer_Reverse(write ok Int, write errorsCoordinates List)
    var c Container = listToContainer({})
    test: ok, errorsCoordinates
        c.reverse().nothing?()
        c == listToContainer({})
    c = listToContainer({1})
    test: ok, errorsCoordinates
        c.reverse().nothing?()
        c == listToContainer({1})
    c = listToContainer({1, 2})
    test: ok, errorsCoordinates
        c.reverse().nothing?()
        c == listToContainer({2, 1})
    c = listToContainer({1, 2, 3})
    test: ok, errorsCoordinates
        c.reverse().nothing?()
        c == listToContainer({3, 2, 1})
    c = listToContainer({1, 2, 3, 4, 5, 6, 7, 8, 9})
    test: ok, errorsCoordinates
        c.reverse().nothing?()
        c == listToContainer({9, 8, 7, 6, 5, 4, 3, 2, 1})

#noinline
def testContainer_Sort(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [NotEqType_Container{}].arrayToSortableContainer().sort$(true) : eid_invalidType
        [NotEqType_Container{}].arrayToSortableContainer().sort$(false) : eid_invalidType
        [NotEqType_Container{}, NotEqType_Container{}].arrayToSortableContainer().sort$(true) : eid_invalidType
        [NotEqType_Container{}, NotEqType_Container{}].arrayToSortableContainer().sort$(false) : eid_invalidType
        [].arrayToSortableContainer().sort$(true) == [].arrayToSortableContainer()
        [].arrayToSortableContainer().sort$(false) == [].arrayToSortableContainer()
        [].arrayToSortableContainer().sort$(true).itemTypeNumber() == Nothing.typeNumber()
        [].arrayToSortableContainer().sort$(false).itemTypeNumber() == Nothing.typeNumber()
        [1].arrayToSortableContainer().sort$(true) == [1].arrayToSortableContainer()
        [1].arrayToSortableContainer().sort$(false) == [1].arrayToSortableContainer()
        [1, 2].arrayToSortableContainer().sort$(true) == [1, 2].arrayToSortableContainer()
        [1, 2].arrayToSortableContainer().sort$(false) == [2, 1].arrayToSortableContainer()
        [2, 1].arrayToSortableContainer().sort$(true) == [1, 2].arrayToSortableContainer()
        [2, 1].arrayToSortableContainer().sort$(false) == [2, 1].arrayToSortableContainer()
        [1, 2, 3].arrayToSortableContainer().sort$(true) == [1, 2, 3].arrayToSortableContainer()
        [1, 2, 3].arrayToSortableContainer().sort$(false) == [3, 2, 1].arrayToSortableContainer()
        [1, 3, 2].arrayToSortableContainer().sort$(true) == [1, 2, 3].arrayToSortableContainer()
        [1, 3, 2].arrayToSortableContainer().sort$(false) == [3, 2, 1].arrayToSortableContainer()
        [2, 1, 3].arrayToSortableContainer().sort$(true) == [1, 2, 3].arrayToSortableContainer()
        [2, 1, 3].arrayToSortableContainer().sort$(false) == [3, 2, 1].arrayToSortableContainer()
        [2, 3, 1].arrayToSortableContainer().sort$(true) == [1, 2, 3].arrayToSortableContainer()
        [2, 3, 1].arrayToSortableContainer().sort$(false) == [3, 2, 1].arrayToSortableContainer()
        [3, 1, 2].arrayToSortableContainer().sort$(true) == [1, 2, 3].arrayToSortableContainer()
        [3, 1, 2].arrayToSortableContainer().sort$(false) == [3, 2, 1].arrayToSortableContainer()
        [3, 2, 1].arrayToSortableContainer().sort$(true) == [1, 2, 3].arrayToSortableContainer()
        [3, 2, 1].arrayToSortableContainer().sort$(false) == [3, 2, 1].arrayToSortableContainer()
        [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301].arrayToSortableContainer().sort$(true) == [-301, -92, -3, 0, 9, 15, 26, 45, 172, 7134].arrayToSortableContainer()
        [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301].arrayToSortableContainer().sort$(false) == [7134, 172, 45, 26, 15, 9, 0, -3, -92, -301].arrayToSortableContainer()
        [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100] {
            .arrayToSortableContainer().sort$(true) ==
            [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
            .arrayToSortableContainer()
        }
        [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100] {
            .arrayToSortableContainer().sort$(false) ==
            [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100]
            .arrayToSortableContainer()
        }
        [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100] {
            .arrayToSortableContainer().sort$(true) ==
            [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
            .arrayToSortableContainer()
        }
        [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100] {
            .arrayToSortableContainer().sort$(false) ==
            [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100]
            .arrayToSortableContainer()
        }
    var a1 SortableContainer = [].arrayToSortableContainer()
    var a2 SortableContainer = [1].arrayToSortableContainer()
    var a3 SortableContainer = [1, 2].arrayToSortableContainer()
    var a4 SortableContainer = [1, 2, 3].arrayToSortableContainer()
    var a5 SortableContainer = [2, 1, 3].arrayToSortableContainer()
    var a6 SortableContainer = [2, 1, 3].arrayToSortableContainer()
    var a7 SortableContainer = [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301].arrayToSortableContainer()
    var a8 SortableContainer = [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301].arrayToSortableContainer()
    var a9 SortableContainer = [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100].arrayToSortableContainer()
    var a10 SortableContainer = [NotEqType_Container{}].arrayToSortableContainer()
    var a11 SortableContainer = [NotEqType_Container{}, NotEqType_Container{}].arrayToSortableContainer()
    test: ok, errorsCoordinates
        a1.sort(true).nothing?()
        a1 == [].arrayToSortableContainer()
        a1.sort(false).nothing?()
        a1 == [].arrayToSortableContainer()
        a1.sort(true).nothing?()
        a1.itemTypeNumber() == Nothing.typeNumber()
        a1 == [].arrayToSortableContainer()
        a1.sort(false).nothing?()
        a1.itemTypeNumber() == Nothing.typeNumber()
        a1 == [].arrayToSortableContainer()
        a2.sort(true).nothing?()
        a2 == [1].arrayToSortableContainer()
        a2.sort(false).nothing?()
        a2 == [1].arrayToSortableContainer()
        a3.sort(true).nothing?()
        a3 == [1, 2].arrayToSortableContainer()
        a3.sort(false).nothing?()
        a3 == [2, 1].arrayToSortableContainer()
        a3.sort(false).nothing?()
        a3 == [2, 1].arrayToSortableContainer()
        a4.sort(true).nothing?()
        a4 == [1, 2, 3].arrayToSortableContainer()
        a4.sort(false).nothing?()
        a4 == [3, 2, 1].arrayToSortableContainer()
        a4.sort(false).nothing?()
        a4 == [3, 2, 1].arrayToSortableContainer()
        a5.sort(true).nothing?()
        a5 == [1, 2, 3].arrayToSortableContainer()
        a6.sort(false).nothing?()
        a6 == [3, 2, 1].arrayToSortableContainer()
        a7.sort(true).nothing?()
        a7 == [-301, -92, -3, 0, 9, 15, 26, 45, 172, 7134].arrayToSortableContainer()
        a8.sort(false).nothing?()
        a8 == [7134, 172, 45, 26, 15, 9, 0, -3, -92, -301].arrayToSortableContainer()
        a9.sort(true).nothing?()
        a9 == [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100].arrayToSortableContainer()
        a9.sort(false).nothing?()
        a9 == [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100].arrayToSortableContainer()
        a9.sort(true).nothing?()
        a9 == [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100].arrayToSortableContainer()
        a10.sort(true) : eid_invalidType
        a10.sort(false) : eid_invalidType
        a11.sort(true) : eid_invalidType
        a11.sort(false) : eid_invalidType
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a1.sort(true)
    var allOk Bool = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i - 1] <= a1[i]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a1.sort(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i] <= a1[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a2 = a1.sort$(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i - 1] <= a2[i]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a2 = a1.sort$(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i] <= a2[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a1.sort(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i - 1] <= a1[i]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a1.sort(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i] <= a1[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a2 = a1.sort$(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i - 1] <= a2[i]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a2 = a1.sort$(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i] <= a2[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = 123.repeat(12, SortableContainer)
    a1.sort(true)
    a2 = 123.repeat(200, SortableContainer)
    a2.sort(true)
    a3 = 123.repeat(12, SortableContainer)
    a3.sort(false)
    a4 = 123.repeat(200, SortableContainer)
    a4.sort(false)
    test: ok, errorsCoordinates
        a1 == 123.repeat(12, SortableContainer)
        a2 == 123.repeat(200, SortableContainer)
        a3 == 123.repeat(12, SortableContainer)
        a4 == 123.repeat(200, SortableContainer)
        123.repeat(12, SortableContainer).sort$(true) == 123.repeat(12, SortableContainer)
        123.repeat(12, SortableContainer).sort$(false) == 123.repeat(12, SortableContainer)
        123.repeat(200, SortableContainer).sort$(true) == 123.repeat(200, SortableContainer)
        123.repeat(200, SortableContainer).sort$(false) == 123.repeat(200, SortableContainer)

#noinline
def testContainer_StableSort(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [NotEqType_Container{}].arrayToSortableContainer().stableSort$(true) : eid_invalidType
        [NotEqType_Container{}].arrayToSortableContainer().stableSort$(false) : eid_invalidType
        [NotEqType_Container{}, NotEqType_Container{}].arrayToSortableContainer().stableSort$(true) : eid_invalidType
        [NotEqType_Container{}, NotEqType_Container{}].arrayToSortableContainer().stableSort$(false) : eid_invalidType
        [].arrayToSortableContainer().stableSort$(true) == [].arrayToSortableContainer()
        [].arrayToSortableContainer().stableSort$(false) == [].arrayToSortableContainer()
        [].arrayToSortableContainer().stableSort$(true).itemTypeNumber() == Nothing.typeNumber()
        [].arrayToSortableContainer().stableSort$(false).itemTypeNumber() == Nothing.typeNumber()
        [1].arrayToSortableContainer().stableSort$(true) == [1].arrayToSortableContainer()
        [1].arrayToSortableContainer().stableSort$(false) == [1].arrayToSortableContainer()
        [1, 2].arrayToSortableContainer().stableSort$(true) == [1, 2].arrayToSortableContainer()
        [1, 2].arrayToSortableContainer().stableSort$(false) == [2, 1].arrayToSortableContainer()
        [2, 1].arrayToSortableContainer().stableSort$(true) == [1, 2].arrayToSortableContainer()
        [2, 1].arrayToSortableContainer().stableSort$(false) == [2, 1].arrayToSortableContainer()
        [1, 2, 3].arrayToSortableContainer().stableSort$(true) == [1, 2, 3].arrayToSortableContainer()
        [1, 2, 3].arrayToSortableContainer().stableSort$(false) == [3, 2, 1].arrayToSortableContainer()
        [1, 3, 2].arrayToSortableContainer().stableSort$(true) == [1, 2, 3].arrayToSortableContainer()
        [1, 3, 2].arrayToSortableContainer().stableSort$(false) == [3, 2, 1].arrayToSortableContainer()
        [2, 1, 3].arrayToSortableContainer().stableSort$(true) == [1, 2, 3].arrayToSortableContainer()
        [2, 1, 3].arrayToSortableContainer().stableSort$(false) == [3, 2, 1].arrayToSortableContainer()
        [2, 3, 1].arrayToSortableContainer().stableSort$(true) == [1, 2, 3].arrayToSortableContainer()
        [2, 3, 1].arrayToSortableContainer().stableSort$(false) == [3, 2, 1].arrayToSortableContainer()
        [3, 1, 2].arrayToSortableContainer().stableSort$(true) == [1, 2, 3].arrayToSortableContainer()
        [3, 1, 2].arrayToSortableContainer().stableSort$(false) == [3, 2, 1].arrayToSortableContainer()
        [3, 2, 1].arrayToSortableContainer().stableSort$(true) == [1, 2, 3].arrayToSortableContainer()
        [3, 2, 1].arrayToSortableContainer().stableSort$(false) == [3, 2, 1].arrayToSortableContainer()
        [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301].arrayToSortableContainer().stableSort$(true) == [-301, -92, -3, 0, 9, 15, 26, 45, 172, 7134].arrayToSortableContainer()
        [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301].arrayToSortableContainer().stableSort$(false) == [7134, 172, 45, 26, 15, 9, 0, -3, -92, -301].arrayToSortableContainer()
        [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100] {
            .arrayToSortableContainer().stableSort$(true) ==
            [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
            .arrayToSortableContainer()
        }
        [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100] {
            .arrayToSortableContainer().stableSort$(false) ==
            [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100]
            .arrayToSortableContainer()
        }
        [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100] {
            .arrayToSortableContainer().stableSort$(true) ==
            [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
            .arrayToSortableContainer()
        }
        [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100] {
            .arrayToSortableContainer().stableSort$(false) ==
            [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100]
            .arrayToSortableContainer()
        }
    var a1 SortableContainer = [].arrayToSortableContainer()
    var a2 SortableContainer = [1].arrayToSortableContainer()
    var a3 SortableContainer = [1, 2].arrayToSortableContainer()
    var a4 SortableContainer = [1, 2, 3].arrayToSortableContainer()
    var a5 SortableContainer = [2, 1, 3].arrayToSortableContainer()
    var a6 SortableContainer = [2, 1, 3].arrayToSortableContainer()
    var a7 SortableContainer = [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301].arrayToSortableContainer()
    var a8 SortableContainer = [-3, 45, 172, -92, 26, 7134, 0, 9, 15, -301].arrayToSortableContainer()
    var a9 SortableContainer = [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100].arrayToSortableContainer()
    var a10 SortableContainer = [NotEqType_Container{}].arrayToSortableContainer()
    var a11 SortableContainer = [NotEqType_Container{}, NotEqType_Container{}].arrayToSortableContainer()
    test: ok, errorsCoordinates
        a1.stableSort(true).nothing?()
        a1 == [].arrayToSortableContainer()
        a1.stableSort(false).nothing?()
        a1 == [].arrayToSortableContainer()
        a1.stableSort(true).nothing?()
        a1.itemTypeNumber() == Nothing.typeNumber()
        a1 == [].arrayToSortableContainer()
        a1.stableSort(false).nothing?()
        a1.itemTypeNumber() == Nothing.typeNumber()
        a1 == [].arrayToSortableContainer()
        a2.stableSort(true).nothing?()
        a2 == [1].arrayToSortableContainer()
        a2.stableSort(false).nothing?()
        a2 == [1].arrayToSortableContainer()
        a3.stableSort(true).nothing?()
        a3 == [1, 2].arrayToSortableContainer()
        a3.stableSort(false).nothing?()
        a3 == [2, 1].arrayToSortableContainer()
        a3.stableSort(false).nothing?()
        a3 == [2, 1].arrayToSortableContainer()
        a4.stableSort(true).nothing?()
        a4 == [1, 2, 3].arrayToSortableContainer()
        a4.stableSort(false).nothing?()
        a4 == [3, 2, 1].arrayToSortableContainer()
        a4.stableSort(false).nothing?()
        a4 == [3, 2, 1].arrayToSortableContainer()
        a5.stableSort(true).nothing?()
        a5 == [1, 2, 3].arrayToSortableContainer()
        a6.stableSort(false).nothing?()
        a6 == [3, 2, 1].arrayToSortableContainer()
        a7.stableSort(true).nothing?()
        a7 == [-301, -92, -3, 0, 9, 15, 26, 45, 172, 7134].arrayToSortableContainer()
        a8.stableSort(false).nothing?()
        a8 == [7134, 172, 45, 26, 15, 9, 0, -3, -92, -301].arrayToSortableContainer()
        a9.stableSort(true).nothing?()
        a9 == [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100].arrayToSortableContainer()
        a9.stableSort(false).nothing?()
        a9 == [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100].arrayToSortableContainer()
        a9.stableSort(true).nothing?()
        a9 == [-100, -95, -90, -85, -80, -75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100].arrayToSortableContainer()
        a10.stableSort(true) : eid_invalidType
        a10.stableSort(false) : eid_invalidType
        a11.stableSort(true) : eid_invalidType
        a11.stableSort(false) : eid_invalidType
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a1.stableSort(true)
    var allOk Bool = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i - 1] <= a1[i]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a1.stableSort(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i] <= a1[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a2 = a1.stableSort$(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i - 1] <= a2[i]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom())
    a2 = a1.stableSort$(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i] <= a2[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a1.stableSort(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i - 1] <= a1[i]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a1.stableSort(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a1[i] <= a1[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a2 = a1.stableSort$(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i - 1] <= a2[i]
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(Int.getRandom() & 127)
    a2 = a1.stableSort$(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i] <= a2[i - 1]
    test: ok, errorsCoordinates
        allOk
    a1 = 123.repeat(12, SortableContainer)
    a1.stableSort(true)
    a2 = 123.repeat(200, SortableContainer)
    a2.stableSort(true)
    a3 = 123.repeat(12, SortableContainer)
    a3.stableSort(false)
    a4 = 123.repeat(200, SortableContainer)
    a4.stableSort(false)
    test: ok, errorsCoordinates
        a1 == 123.repeat(12, SortableContainer)
        a2 == 123.repeat(200, SortableContainer)
        a3 == 123.repeat(12, SortableContainer)
        a4 == 123.repeat(200, SortableContainer)
        123.repeat(12, SortableContainer).stableSort$(true) == 123.repeat(12, SortableContainer)
        123.repeat(12, SortableContainer).stableSort$(false) == 123.repeat(12, SortableContainer)
        123.repeat(200, SortableContainer).stableSort$(true) == 123.repeat(200, SortableContainer)
        123.repeat(200, SortableContainer).stableSort$(false) == 123.repeat(200, SortableContainer)
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Container(Int.getRandom() & 63, i))
    a1.stableSort(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        const i1 ItemForStableSort_Container = a1[i - 1]
        const i2 ItemForStableSort_Container = a1[i]
        allOk = allOk && (i1.sortedItem~() == i2.sortedItem~()).select(i1.id~() < i2.id~(), true)
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Container(Int.getRandom() & 63, i))
    a1.stableSort(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        const i1 ItemForStableSort_Container = a1[i - 1]
        const i2 ItemForStableSort_Container = a1[i]
        allOk = allOk && (i1.sortedItem~() == i2.sortedItem~()).select(i1.id~() < i2.id~(), true)
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Container(Int.getRandom() & 63, i))
    a2 = a1.stableSort$(true)
    allOk = true
    for :(i Int = 1) i < 200; i++
        const i1 ItemForStableSort_Container = a2[i - 1]
        const i2 ItemForStableSort_Container = a2[i]
        allOk = allOk && (i1.sortedItem~() == i2.sortedItem~()).select(i1.id~() < i2.id~(), true)
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Container(Int.getRandom() & 63, i))
    a2 = a1.stableSort$(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        const i1 ItemForStableSort_Container = a2[i - 1]
        const i2 ItemForStableSort_Container = a2[i]
        allOk = allOk && (i1.sortedItem~() == i2.sortedItem~()).select(i1.id~() < i2.id~(), true)
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Container(11, i))
    a1.stableSort(true)
    allOk = true
    for :(i Int = 0) i < 200; i++
        allOk = allOk && a1[i].type!(ItemForStableSort_Container).id~() == i
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Container(11, i))
    a1.stableSort(false)
    allOk = true
    for :(i Int = 0) i < 200; i++
        allOk = allOk && a1[i].type!(ItemForStableSort_Container).id~() == i
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Container(11, i))
    a2 = a1.stableSort$(true)
    allOk = true
    for :(i Int = 0) i < 200; i++
        allOk = allOk && a2[i].type!(ItemForStableSort_Container).id~() == i
    test: ok, errorsCoordinates
        allOk
    a1 = [].arrayToSortableContainer()
    for :(i Int = 0) i < 200; i++
        a1.addItem(ItemForStableSort_Container(11, i))
    a2 = a1.stableSort$(false)
    allOk = true
    for :(i Int = 1) i < 200; i++
        allOk = allOk && a2[i].type!(ItemForStableSort_Container).id~() == i
    test: ok, errorsCoordinates
        allOk

#noinline
def testContainer_Join(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        [].join(listToContainer({})) == listToContainer({})
        [].join(listToContainer({1})) == listToContainer({})
        [].join(listToContainer({1, 2})) == listToContainer({})
        [listToContainer({3})].join(listToContainer({})) == listToContainer({3})
        [listToContainer({3})].join(listToContainer({1})) == listToContainer({3})
        [listToContainer({3})].join(listToContainer({1, 2})) == listToContainer({3})
        ["3"].join(listToContainer({})) : eid_invalidType
        ["3"].join(listToContainer({1})) : eid_invalidType
        ["3"].join(listToContainer({1, 2})) : eid_invalidType
        [listToContainer({3}), listToContainer({4})].join(listToContainer({})) == listToContainer({3, 4})
        [listToContainer({3}), listToContainer({4})].join(listToContainer({1})) == listToContainer({3, 1, 4})
        [listToContainer({3}), listToContainer({4})].join(listToContainer({1, 2})) == listToContainer({3, 1, 2, 4})
        ["3", "4"].join(listToContainer({})) : eid_invalidType
        ["3", "4"].join(listToContainer({1})) : eid_invalidType
        ["3", "4"].join(listToContainer({1, 2})) : eid_invalidType
        [listToContainer({3}), listToContainer({4}), listToContainer({5})].join(listToContainer({})) == listToContainer({3, 4, 5})
        [listToContainer({3}), listToContainer({4}), listToContainer({5})].join(listToContainer({1})) == listToContainer({3, 1, 4, 1, 5})
        [listToContainer({3}), listToContainer({4}), listToContainer({5})].join(listToContainer({1, 2})) == listToContainer({3, 1, 2, 4, 1, 2, 5})
        ["3", "4", "5"].join(listToContainer({})) : eid_invalidType
        ["3", "4", "5"].join(listToContainer({1})) : eid_invalidType
        ["3", "4", "5"].join(listToContainer({1, 2})) : eid_invalidType
        [listToContainer({})].join(listToContainer({})) == listToContainer({})
        [listToContainer({})].join(listToContainer({1})) == listToContainer({})
        [listToContainer({}), listToContainer({})].join(listToContainer({})) == listToContainer({})
        [listToContainer({}), listToContainer({})].join(listToContainer({1})) == listToContainer({1})
        [listToContainer({}), listToContainer({}), listToContainer({})].join(listToContainer({})) == listToContainer({})
        [listToContainer({}), listToContainer({}), listToContainer({})].join(listToContainer({1, 2})) == listToContainer({1, 2, 1, 2})
        [listToContainer({7}), listToContainer({}), listToContainer({})].join(listToContainer({1, 2})) == listToContainer({7, 1, 2, 1, 2})
        [listToContainer({7}), listToContainer({9}), listToContainer({})].join(listToContainer({1, 2})) == listToContainer({7, 1, 2, 9, 1, 2})
        [listToContainer({7}), listToContainer({}), listToContainer({9})].join(listToContainer({1, 2})) == listToContainer({7, 1, 2, 1, 2, 9})

#noinline
def testContainer_Uniq$(write ok Int, write errorsCoordinates List)
    test: ok, errorsCoordinates
        arrayToSortableContainer([]).uniq$() == arrayToSortableContainer([])
        arrayToSortableContainer([1]).uniq$() == arrayToSortableContainer([1])
        arrayToSortableContainer([1, 1]).uniq$() == arrayToSortableContainer([1])
        arrayToSortableContainer([1, 1, 1, 1, 1, 1, 1, 1]).uniq$() == arrayToSortableContainer([1])
        arrayToSortableContainer([1, 2]).uniq$() == arrayToSortableContainer([1, 2])
        arrayToSortableContainer([2, 1]).uniq$() == arrayToSortableContainer([2, 1])
        arrayToSortableContainer([1, 2, 2]).uniq$() == arrayToSortableContainer([1, 2])
        arrayToSortableContainer([1, 2, 1]).uniq$() == arrayToSortableContainer([1, 2])
        arrayToSortableContainer([1, 2, 1, 2, 1, 2, 2, 2]).uniq$() == arrayToSortableContainer([1, 2])
        arrayToSortableContainer([1, 2, 3]).uniq$() == arrayToSortableContainer([1, 2, 3])
        arrayToSortableContainer([1, 2, 3, 2]).uniq$() == arrayToSortableContainer([1, 2, 3])
        arrayToSortableContainer([1, 2, 1, 3]).uniq$() == arrayToSortableContainer([1, 2, 3])
        arrayToSortableContainer([1, 2, 3, 1]).uniq$() == arrayToSortableContainer([1, 2, 3])
        arrayToSortableContainer([3, 2, 1, 1]).uniq$() == arrayToSortableContainer([3, 2, 1])
        arrayToSortableContainer([1.0]).uniq$() == arrayToSortableContainer([1.0])
        arrayToSortableContainer([1.0, 1.0]).uniq$() == arrayToSortableContainer([1.0])
        arrayToSortableContainer([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]).uniq$() == arrayToSortableContainer([1.0])
        arrayToSortableContainer([1.0, 2.0]).uniq$() == arrayToSortableContainer([1.0, 2.0])
        arrayToSortableContainer([1.0, 2.0, 2.0]).uniq$() == arrayToSortableContainer([1.0, 2.0])
        arrayToSortableContainer([1.0, 2.0, 1.0]).uniq$() == arrayToSortableContainer([1.0, 2.0])
        arrayToSortableContainer([1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 2.0]).uniq$() == arrayToSortableContainer([1.0, 2.0])
        arrayToSortableContainer([1.0, 2.0, 3.0]).uniq$() == arrayToSortableContainer([1.0, 2.0, 3.0])
        arrayToSortableContainer([1.0, 2.0, 3.0, 2.0]).uniq$() == arrayToSortableContainer([1.0, 2.0, 3.0])
        arrayToSortableContainer([1.0, 2.0, 1.0, 3.0]).uniq$() == arrayToSortableContainer([1.0, 2.0, 3.0])
        arrayToSortableContainer([1.0, 2.0, 3.0, 1.0]).uniq$() == arrayToSortableContainer([1.0, 2.0, 3.0])
        arrayToSortableContainer([3.0, 2.0, 1.0, 1.0]).uniq$() == arrayToSortableContainer([3.0, 2.0, 1.0])
        arrayToSortableContainer([Map()]).uniq$() : eid_invalidType

#noinline
def testContainer_Uniq(write ok Int, write errorsCoordinates List)
    var c SortableContainer = arrayToSortableContainer([])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([])
    c = arrayToSortableContainer([1])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1])
    c = arrayToSortableContainer([1, 1])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1])
    c = arrayToSortableContainer([1, 1, 1, 1, 1, 1, 1, 1])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1])
    c = arrayToSortableContainer([1, 2])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1, 2])
    c = arrayToSortableContainer([2, 1])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([2, 1])
    c = arrayToSortableContainer([1, 2, 2])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1, 2])
    c = arrayToSortableContainer([1, 2, 1])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1, 2])
    c = arrayToSortableContainer([1, 2, 1, 2, 1, 2, 2, 2])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1, 2])
    c = arrayToSortableContainer([1, 2, 3])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1, 2, 3])
    c = arrayToSortableContainer([1, 2, 3, 2])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1, 2, 3])
    c = arrayToSortableContainer([1, 2, 1, 3])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1, 2, 3])
    c = arrayToSortableContainer([1, 2, 3, 1])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1, 2, 3])
    c = arrayToSortableContainer([3, 2, 1, 1])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([3, 2, 1])
    c = arrayToSortableContainer([1.0])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1.0])
    c = arrayToSortableContainer([1.0, 1.0])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1.0])
    c = arrayToSortableContainer([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1.0])
    c = arrayToSortableContainer([1.0, 2.0])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1.0, 2.0])
    c = arrayToSortableContainer([1.0, 2.0, 2.0])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1.0, 2.0])
    c = arrayToSortableContainer([1.0, 2.0, 1.0])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1.0, 2.0])
    c = arrayToSortableContainer([1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 2.0])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1.0, 2.0])
    c = arrayToSortableContainer([1.0, 2.0, 3.0])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1.0, 2.0, 3.0])
    c = arrayToSortableContainer([1.0, 2.0, 3.0, 2.0])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1.0, 2.0, 3.0])
    c = arrayToSortableContainer([1.0, 2.0, 1.0, 3.0])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1.0, 2.0, 3.0])
    c = arrayToSortableContainer([1.0, 2.0, 3.0, 1.0])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([1.0, 2.0, 3.0])
    c = arrayToSortableContainer([3.0, 2.0, 1.0, 1.0])
    test: ok, errorsCoordinates
        c.uniq().nothing?()
        c == arrayToSortableContainer([3.0, 2.0, 1.0])
    c = arrayToSortableContainer([Map()])
    test: ok, errorsCoordinates
        c.uniq() : eid_invalidType

#noinline
def testContainer_Serialize(write ok Int, write errorsCoordinates List)
    var bytes Bytes = Bytes()
    var position Int = 0
    test: ok, errorsCoordinates
        arrayToSortableContainer([]).serializeContainer(bytes).nothing?()
        bytes == [0, 0, 0, 0, 0, 0, 0, 0].intArrayToBytes_Container()
        arrayToSortableContainer([1, 2, 3, 4]).serializeContainer(bytes).nothing?()
        bytes == [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0].intArrayToBytes_Container()
        SortableContainer.deserializeContainer(bytes, position, Int) == arrayToSortableContainer([])
        position == 8
        SortableContainer.deserializeContainer(bytes, position, Int) == arrayToSortableContainer([1, 2, 3, 4])
        position == 48
        SortableContainer.deserializeContainer(bytes, position, Int) : eid_outOfRange
        position == 48
