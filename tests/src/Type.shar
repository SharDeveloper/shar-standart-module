module Main

type Type1

type Type2
    a Int
    b Int
    c Int
    d String

def testType(write ok Int, write errorsCoordinates List)
    const s String = "abc".clone()
    test: ok, errorsCoordinates
        s.unsafe_getI64(0) == 1
        Type1{}.type?(Type1)
        Type2{a: 1, b : 2, c : 3, d : s}.type?(Type2)
        Type2{a: 1, b : 2, c : 3, d : s}.a~() == 1
        Type2{a: 1, b : 2, c : 3, d : s}.b~() == 2
        Type2{a: 1, b : 2, c : 3, d : s}.c~() == 3
        Type2{a: 1, b : 2, c : 3, d : s}.d~() == "abc"
        s.unsafe_getI64(0) == 1
    do
        var t Type2 = Type2{a: 1, b : 2, c : 3, d : s}
        test: ok, errorsCoordinates
            s.unsafe_getI64(0) == 2
            (t.unsafe_getI64(0) & 0xffffffffff) == 1
            (t.unsafe_getI64(0) >> 40) == 4
            t.d`("a") == "abc"
            s.unsafe_getI64(0) == 1
            t.d~() == "a"
            t.d`(s) == "a"
            s.unsafe_getI64(0) == 2
            t.clone().d~().unsafe_getI64(0) == 3
            s.unsafe_getI64(0) == 2
        const tt Type2 = t
        test: ok, errorsCoordinates
            (t.unsafe_getI64(0) & 0xffffffffff) == 2
            (t.unsafe_getI64(0) >> 40) == 4
            (tt.unsafe_getI64(0) & 0xffffffffff) == 2
            (tt.unsafe_getI64(0) >> 40) == 4
            s.unsafe_getI64(0) == 2
    test: ok, errorsCoordinates
        s.unsafe_getI64(0) == 1
